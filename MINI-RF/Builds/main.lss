
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000680  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  00800108  00800108  0000071c  2**0
                  ALLOC
  3 .stab         00002bf8  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000178f  00000000  00000000  00003314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004aa3  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000576  00000000  00000000  00004ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052b  00000000  00000000  0000502a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00005555  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d9  00000000  00000000  00005572  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	73 c2       	rjmp	.+1254   	; 0x4f2 <__vector_5>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d1 e0       	ldi	r29, 0x01	; 1
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e0 e8       	ldi	r30, 0x80	; 128
  3c:	f6 e0       	ldi	r31, 0x06	; 6
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a8 30       	cpi	r26, 0x08	; 8
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	11 e0       	ldi	r17, 0x01	; 1
  4c:	a8 e0       	ldi	r26, 0x08	; 8
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a9 38       	cpi	r26, 0x89	; 137
  56:	b1 07       	cpc	r27, r17
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	5a d2       	rcall	.+1204   	; 0x510 <main>
  5c:	0f c3       	rjmp	.+1566   	; 0x67c <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <TWIM_Init>:
  60:	9b 01       	movw	r18, r22
  62:	ac 01       	movw	r20, r24
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	72 e1       	ldi	r23, 0x12	; 18
  68:	8a e7       	ldi	r24, 0x7A	; 122
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	e5 d2       	rcall	.+1482   	; 0x638 <__udivmodsi4>
  6e:	da 01       	movw	r26, r20
  70:	c9 01       	movw	r24, r18
  72:	40 97       	sbiw	r24, 0x10	; 16
  74:	a1 09       	sbc	r26, r1
  76:	b1 09       	sbc	r27, r1
  78:	b6 95       	lsr	r27
  7a:	a7 95       	ror	r26
  7c:	97 95       	ror	r25
  7e:	87 95       	ror	r24
  80:	80 93 b8 00 	sts	0x00B8, r24
  84:	90 91 b8 00 	lds	r25, 0x00B8
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	9b 30       	cpi	r25, 0x0B	; 11
  8c:	08 f4       	brcc	.+2      	; 0x90 <TWIM_Init+0x30>
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	08 95       	ret

00000092 <TWIM_Start>:
{
    uint8_t		twst;
    /*
     ** Send START condition
     */
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  92:	94 ea       	ldi	r25, 0xA4	; 164
  94:	90 93 bc 00 	sts	0x00BC, r25
    /*
     ** Wait until transmission completed
     */
    while (!(TWCR & (1<<TWINT)));
  98:	90 91 bc 00 	lds	r25, 0x00BC
  9c:	97 ff       	sbrs	r25, 7
  9e:	fc cf       	rjmp	.-8      	; 0x98 <TWIM_Start+0x6>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits.
     */
    twst = TWSR & 0xF8;
  a0:	90 91 b9 00 	lds	r25, 0x00B9
  a4:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst != TWI_START) && (twst != TWI_REP_START)) return FALSE;
  a6:	98 30       	cpi	r25, 0x08	; 8
  a8:	21 f0       	breq	.+8      	; 0xb2 <TWIM_Start+0x20>
  aa:	90 31       	cpi	r25, 0x10	; 16
  ac:	11 f0       	breq	.+4      	; 0xb2 <TWIM_Start+0x20>
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	08 95       	ret
    /*
     ** Send device address
     */
    TWDR = (Address<<1) + TWIM_Type;
  b2:	88 0f       	add	r24, r24
  b4:	68 0f       	add	r22, r24
  b6:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWINT)|(1<<TWEN);
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until transmission completed and ACK/NACK has been received
     */
    while (!(TWCR & (1<<TWINT)));
  c0:	80 91 bc 00 	lds	r24, 0x00BC
  c4:	87 ff       	sbrs	r24, 7
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <TWIM_Start+0x2e>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits.
     */
    twst = TWSR & 0xF8;
  c8:	80 91 b9 00 	lds	r24, 0x00B9
  cc:	88 7f       	andi	r24, 0xF8	; 248
    if ((twst != TWI_MTX_ADR_ACK) && (twst != TWI_MRX_ADR_ACK)) return FALSE;
  ce:	88 31       	cpi	r24, 0x18	; 24
  d0:	11 f0       	breq	.+4      	; 0xd6 <TWIM_Start+0x44>
  d2:	80 34       	cpi	r24, 0x40	; 64
  d4:	61 f7       	brne	.-40     	; 0xae <TWIM_Start+0x1c>
    
    return TRUE;
  d6:	81 e0       	ldi	r24, 0x01	; 1
}
  d8:	08 95       	ret

000000da <TWIM_Stop>:
void TWIM_Stop (void)
{
    /*
     ** Send stop condition
     */
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  da:	84 e9       	ldi	r24, 0x94	; 148
  dc:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until stop condition is executed and bus released
     */
    while (TWCR & (1<<TWINT));
  e0:	80 91 bc 00 	lds	r24, 0x00BC
  e4:	87 fd       	sbrc	r24, 7
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <TWIM_Stop+0x6>
}
  e8:	08 95       	ret

000000ea <TWIM_Write>:
{
    uint8_t   twst;
    /*
     ** Send data to the previously addressed device
     */
    TWDR = byte;
  ea:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until transmission completed
     */
    while (!(TWCR & (1<<TWINT)));
  f4:	80 91 bc 00 	lds	r24, 0x00BC
  f8:	87 ff       	sbrs	r24, 7
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <TWIM_Write+0xa>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits
     */
    twst = TWSR & 0xF8;
  fc:	90 91 b9 00 	lds	r25, 0x00B9
 100:	98 7f       	andi	r25, 0xF8	; 248
    if (twst != TWI_MTX_DATA_ACK) return 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	98 32       	cpi	r25, 0x28	; 40
 106:	09 f4       	brne	.+2      	; 0x10a <TWIM_Write+0x20>
 108:	80 e0       	ldi	r24, 0x00	; 0
    
    return 0;
}
 10a:	08 95       	ret

0000010c <TWIM_ReadAck>:
 - uint8_t	Read byte
 
 *******************************************************/
uint8_t TWIM_ReadAck (void)
{
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 10c:	84 ec       	ldi	r24, 0xC4	; 196
 10e:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 112:	80 91 bc 00 	lds	r24, 0x00BC
 116:	87 ff       	sbrs	r24, 7
 118:	fc cf       	rjmp	.-8      	; 0x112 <TWIM_ReadAck+0x6>
    
    return TWDR;
 11a:	80 91 bb 00 	lds	r24, 0x00BB
}
 11e:	08 95       	ret

00000120 <TWIM_ReadNack>:
 - uint8_t	Read byte
 
 *******************************************************/
uint8_t TWIM_ReadNack (void)
{
    TWCR = (1<<TWINT)|(1<<TWEN);
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT)));
 126:	80 91 bc 00 	lds	r24, 0x00BC
 12a:	87 ff       	sbrs	r24, 7
 12c:	fc cf       	rjmp	.-8      	; 0x126 <TWIM_ReadNack+0x6>
    
    return TWDR;
 12e:	80 91 bb 00 	lds	r24, 0x00BB
}
 132:	08 95       	ret

00000134 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
    uint8_t i;
    
    // ensure data will fit into buffer
    if(TWI_BUFFER_LENGTH < length){
 134:	41 31       	cpi	r20, 0x11	; 17
 136:	60 f5       	brcc	.+88     	; 0x190 <twi_readFrom+0x5c>
        return 0;
    }
    
    // wait until twi is ready, become master receiver
    while(TWI_READY != twi_state){
 138:	90 91 0c 01 	lds	r25, 0x010C
 13c:	91 11       	cpse	r25, r1
 13e:	fc cf       	rjmp	.-8      	; 0x138 <twi_readFrom+0x4>
        continue;
    }
    twi_state = TWI_MRX;
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	90 93 0c 01 	sts	0x010C, r25
    // reset error state (0xFF.. no error occured)
    twi_error = 0xFF;
 146:	9f ef       	ldi	r25, 0xFF	; 255
 148:	90 93 0a 01 	sts	0x010A, r25
    
    // initialize buffer iteration vars
    twi_masterBufferIndex = 0;
 14c:	10 92 09 01 	sts	0x0109, r1
    twi_masterBufferLength = length-1;  // This is not intuitive, read on...
 150:	94 0f       	add	r25, r20
 152:	90 93 08 01 	sts	0x0108, r25
    // received, causing that NACK to be sent in response to receiving the last
    // expected byte of data.
    
    // build sla+w, slave device address + w bit
    //twi_slarw = TW_READ;
    twi_slarw |= address << 1;
 156:	88 0f       	add	r24, r24
 158:	90 91 0b 01 	lds	r25, 0x010B
 15c:	89 2b       	or	r24, r25
 15e:	80 93 0b 01 	sts	0x010B, r24
    
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
 162:	85 ee       	ldi	r24, 0xE5	; 229
 164:	80 93 bc 00 	sts	0x00BC, r24
    
    // wait for read operation to complete
    while(TWI_MRX == twi_state){
 168:	80 91 0c 01 	lds	r24, 0x010C
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	e1 f3       	breq	.-8      	; 0x168 <twi_readFrom+0x34>
        continue;
    }
    
    if (twi_masterBufferIndex < length)
 170:	80 91 09 01 	lds	r24, 0x0109
 174:	84 17       	cp	r24, r20
 176:	10 f4       	brcc	.+4      	; 0x17c <twi_readFrom+0x48>
        length = twi_masterBufferIndex;
 178:	40 91 09 01 	lds	r20, 0x0109
 17c:	96 2f       	mov	r25, r22
    
    // copy twi buffer to data
    for(i = 0; i < length; ++i){
 17e:	fb 01       	movw	r30, r22
 180:	8e 2f       	mov	r24, r30
 182:	89 1b       	sub	r24, r25
 184:	84 17       	cp	r24, r20
 186:	10 f4       	brcc	.+4      	; 0x18c <twi_readFrom+0x58>
        data[i] = twi_masterBuffer[i];
 188:	11 92       	st	Z+, r1
 18a:	fa cf       	rjmp	.-12     	; 0x180 <twi_readFrom+0x4c>
 18c:	84 2f       	mov	r24, r20
 18e:	08 95       	ret
{
    uint8_t i;
    
    // ensure data will fit into buffer
    if(TWI_BUFFER_LENGTH < length){
        return 0;
 190:	80 e0       	ldi	r24, 0x00	; 0
    for(i = 0; i < length; ++i){
        data[i] = twi_masterBuffer[i];
    }
    
    return length;
}
 192:	08 95       	ret

00000194 <SpiInit>:
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	85 b9       	out	0x05, r24	; 5
 198:	8c e2       	ldi	r24, 0x2C	; 44
 19a:	84 b9       	out	0x04, r24	; 4
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	2c 98       	cbi	0x05, 4	; 5
 1a2:	81 e5       	ldi	r24, 0x51	; 81
 1a4:	8c bd       	out	0x2c, r24	; 44
 1a6:	08 95       	ret

000001a8 <SpiTransfer>:
 *INPUT        :value: data to send
 *OUTPUT       :data to receive
 ****************************************************************/
byte SpiTransfer(byte value)
{
    SPDR = value;
 1a8:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF))) ;
 1aa:	0d b4       	in	r0, 0x2d	; 45
 1ac:	07 fe       	sbrs	r0, 7
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <SpiTransfer+0x2>
    return SPDR;
 1b0:	8e b5       	in	r24, 0x2e	; 46
}
 1b2:	08 95       	ret

000001b4 <GDO_Set>:
 ****************************************************************/
void GDO_Set (void)
{
    // pinMode(GDO0, INPUT);
    // pinMode(GDO2, INPUT);
    DDRD &= ~(1<<DDD2);
 1b4:	52 98       	cbi	0x0a, 2	; 10
 1b6:	08 95       	ret

000001b8 <Reset>:
 *OUTPUT       :none
 ****************************************************************/
void Reset (void)
{
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 1b8:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	8f ec       	ldi	r24, 0xCF	; 207
 1bc:	97 e0       	ldi	r25, 0x07	; 7
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <Reset+0x6>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <Reset+0xc>
 1c4:	00 00       	nop
    _delay_ms(1);
    //digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<PB2);
 1c6:	2a 9a       	sbi	0x05, 2	; 5
 1c8:	8f ec       	ldi	r24, 0xCF	; 207
 1ca:	97 e0       	ldi	r25, 0x07	; 7
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <Reset+0x14>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <Reset+0x1a>
 1d2:	00 00       	nop
    _delay_ms(1);
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 1d4:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 1d6:	1c 99       	sbic	0x03, 4	; 3
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <Reset+0x1e>
    SpiTransfer(CC1101_SRES);
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	e5 df       	rcall	.-54     	; 0x1a8 <SpiTransfer>
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 1de:	1c 99       	sbic	0x03, 4	; 3
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <Reset+0x26>
    //digitalWrite(SS_PIN, HIGH);]
    PORTB = (1<<PB2);
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	85 b9       	out	0x05, r24	; 5
 1e6:	08 95       	ret

000001e8 <SpiWriteReg>:
 *FUNCTION     :CC1101 write data to register
 *INPUT        :addr: register address; value: register value
 *OUTPUT       :none
 ****************************************************************/
void SpiWriteReg(byte addr, byte value)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	1f 92       	push	r1
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 1f2:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 1f4:	1c 99       	sbic	0x03, 4	; 3
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <SpiWriteReg+0xc>
    SpiTransfer(addr);
 1f8:	69 83       	std	Y+1, r22	; 0x01
 1fa:	d6 df       	rcall	.-84     	; 0x1a8 <SpiTransfer>
    SpiTransfer(value);
 1fc:	69 81       	ldd	r22, Y+1	; 0x01
 1fe:	86 2f       	mov	r24, r22
    //digitalWrite(SS_PIN, HIGH);
}
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
    //while(digitalRead(MISO_PIN));
    wait_Miso();
    SpiTransfer(addr);
    SpiTransfer(value);
 206:	d0 cf       	rjmp	.-96     	; 0x1a8 <SpiTransfer>

00000208 <SpiWriteBurstReg>:
 *FUNCTION     :CC1101 write burst data to register
 *INPUT        :addr: register address; buffer:register value array; num:number to write
 *OUTPUT       :none
 ****************************************************************/
void SpiWriteBurstReg(byte addr, byte *buffer, byte num)
{
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <SpiWriteBurstReg+0xe>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	14 2f       	mov	r17, r20
    byte i, temp;
    
    temp = addr | WRITE_BURST;
 21c:	80 64       	ori	r24, 0x40	; 64
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 21e:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 220:	1c 99       	sbic	0x03, 4	; 3
 222:	fe cf       	rjmp	.-4      	; 0x220 <SpiWriteBurstReg+0x18>
    SpiTransfer(temp);
 224:	69 83       	std	Y+1, r22	; 0x01
 226:	7a 83       	std	Y+2, r23	; 0x02
 228:	bf df       	rcall	.-130    	; 0x1a8 <SpiTransfer>
 22a:	69 81       	ldd	r22, Y+1	; 0x01
 22c:	06 2f       	mov	r16, r22
    for (i = 0; i < num; i++)
 22e:	e6 2e       	mov	r14, r22
 230:	7a 81       	ldd	r23, Y+2	; 0x02
 232:	f7 2e       	mov	r15, r23
 234:	8e 2d       	mov	r24, r14
 236:	80 1b       	sub	r24, r16
 238:	81 17       	cp	r24, r17
 23a:	28 f4       	brcc	.+10     	; 0x246 <SpiWriteBurstReg+0x3e>
    {
        SpiTransfer(buffer[i]);
 23c:	f7 01       	movw	r30, r14
 23e:	81 91       	ld	r24, Z+
 240:	7f 01       	movw	r14, r30
 242:	b2 df       	rcall	.-156    	; 0x1a8 <SpiTransfer>
 244:	f7 cf       	rjmp	.-18     	; 0x234 <SpiWriteBurstReg+0x2c>
    }
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	85 b9       	out	0x05, r24	; 5
}
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	08 95       	ret

0000025c <SpiStrobe>:
 *OUTPUT       :none
 ****************************************************************/
void SpiStrobe(byte strobe)
{
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 25c:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 25e:	1c 99       	sbic	0x03, 4	; 3
 260:	fe cf       	rjmp	.-4      	; 0x25e <SpiStrobe+0x2>
    SpiTransfer(strobe);
 262:	a2 df       	rcall	.-188    	; 0x1a8 <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	85 b9       	out	0x05, r24	; 5
 268:	08 95       	ret

0000026a <SpiReadReg>:
 ****************************************************************/
byte SpiReadReg(byte addr)
{
    byte temp, value;
    
    temp = addr|READ_SINGLE;
 26a:	80 68       	ori	r24, 0x80	; 128
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 26c:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 26e:	1c 99       	sbic	0x03, 4	; 3
 270:	fe cf       	rjmp	.-4      	; 0x26e <SpiReadReg+0x4>
    SpiTransfer(temp);
 272:	9a df       	rcall	.-204    	; 0x1a8 <SpiTransfer>
    value=SpiTransfer(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	98 df       	rcall	.-208    	; 0x1a8 <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 278:	94 e0       	ldi	r25, 0x04	; 4
 27a:	95 b9       	out	0x05, r25	; 5
    return value;
}
 27c:	08 95       	ret

0000027e <SpiReadBurstReg>:
 *FUNCTION     :CC1101 read burst data from register
 *INPUT        :addr: register address; buffer:array to store register value; num: number to read
 *OUTPUT       :none
 ****************************************************************/
void SpiReadBurstReg(byte addr, byte *buffer, byte num)
{
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <SpiReadBurstReg+0xe>
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	14 2f       	mov	r17, r20
    byte i,temp;
    
    temp = addr | READ_BURST;
 292:	80 6c       	ori	r24, 0xC0	; 192
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 294:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 296:	1c 99       	sbic	0x03, 4	; 3
 298:	fe cf       	rjmp	.-4      	; 0x296 <SpiReadBurstReg+0x18>
    SpiTransfer(temp);
 29a:	69 83       	std	Y+1, r22	; 0x01
 29c:	7a 83       	std	Y+2, r23	; 0x02
 29e:	84 df       	rcall	.-248    	; 0x1a8 <SpiTransfer>
 2a0:	69 81       	ldd	r22, Y+1	; 0x01
 2a2:	06 2f       	mov	r16, r22
    for(i=0;i<num;i++)
 2a4:	e6 2e       	mov	r14, r22
 2a6:	7a 81       	ldd	r23, Y+2	; 0x02
 2a8:	f7 2e       	mov	r15, r23
 2aa:	8e 2d       	mov	r24, r14
 2ac:	80 1b       	sub	r24, r16
 2ae:	81 17       	cp	r24, r17
 2b0:	30 f4       	brcc	.+12     	; 0x2be <SpiReadBurstReg+0x40>
    {
        buffer[i]=SpiTransfer(0);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	79 df       	rcall	.-270    	; 0x1a8 <SpiTransfer>
 2b6:	f7 01       	movw	r30, r14
 2b8:	81 93       	st	Z+, r24
 2ba:	7f 01       	movw	r14, r30
 2bc:	f6 cf       	rjmp	.-20     	; 0x2aa <SpiReadBurstReg+0x2c>
    }
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	85 b9       	out	0x05, r24	; 5
}
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	08 95       	ret

000002d4 <SpiReadStatus>:
 ****************************************************************/
byte SpiReadStatus(byte addr)
{
    byte value,temp;
    
    temp = addr | READ_BURST;
 2d4:	80 6c       	ori	r24, 0xC0	; 192
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 2d6:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 2d8:	1c 99       	sbic	0x03, 4	; 3
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <SpiReadStatus+0x4>
    SpiTransfer(temp);
 2dc:	65 df       	rcall	.-310    	; 0x1a8 <SpiTransfer>
    value=SpiTransfer(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	63 df       	rcall	.-314    	; 0x1a8 <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 2e2:	94 e0       	ldi	r25, 0x04	; 4
 2e4:	95 b9       	out	0x05, r25	; 5
    return value;
}
 2e6:	08 95       	ret

000002e8 <RegConfigSettings>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void RegConfigSettings(void)
{
    SpiWriteReg(CC1101_FSCTRL1,  0x08);
 2e8:	68 e0       	ldi	r22, 0x08	; 8
 2ea:	8b e0       	ldi	r24, 0x0B	; 11
 2ec:	7d df       	rcall	.-262    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCTRL0,  0x00);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	8c e0       	ldi	r24, 0x0C	; 12
 2f2:	7a df       	rcall	.-268    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ2,    0x10);
 2f4:	60 e1       	ldi	r22, 0x10	; 16
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	77 df       	rcall	.-274    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ1,    0xA7);
 2fa:	67 ea       	ldi	r22, 0xA7	; 167
 2fc:	8e e0       	ldi	r24, 0x0E	; 14
 2fe:	74 df       	rcall	.-280    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ0,    0x62);
 300:	62 e6       	ldi	r22, 0x62	; 98
 302:	8f e0       	ldi	r24, 0x0F	; 15
 304:	71 df       	rcall	.-286    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG4,  0x5B);
 306:	6b e5       	ldi	r22, 0x5B	; 91
 308:	80 e1       	ldi	r24, 0x10	; 16
 30a:	6e df       	rcall	.-292    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG3,  0xF8);
 30c:	68 ef       	ldi	r22, 0xF8	; 248
 30e:	81 e1       	ldi	r24, 0x11	; 17
 310:	6b df       	rcall	.-298    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG2,  0x03);
 312:	63 e0       	ldi	r22, 0x03	; 3
 314:	82 e1       	ldi	r24, 0x12	; 18
 316:	68 df       	rcall	.-304    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG1,  0x22);
 318:	62 e2       	ldi	r22, 0x22	; 34
 31a:	83 e1       	ldi	r24, 0x13	; 19
 31c:	65 df       	rcall	.-310    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG0,  0xF8);
 31e:	68 ef       	ldi	r22, 0xF8	; 248
 320:	84 e1       	ldi	r24, 0x14	; 20
 322:	62 df       	rcall	.-316    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_CHANNR,   0x00);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	5f df       	rcall	.-322    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_DEVIATN,  0x47);
 32a:	67 e4       	ldi	r22, 0x47	; 71
 32c:	85 e1       	ldi	r24, 0x15	; 21
 32e:	5c df       	rcall	.-328    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FREND1,   0xB6);
 330:	66 eb       	ldi	r22, 0xB6	; 182
 332:	81 e2       	ldi	r24, 0x21	; 33
 334:	59 df       	rcall	.-334    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FREND0,   0x10);
 336:	60 e1       	ldi	r22, 0x10	; 16
 338:	82 e2       	ldi	r24, 0x22	; 34
 33a:	56 df       	rcall	.-340    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_MCSM0 ,   0x18);
 33c:	68 e1       	ldi	r22, 0x18	; 24
 33e:	88 e1       	ldi	r24, 0x18	; 24
 340:	53 df       	rcall	.-346    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FOCCFG,   0x1D);
 342:	6d e1       	ldi	r22, 0x1D	; 29
 344:	89 e1       	ldi	r24, 0x19	; 25
 346:	50 df       	rcall	.-352    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_BSCFG,    0x1C);
 348:	6c e1       	ldi	r22, 0x1C	; 28
 34a:	8a e1       	ldi	r24, 0x1A	; 26
 34c:	4d df       	rcall	.-358    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL2, 0xC7);
 34e:	67 ec       	ldi	r22, 0xC7	; 199
 350:	8b e1       	ldi	r24, 0x1B	; 27
 352:	4a df       	rcall	.-364    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL1, 0x00);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	8c e1       	ldi	r24, 0x1C	; 28
 358:	47 df       	rcall	.-370    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL0, 0xB2);
 35a:	62 eb       	ldi	r22, 0xB2	; 178
 35c:	8d e1       	ldi	r24, 0x1D	; 29
 35e:	44 df       	rcall	.-376    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL3,   0xEA);
 360:	6a ee       	ldi	r22, 0xEA	; 234
 362:	83 e2       	ldi	r24, 0x23	; 35
 364:	41 df       	rcall	.-382    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL2,   0x2A);
 366:	6a e2       	ldi	r22, 0x2A	; 42
 368:	84 e2       	ldi	r24, 0x24	; 36
 36a:	3e df       	rcall	.-388    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL1,   0x00);
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	85 e2       	ldi	r24, 0x25	; 37
 370:	3b df       	rcall	.-394    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL0,   0x11);
 372:	61 e1       	ldi	r22, 0x11	; 17
 374:	86 e2       	ldi	r24, 0x26	; 38
 376:	38 df       	rcall	.-400    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_FSTEST,   0x59);
 378:	69 e5       	ldi	r22, 0x59	; 89
 37a:	89 e2       	ldi	r24, 0x29	; 41
 37c:	35 df       	rcall	.-406    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST2,    0x81);
 37e:	61 e8       	ldi	r22, 0x81	; 129
 380:	8c e2       	ldi	r24, 0x2C	; 44
 382:	32 df       	rcall	.-412    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST1,    0x35);
 384:	65 e3       	ldi	r22, 0x35	; 53
 386:	8d e2       	ldi	r24, 0x2D	; 45
 388:	2f df       	rcall	.-418    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST0,    0x09);
 38a:	69 e0       	ldi	r22, 0x09	; 9
 38c:	8e e2       	ldi	r24, 0x2E	; 46
 38e:	2c df       	rcall	.-424    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_IOCFG2,   0x0B);     //serial clock.synchronous to the data in synchronous serial mode
 390:	6b e0       	ldi	r22, 0x0B	; 11
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	29 df       	rcall	.-430    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_IOCFG0,   0x06);     //asserts when sync word has been sent/received, and de-asserts at the end of the packet
 396:	66 e0       	ldi	r22, 0x06	; 6
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	26 df       	rcall	.-436    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_PKTCTRL1, 0x04);     //two status bytes will be appended to the payload of the packet,including RSSI LQI and CRC OK
 39c:	64 e0       	ldi	r22, 0x04	; 4
 39e:	87 e0       	ldi	r24, 0x07	; 7
 3a0:	23 df       	rcall	.-442    	; 0x1e8 <SpiWriteReg>
    //No address check
    SpiWriteReg(CC1101_PKTCTRL0, 0x05);     //whitening off;CRC Enable£»variable length packets, packet length configured by the first byte after sync word
 3a2:	65 e0       	ldi	r22, 0x05	; 5
 3a4:	88 e0       	ldi	r24, 0x08	; 8
 3a6:	20 df       	rcall	.-448    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_ADDR,     0x00);     //address used for packet filtration.
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	89 e0       	ldi	r24, 0x09	; 9
 3ac:	1d df       	rcall	.-454    	; 0x1e8 <SpiWriteReg>
    SpiWriteReg(CC1101_PKTLEN,   0x3D);     //61 bytes max length
 3ae:	6d e3       	ldi	r22, 0x3D	; 61
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	1a cf       	rjmp	.-460    	; 0x1e8 <SpiWriteReg>

000003b4 <Init>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void Init(void)
{
    SpiInit();                                      //spi initialization
 3b4:	ef de       	rcall	.-546    	; 0x194 <SpiInit>
    GDO_Set();                                     //GDO set
 3b6:	fe de       	rcall	.-516    	; 0x1b4 <GDO_Set>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	85 b9       	out	0x05, r24	; 5
    //digitalWrite(SCK_PIN, HIGH);
    PORTB = (1<<PB5);
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	85 b9       	out	0x05, r24	; 5
    //digitalWrite(MOSI_PIN, LOW);
    PORTB &= ~(1<<PB3);
 3c0:	2b 98       	cbi	0x05, 3	; 5
    Reset();                                       //CC1101 reset
 3c2:	fa de       	rcall	.-524    	; 0x1b8 <Reset>
    RegConfigSettings();                           //CC1101 register config
 3c4:	91 df       	rcall	.-222    	; 0x2e8 <RegConfigSettings>
    SpiWriteBurstReg(CC1101_PATABLE,PaTabel,8);        //CC1101 PATABLE config
 3c6:	48 e0       	ldi	r20, 0x08	; 8
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	71 e0       	ldi	r23, 0x01	; 1
 3cc:	8e e3       	ldi	r24, 0x3E	; 62
 3ce:	1c cf       	rjmp	.-456    	; 0x208 <SpiWriteBurstReg>

000003d0 <SendData>:
 *FUNCTION     :use CC1101 send data
 *INPUT        :txBuffer: data array to send; size: number of data to send, no more than 61
 *OUTPUT       :none
 ****************************************************************/
byte SendData(byte *txBuffer,byte size)
{
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	8c 01       	movw	r16, r24
 3e0:	46 2f       	mov	r20, r22
    byte res = 0x00;
    SpiWriteReg(CC1101_TXFIFO,size);
 3e2:	8f e3       	ldi	r24, 0x3F	; 63
 3e4:	49 83       	std	Y+1, r20	; 0x01
 3e6:	00 df       	rcall	.-512    	; 0x1e8 <SpiWriteReg>
    SpiWriteBurstReg(CC1101_TXFIFO,txBuffer,size);          //write data to send
 3e8:	49 81       	ldd	r20, Y+1	; 0x01
 3ea:	b8 01       	movw	r22, r16
 3ec:	8f e3       	ldi	r24, 0x3F	; 63
 3ee:	0c df       	rcall	.-488    	; 0x208 <SpiWriteBurstReg>
    SpiStrobe(CC1101_STX);                                  //start send
 3f0:	85 e3       	ldi	r24, 0x35	; 53
 3f2:	34 df       	rcall	.-408    	; 0x25c <SpiStrobe>
    //while (!digitalRead(GDO0));                             // Wait for GDO0 to be set -> sync transmitted
    //while (digitalRead(GDO0));                              // Wait for GDO0 to be cleared -> end of packet
    wait_GDO0_high();
 3f4:	4d 9b       	sbis	0x09, 5	; 9
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <SendData+0x24>
    wait_GDO0_low();
 3f8:	4d 99       	sbic	0x09, 5	; 9
 3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <SendData+0x28>
    if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 3fc:	8a e3       	ldi	r24, 0x3A	; 58
 3fe:	6a df       	rcall	.-300    	; 0x2d4 <SpiReadStatus>
 400:	18 2f       	mov	r17, r24
        res = 1;
    
    
    SpiStrobe(CC1101_SFTX);                                 //flush TXfifo
 402:	8b e3       	ldi	r24, 0x3B	; 59
 404:	2b df       	rcall	.-426    	; 0x25c <SpiStrobe>
    SpiStrobe(CC1101_STX);                                  //start send
    //while (!digitalRead(GDO0));                             // Wait for GDO0 to be set -> sync transmitted
    //while (digitalRead(GDO0));                              // Wait for GDO0 to be cleared -> end of packet
    wait_GDO0_high();
    wait_GDO0_low();
    if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 406:	1f 77       	andi	r17, 0x7F	; 127
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	09 f0       	breq	.+2      	; 0x40e <SendData+0x3e>
 40c:	80 e0       	ldi	r24, 0x00	; 0
    
    
    SpiStrobe(CC1101_SFTX);                                 //flush TXfifo
    return res;
    
}
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	08 95       	ret

0000041a <SetReceive>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void SetReceive(void)
{
    SpiStrobe(CC1101_SRX);
 41a:	84 e3       	ldi	r24, 0x34	; 52
 41c:	1f cf       	rjmp	.-450    	; 0x25c <SpiStrobe>

0000041e <ReceiveData>:
 *FUNCTION     :read data received from RXfifo
 *INPUT        :rxBuffer: buffer to store data
 *OUTPUT       :size of data received
 ****************************************************************/
byte ReceiveData(byte *rxBuffer)
{
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	00 d0       	rcall	.+0      	; 0x42a <ReceiveData+0xc>
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	7c 01       	movw	r14, r24
    byte size;
    byte status[2];
    
    if(SpiReadStatus(CC1101_RXBYTES) & BYTES_IN_RXFIFO)
 430:	8b e3       	ldi	r24, 0x3B	; 59
 432:	50 df       	rcall	.-352    	; 0x2d4 <SpiReadStatus>
 434:	18 2f       	mov	r17, r24
 436:	1f 77       	andi	r17, 0x7F	; 127
 438:	69 f0       	breq	.+26     	; 0x454 <ReceiveData+0x36>
    {
        size=SpiReadReg(CC1101_RXFIFO);
 43a:	8f e3       	ldi	r24, 0x3F	; 63
 43c:	16 df       	rcall	.-468    	; 0x26a <SpiReadReg>
 43e:	18 2f       	mov	r17, r24
        SpiReadBurstReg(CC1101_RXFIFO,rxBuffer,size);
 440:	48 2f       	mov	r20, r24
 442:	b7 01       	movw	r22, r14
 444:	8f e3       	ldi	r24, 0x3F	; 63
 446:	1b df       	rcall	.-458    	; 0x27e <SpiReadBurstReg>
        SpiReadBurstReg(CC1101_RXFIFO,status,2);
 448:	42 e0       	ldi	r20, 0x02	; 2
 44a:	be 01       	movw	r22, r28
 44c:	6f 5f       	subi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	8f e3       	ldi	r24, 0x3F	; 63
 452:	15 df       	rcall	.-470    	; 0x27e <SpiReadBurstReg>
        SpiStrobe(CC1101_SFRX);
        return size;
    }
    else
    {
        SpiStrobe(CC1101_SFRX);
 454:	8a e3       	ldi	r24, 0x3A	; 58
 456:	02 df       	rcall	.-508    	; 0x25c <SpiStrobe>
        return 0;
    }
    
 458:	81 2f       	mov	r24, r17
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	08 95       	ret

0000046a <pciSetup>:
        //pciSetup(5);
    }
}
void pciSetup(byte pin)
{
    *digitalPinToPCMSK(pin) |= bit (digitalPinToPCMSKbit(pin));  // enable pin
 46a:	88 30       	cpi	r24, 0x08	; 8
 46c:	38 f0       	brcs	.+14     	; 0x47c <pciSetup+0x12>
 46e:	8e 30       	cpi	r24, 0x0E	; 14
 470:	40 f0       	brcs	.+16     	; 0x482 <pciSetup+0x18>
 472:	86 31       	cpi	r24, 0x16	; 22
 474:	48 f4       	brcc	.+18     	; 0x488 <pciSetup+0x1e>
 476:	ec e6       	ldi	r30, 0x6C	; 108
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	08 c0       	rjmp	.+16     	; 0x48c <pciSetup+0x22>
 47c:	ed e6       	ldi	r30, 0x6D	; 109
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	05 c0       	rjmp	.+10     	; 0x48c <pciSetup+0x22>
 482:	eb e6       	ldi	r30, 0x6B	; 107
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <pciSetup+0x22>
 488:	e0 e0       	ldi	r30, 0x00	; 0
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	90 81       	ld	r25, Z
 48e:	28 2f       	mov	r18, r24
 490:	27 70       	andi	r18, 0x07	; 7
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <pciSetup+0x3a>
 49c:	44 0f       	add	r20, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	66 1f       	adc	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	2a 95       	dec	r18
 4a6:	d2 f7       	brpl	.-12     	; 0x49c <pciSetup+0x32>
 4a8:	49 2b       	or	r20, r25
 4aa:	40 83       	st	Z, r20
    PCIFR  |= bit (digitalPinToPCICRbit(pin)); // clear any outstanding interrupt
 4ac:	2b b3       	in	r18, 0x1b	; 27
 4ae:	88 30       	cpi	r24, 0x08	; 8
 4b0:	30 f0       	brcs	.+12     	; 0x4be <pciSetup+0x54>
 4b2:	80 31       	cpi	r24, 0x10	; 16
 4b4:	30 f0       	brcs	.+12     	; 0x4c2 <pciSetup+0x58>
 4b6:	88 31       	cpi	r24, 0x18	; 24
 4b8:	30 f0       	brcs	.+12     	; 0x4c6 <pciSetup+0x5c>
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <pciSetup+0x5e>
 4be:	92 e0       	ldi	r25, 0x02	; 2
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <pciSetup+0x5e>
 4c2:	98 e0       	ldi	r25, 0x08	; 8
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <pciSetup+0x5e>
 4c6:	94 e0       	ldi	r25, 0x04	; 4
 4c8:	92 2b       	or	r25, r18
 4ca:	9b bb       	out	0x1b, r25	; 27
    PCICR  |= bit (digitalPinToPCICRbit(pin)); // enable interrupt for the group
 4cc:	90 91 68 00 	lds	r25, 0x0068
 4d0:	88 30       	cpi	r24, 0x08	; 8
 4d2:	30 f0       	brcs	.+12     	; 0x4e0 <pciSetup+0x76>
 4d4:	80 31       	cpi	r24, 0x10	; 16
 4d6:	30 f0       	brcs	.+12     	; 0x4e4 <pciSetup+0x7a>
 4d8:	88 31       	cpi	r24, 0x18	; 24
 4da:	30 f0       	brcs	.+12     	; 0x4e8 <pciSetup+0x7e>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <pciSetup+0x80>
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <pciSetup+0x80>
 4e4:	88 e0       	ldi	r24, 0x08	; 8
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <pciSetup+0x80>
 4e8:	84 e0       	ldi	r24, 0x04	; 4
 4ea:	89 2b       	or	r24, r25
 4ec:	80 93 68 00 	sts	0x0068, r24
 4f0:	08 95       	ret

000004f2 <__vector_5>:
}
ISR (PCINT2_vect) // handle pin change interrupt for D0 to D7 here
{
 4f2:	1f 92       	push	r1
 4f4:	0f 92       	push	r0
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	0f 92       	push	r0
 4fa:	11 24       	eor	r1, r1
 4fc:	8f 93       	push	r24
    available = true;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 0d 01 	sts	0x010D, r24
}
 504:	8f 91       	pop	r24
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <main>:
    byte marcstate;
    byte res;
    uint32_t X0,X1,Y0,Y1,Y2;
    uint32_t X_out,Y_out1,Y_out2;
    
    Init();
 510:	51 df       	rcall	.-350    	; 0x3b4 <Init>
    version = SpiReadStatus(CC1101_VERSION);
 512:	81 e3       	ldi	r24, 0x31	; 49
 514:	df de       	rcall	.-578    	; 0x2d4 <SpiReadStatus>
    SetReceive();
 516:	81 df       	rcall	.-254    	; 0x41a <SetReceive>
    TX_buffer[0] = 0x02;//Accerometer
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	80 93 4b 01 	sts	0x014B, r24
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	2a e0       	ldi	r18, 0x0A	; 10
    for(i=1;i<tx_size;i++)
            {
                TX_buffer[i]=i*10;
 522:	e9 2f       	mov	r30, r25
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	e5 5b       	subi	r30, 0xB5	; 181
 528:	fe 4f       	sbci	r31, 0xFE	; 254
 52a:	20 83       	st	Z, r18
    
    Init();
    version = SpiReadStatus(CC1101_VERSION);
    SetReceive();
    TX_buffer[0] = 0x02;//Accerometer
    for(i=1;i<tx_size;i++)
 52c:	9f 5f       	subi	r25, 0xFF	; 255
 52e:	26 5f       	subi	r18, 0xF6	; 246
 530:	9d 33       	cpi	r25, 0x3D	; 61
 532:	b9 f7       	brne	.-18     	; 0x522 <main+0x12>
 534:	90 93 88 01 	sts	0x0188, r25
            {
                TX_buffer[i]=i*10;
            }
        if (!TWIM_Init (100000))
 538:	60 ea       	ldi	r22, 0xA0	; 160
 53a:	76 e8       	ldi	r23, 0x86	; 134
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	8f dd       	rcall	.-1250   	; 0x60 <TWIM_Init>
 542:	88 23       	and	r24, r24
 544:	11 f0       	breq	.+4      	; 0x54a <main+0x3a>
    while (1)
    {
        uint32_t X=0, Y=0,respond;
        uint16_t AcX = 0;
        uint8_t MSBH,MSBL,LSBH,LSBL;
        DDRD = (1<<6);
 546:	c0 e4       	ldi	r28, 0x40	; 64
 548:	22 c0       	rjmp	.+68     	; 0x58e <main+0x7e>
                TX_buffer[i]=i*10;
            }
        if (!TWIM_Init (100000))
        {
    
            while (1);
 54a:	ff cf       	rjmp	.-2      	; 0x54a <main+0x3a>
            TWIM_Write(0xD4);
            TWIM_Write(0x02);//get firmware
            TWIM_Write(0x2A);
            TWIM_Write(0x00);
            PORTD = (1<<6);
            TWIM_Stop();
 54c:	c6 dd       	rcall	.-1140   	; 0xda <TWIM_Stop>
        }
        if (!TWIM_Start (slaveAddress4, TWIM_READ))
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	84 e2       	ldi	r24, 0x24	; 36
 552:	9f dd       	rcall	.-1218   	; 0x92 <TWIM_Start>
 554:	88 23       	and	r24, r24
 556:	49 f0       	breq	.+18     	; 0x56a <main+0x5a>
//            TWIM_ReadAck();
//            TWIM_ReadAck();
//            TWIM_ReadAck();
//            TWIM_ReadAck();
            
            MSBH = TWIM_ReadAck();
 558:	d9 dd       	rcall	.-1102   	; 0x10c <TWIM_ReadAck>
 55a:	d8 2f       	mov	r29, r24
            respond = MSBH;
            respond <<=8;
            MSBL = TWIM_ReadAck();
 55c:	d7 dd       	rcall	.-1106   	; 0x10c <TWIM_ReadAck>
 55e:	18 2f       	mov	r17, r24
            respond|=MSBL;
            respond <<=8;
            LSBH = TWIM_ReadAck();
 560:	d5 dd       	rcall	.-1110   	; 0x10c <TWIM_ReadAck>
 562:	08 2f       	mov	r16, r24
            respond |=LSBH;
            respond <<=8;
            LSBL = TWIM_ReadAck();
 564:	d3 dd       	rcall	.-1114   	; 0x10c <TWIM_ReadAck>
 566:	f8 2e       	mov	r15, r24
            respond |=LSBL;
            //TX_buffer[1] = MSB;
            //TX_buffer[2] = LSB;
            PORTD &= ~(1<<6);
 568:	5e 98       	cbi	0x0b, 6	; 11
            TWIM_Stop();
 56a:	b7 dd       	rcall	.-1170   	; 0xda <TWIM_Stop>
        }

        if (!TWIM_Start (slaveaddress, TWIM_WRITE))
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	84 e0       	ldi	r24, 0x04	; 4
 570:	90 dd       	rcall	.-1248   	; 0x92 <TWIM_Start>
 572:	81 11       	cpse	r24, r1
 574:	26 c0       	rjmp	.+76     	; 0x5c2 <main+0xb2>
        {
            TWIM_Stop ();
 576:	b1 dd       	rcall	.-1182   	; 0xda <TWIM_Stop>
 578:	2f ef       	ldi	r18, 0xFF	; 255
 57a:	8e e9       	ldi	r24, 0x9E	; 158
 57c:	94 e2       	ldi	r25, 0x24	; 36
 57e:	21 50       	subi	r18, 0x01	; 1
 580:	80 40       	sbci	r24, 0x00	; 0
 582:	90 40       	sbci	r25, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <main+0x6e>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x78>
 588:	00 00       	nop
            }
            //TWIM_Write(size);
           TWIM_Stop ();
       }
        _delay_ms(1500);
        SetReceive();
 58a:	47 df       	rcall	.-370    	; 0x41a <SetReceive>
        PORTD &= ~(1<<6);
 58c:	5e 98       	cbi	0x0b, 6	; 11
    while (1)
    {
        uint32_t X=0, Y=0,respond;
        uint16_t AcX = 0;
        uint8_t MSBH,MSBL,LSBH,LSBL;
        DDRD = (1<<6);
 58e:	ca b9       	out	0x0a, r28	; 10
        if(!TWIM_Start(slaveAddress4, TWIM_WRITE))
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	84 e2       	ldi	r24, 0x24	; 36
 594:	7e dd       	rcall	.-1284   	; 0x92 <TWIM_Start>
 596:	88 23       	and	r24, r24
 598:	c9 f2       	breq	.-78     	; 0x54c <main+0x3c>
        {
            TWIM_Stop();
            
        }
        else{
            TWIM_Write(0x00);
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	a6 dd       	rcall	.-1204   	; 0xea <TWIM_Write>
            TWIM_Write(0x00);
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	a4 dd       	rcall	.-1208   	; 0xea <TWIM_Write>
            TWIM_Write(0xFF);
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	a2 dd       	rcall	.-1212   	; 0xea <TWIM_Write>
            TWIM_Write(0x02);
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	a0 dd       	rcall	.-1216   	; 0xea <TWIM_Write>
            TWIM_Write(0xFE);
 5aa:	8e ef       	ldi	r24, 0xFE	; 254
 5ac:	9e dd       	rcall	.-1220   	; 0xea <TWIM_Write>
            
            TWIM_Write(0xD4);
 5ae:	84 ed       	ldi	r24, 0xD4	; 212
 5b0:	9c dd       	rcall	.-1224   	; 0xea <TWIM_Write>
            TWIM_Write(0x02);//get firmware
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	9a dd       	rcall	.-1228   	; 0xea <TWIM_Write>
            TWIM_Write(0x2A);
 5b6:	8a e2       	ldi	r24, 0x2A	; 42
 5b8:	98 dd       	rcall	.-1232   	; 0xea <TWIM_Write>
            TWIM_Write(0x00);
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	96 dd       	rcall	.-1236   	; 0xea <TWIM_Write>
            PORTD = (1<<6);
 5be:	cb b9       	out	0x0b, r28	; 11
 5c0:	c5 cf       	rjmp	.-118    	; 0x54c <main+0x3c>
        {
            TWIM_Stop ();
        }
        else
        {
            marcstate = SpiReadStatus(CC1101_MARCSTATE);
 5c2:	85 e3       	ldi	r24, 0x35	; 53
 5c4:	87 de       	rcall	.-754    	; 0x2d4 <SpiReadStatus>
            if(SpiReadStatus(CC1101_MARCSTATE) != 1){
 5c6:	85 e3       	ldi	r24, 0x35	; 53
 5c8:	85 de       	rcall	.-758    	; 0x2d4 <SpiReadStatus>
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	59 f0       	breq	.+22     	; 0x5e4 <main+0xd4>
                marcstate = SpiReadStatus(CC1101_MARCSTATE);
 5ce:	85 e3       	ldi	r24, 0x35	; 53
 5d0:	81 de       	rcall	.-766    	; 0x2d4 <SpiReadStatus>
 5d2:	2f ef       	ldi	r18, 0xFF	; 255
 5d4:	89 e6       	ldi	r24, 0x69	; 105
 5d6:	98 e1       	ldi	r25, 0x18	; 24
 5d8:	21 50       	subi	r18, 0x01	; 1
 5da:	80 40       	sbci	r24, 0x00	; 0
 5dc:	90 40       	sbci	r25, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <main+0xc8>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <main+0xd2>
 5e2:	00 00       	nop
                _delay_ms(1000);
            }
            size=ReceiveData(RX_buffer);
 5e4:	8e e0       	ldi	r24, 0x0E	; 14
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	1a df       	rcall	.-460    	; 0x41e <ReceiveData>
 5ea:	e8 2e       	mov	r14, r24
            TWIM_Write(MSBH);
 5ec:	8d 2f       	mov	r24, r29
 5ee:	7d dd       	rcall	.-1286   	; 0xea <TWIM_Write>
            TWIM_Write(MSBL);
 5f0:	81 2f       	mov	r24, r17
 5f2:	7b dd       	rcall	.-1290   	; 0xea <TWIM_Write>
            TWIM_Write(LSBH);
 5f4:	80 2f       	mov	r24, r16
 5f6:	79 dd       	rcall	.-1294   	; 0xea <TWIM_Write>
            TWIM_Write(LSBL);
 5f8:	8f 2d       	mov	r24, r15
 5fa:	77 dd       	rcall	.-1298   	; 0xea <TWIM_Write>
            
            if (size>0) {
 5fc:	ee 20       	and	r14, r14
 5fe:	09 f4       	brne	.+2      	; 0x602 <main+0xf2>
 600:	ba cf       	rjmp	.-140    	; 0x576 <main+0x66>
                TWIM_Write(RX_buffer[8]);
 602:	80 91 16 01 	lds	r24, 0x0116
 606:	71 dd       	rcall	.-1310   	; 0xea <TWIM_Write>
                
                if(RX_buffer[0] == 0x02){
 608:	80 91 0e 01 	lds	r24, 0x010E
 60c:	82 30       	cpi	r24, 0x02	; 2
 60e:	09 f0       	breq	.+2      	; 0x612 <main+0x102>
 610:	b2 cf       	rjmp	.-156    	; 0x576 <main+0x66>
                    SpiWriteReg(CC1101_TXFIFO,tx_size);
 612:	6d e3       	ldi	r22, 0x3D	; 61
 614:	8f e3       	ldi	r24, 0x3F	; 63
 616:	e8 dd       	rcall	.-1072   	; 0x1e8 <SpiWriteReg>
                        SpiWriteBurstReg(CC1101_TXFIFO,TX_buffer,tx_size);      //write data to send
 618:	4d e3       	ldi	r20, 0x3D	; 61
 61a:	6b e4       	ldi	r22, 0x4B	; 75
 61c:	71 e0       	ldi	r23, 0x01	; 1
 61e:	8f e3       	ldi	r24, 0x3F	; 63
 620:	f3 dd       	rcall	.-1050   	; 0x208 <SpiWriteBurstReg>
                        SpiStrobe(CC1101_STX);                  //start send
 622:	85 e3       	ldi	r24, 0x35	; 53
 624:	1b de       	rcall	.-970    	; 0x25c <SpiStrobe>
                        //TWIM_Write(SpiReadStatus(CC1101_MARCSTATE));
                        wait_GDO0_high();
 626:	4d 9b       	sbis	0x09, 5	; 9
 628:	fe cf       	rjmp	.-4      	; 0x626 <main+0x116>
                        wait_GDO0_low();
 62a:	4d 99       	sbic	0x09, 5	; 9
 62c:	fe cf       	rjmp	.-4      	; 0x62a <main+0x11a>
                        if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 62e:	8a e3       	ldi	r24, 0x3A	; 58
 630:	51 de       	rcall	.-862    	; 0x2d4 <SpiReadStatus>
                            res = 1;
            
                        //TWIM_Write(res);
                    //PORTD = (1<<6);
                        SpiStrobe(CC1101_SFTX);
 632:	8b e3       	ldi	r24, 0x3B	; 59
 634:	13 de       	rcall	.-986    	; 0x25c <SpiStrobe>
 636:	9f cf       	rjmp	.-194    	; 0x576 <main+0x66>

00000638 <__udivmodsi4>:
 638:	a1 e2       	ldi	r26, 0x21	; 33
 63a:	1a 2e       	mov	r1, r26
 63c:	aa 1b       	sub	r26, r26
 63e:	bb 1b       	sub	r27, r27
 640:	fd 01       	movw	r30, r26
 642:	0d c0       	rjmp	.+26     	; 0x65e <__udivmodsi4_ep>

00000644 <__udivmodsi4_loop>:
 644:	aa 1f       	adc	r26, r26
 646:	bb 1f       	adc	r27, r27
 648:	ee 1f       	adc	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	a2 17       	cp	r26, r18
 64e:	b3 07       	cpc	r27, r19
 650:	e4 07       	cpc	r30, r20
 652:	f5 07       	cpc	r31, r21
 654:	20 f0       	brcs	.+8      	; 0x65e <__udivmodsi4_ep>
 656:	a2 1b       	sub	r26, r18
 658:	b3 0b       	sbc	r27, r19
 65a:	e4 0b       	sbc	r30, r20
 65c:	f5 0b       	sbc	r31, r21

0000065e <__udivmodsi4_ep>:
 65e:	66 1f       	adc	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	88 1f       	adc	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	1a 94       	dec	r1
 668:	69 f7       	brne	.-38     	; 0x644 <__udivmodsi4_loop>
 66a:	60 95       	com	r22
 66c:	70 95       	com	r23
 66e:	80 95       	com	r24
 670:	90 95       	com	r25
 672:	9b 01       	movw	r18, r22
 674:	ac 01       	movw	r20, r24
 676:	bd 01       	movw	r22, r26
 678:	cf 01       	movw	r24, r30
 67a:	08 95       	ret

0000067c <_exit>:
 67c:	f8 94       	cli

0000067e <__stop_program>:
 67e:	ff cf       	rjmp	.-2      	; 0x67e <__stop_program>
