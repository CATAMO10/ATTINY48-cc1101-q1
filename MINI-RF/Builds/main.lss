
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000cc8  00000d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  00800108  00800108  00000d64  2**0
                  ALLOC
  3 .stab         00002b5c  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016d9  00000000  00000000  000038c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004f99  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000576  00000000  00000000  00004faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052b  00000000  00000000  00005520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00005a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d9  00000000  00000000  00005a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
   2:	5e c0       	rjmp	.+188    	; 0xc0 <__bad_interrupt>
   4:	5d c0       	rjmp	.+186    	; 0xc0 <__bad_interrupt>
   6:	5c c0       	rjmp	.+184    	; 0xc0 <__bad_interrupt>
   8:	5b c0       	rjmp	.+182    	; 0xc0 <__bad_interrupt>
   a:	ff c3       	rjmp	.+2046   	; 0x80a <__vector_5>
   c:	59 c0       	rjmp	.+178    	; 0xc0 <__bad_interrupt>
   e:	58 c0       	rjmp	.+176    	; 0xc0 <__bad_interrupt>
  10:	57 c0       	rjmp	.+174    	; 0xc0 <__bad_interrupt>
  12:	56 c0       	rjmp	.+172    	; 0xc0 <__bad_interrupt>
  14:	55 c0       	rjmp	.+170    	; 0xc0 <__bad_interrupt>
  16:	54 c0       	rjmp	.+168    	; 0xc0 <__bad_interrupt>
  18:	53 c0       	rjmp	.+166    	; 0xc0 <__bad_interrupt>
  1a:	52 c0       	rjmp	.+164    	; 0xc0 <__bad_interrupt>
  1c:	51 c0       	rjmp	.+162    	; 0xc0 <__bad_interrupt>
  1e:	50 c0       	rjmp	.+160    	; 0xc0 <__bad_interrupt>
  20:	4f c0       	rjmp	.+158    	; 0xc0 <__bad_interrupt>
  22:	4e c0       	rjmp	.+156    	; 0xc0 <__bad_interrupt>
  24:	4d c0       	rjmp	.+154    	; 0xc0 <__bad_interrupt>
  26:	4c c0       	rjmp	.+152    	; 0xc0 <__bad_interrupt>
  28:	7d c2       	rjmp	.+1274   	; 0x524 <Enable_Pcinterrupt+0x30>
  2a:	80 c2       	rjmp	.+1280   	; 0x52c <Enable_Pcinterrupt+0x38>
  2c:	81 c2       	rjmp	.+1282   	; 0x530 <Enable_Pcinterrupt+0x3c>
  2e:	82 c2       	rjmp	.+1284   	; 0x534 <Enable_Pcinterrupt+0x40>
  30:	83 c2       	rjmp	.+1286   	; 0x538 <Enable_Pcinterrupt+0x44>
  32:	84 c2       	rjmp	.+1288   	; 0x53c <Enable_Pcinterrupt+0x48>
  34:	85 c2       	rjmp	.+1290   	; 0x540 <Enable_Pcinterrupt+0x4c>
  36:	9f c2       	rjmp	.+1342   	; 0x576 <Enable_Pcinterrupt+0x82>
  38:	a0 c2       	rjmp	.+1344   	; 0x57a <Enable_Pcinterrupt+0x86>
  3a:	a1 c2       	rjmp	.+1346   	; 0x57e <Enable_Pcinterrupt+0x8a>
  3c:	a2 c2       	rjmp	.+1348   	; 0x582 <Enable_Pcinterrupt+0x8e>
  3e:	a3 c2       	rjmp	.+1350   	; 0x586 <Enable_Pcinterrupt+0x92>
  40:	a4 c2       	rjmp	.+1352   	; 0x58a <Enable_Pcinterrupt+0x96>
  42:	a5 c2       	rjmp	.+1354   	; 0x58e <Enable_Pcinterrupt+0x9a>
  44:	c1 c2       	rjmp	.+1410   	; 0x5c8 <Enable_Pcinterrupt+0xd4>
  46:	c2 c2       	rjmp	.+1412   	; 0x5cc <Enable_Pcinterrupt+0xd8>
  48:	c3 c2       	rjmp	.+1414   	; 0x5d0 <Enable_Pcinterrupt+0xdc>
  4a:	c4 c2       	rjmp	.+1416   	; 0x5d4 <Enable_Pcinterrupt+0xe0>
  4c:	c5 c2       	rjmp	.+1418   	; 0x5d8 <Enable_Pcinterrupt+0xe4>
  4e:	c6 c2       	rjmp	.+1420   	; 0x5dc <Enable_Pcinterrupt+0xe8>
  50:	c7 c2       	rjmp	.+1422   	; 0x5e0 <Enable_Pcinterrupt+0xec>
  52:	fe c2       	rjmp	.+1532   	; 0x650 <Disable_Pcinterrupt+0x12>
  54:	01 c3       	rjmp	.+1538   	; 0x658 <Disable_Pcinterrupt+0x1a>
  56:	06 c3       	rjmp	.+1548   	; 0x664 <Disable_Pcinterrupt+0x26>
  58:	09 c3       	rjmp	.+1554   	; 0x66c <Disable_Pcinterrupt+0x2e>
  5a:	0c c3       	rjmp	.+1560   	; 0x674 <Disable_Pcinterrupt+0x36>
  5c:	0f c3       	rjmp	.+1566   	; 0x67c <Disable_Pcinterrupt+0x3e>
  5e:	12 c3       	rjmp	.+1572   	; 0x684 <Disable_Pcinterrupt+0x46>
  60:	15 c3       	rjmp	.+1578   	; 0x68c <Disable_Pcinterrupt+0x4e>
  62:	18 c3       	rjmp	.+1584   	; 0x694 <Disable_Pcinterrupt+0x56>
  64:	1b c3       	rjmp	.+1590   	; 0x69c <Disable_Pcinterrupt+0x5e>
  66:	1e c3       	rjmp	.+1596   	; 0x6a4 <Disable_Pcinterrupt+0x66>
  68:	21 c3       	rjmp	.+1602   	; 0x6ac <Disable_Pcinterrupt+0x6e>
  6a:	24 c3       	rjmp	.+1608   	; 0x6b4 <Disable_Pcinterrupt+0x76>
  6c:	27 c3       	rjmp	.+1614   	; 0x6bc <Disable_Pcinterrupt+0x7e>
  6e:	2a c3       	rjmp	.+1620   	; 0x6c4 <Disable_Pcinterrupt+0x86>
  70:	2d c3       	rjmp	.+1626   	; 0x6cc <Disable_Pcinterrupt+0x8e>
  72:	32 c3       	rjmp	.+1636   	; 0x6d8 <Disable_Pcinterrupt+0x9a>
  74:	35 c3       	rjmp	.+1642   	; 0x6e0 <Disable_Pcinterrupt+0xa2>
  76:	38 c3       	rjmp	.+1648   	; 0x6e8 <Disable_Pcinterrupt+0xaa>
  78:	3b c3       	rjmp	.+1654   	; 0x6f0 <Disable_Pcinterrupt+0xb2>
  7a:	3e c3       	rjmp	.+1660   	; 0x6f8 <Disable_Pcinterrupt+0xba>
  7c:	41 c3       	rjmp	.+1666   	; 0x700 <Disable_Pcinterrupt+0xc2>
  7e:	44 c3       	rjmp	.+1672   	; 0x708 <Disable_Pcinterrupt+0xca>
  80:	47 c3       	rjmp	.+1678   	; 0x710 <Disable_Pcinterrupt+0xd2>
  82:	4c c3       	rjmp	.+1688   	; 0x71c <Disable_Pcinterrupt+0xde>
  84:	4f c3       	rjmp	.+1694   	; 0x724 <Disable_Pcinterrupt+0xe6>
  86:	52 c3       	rjmp	.+1700   	; 0x72c <Disable_Pcinterrupt+0xee>
  88:	55 c3       	rjmp	.+1706   	; 0x734 <Disable_Pcinterrupt+0xf6>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d1 e0       	ldi	r29, 0x01	; 1
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	e8 ec       	ldi	r30, 0xC8	; 200
  9e:	fc e0       	ldi	r31, 0x0C	; 12
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a8 30       	cpi	r26, 0x08	; 8
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	11 e0       	ldi	r17, 0x01	; 1
  ae:	a8 e0       	ldi	r26, 0x08	; 8
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a4 38       	cpi	r26, 0x84	; 132
  b8:	b1 07       	cpc	r27, r17
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	b5 d3       	rcall	.+1898   	; 0x828 <main>
  be:	02 c6       	rjmp	.+3076   	; 0xcc4 <_exit>

000000c0 <__bad_interrupt>:
  c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <TWIM_Init>:
 - FALSE:	Bitrate too high
 - TRUE:		Bitrate OK
 
 *******************************************************/
uint8_t TWIM_Init (uint32_t TWI_Bitrate)
{
  c2:	9b 01       	movw	r18, r22
  c4:	ac 01       	movw	r20, r24
    /*
     ** Set TWI bitrate
     ** If bitrate is too high, then error return
     */
    TWBR = ((F_CPU/TWI_Bitrate)-16)/2;
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	72 e1       	ldi	r23, 0x12	; 18
  ca:	8a e7       	ldi	r24, 0x7A	; 122
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	d8 d5       	rcall	.+2992   	; 0xc80 <__udivmodsi4>
  d0:	da 01       	movw	r26, r20
  d2:	c9 01       	movw	r24, r18
  d4:	40 97       	sbiw	r24, 0x10	; 16
  d6:	a1 09       	sbc	r26, r1
  d8:	b1 09       	sbc	r27, r1
  da:	b6 95       	lsr	r27
  dc:	a7 95       	ror	r26
  de:	97 95       	ror	r25
  e0:	87 95       	ror	r24
  e2:	80 93 b8 00 	sts	0x00B8, r24
    if (TWBR < 11) return FALSE;
  e6:	90 91 b8 00 	lds	r25, 0x00B8
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	9b 30       	cpi	r25, 0x0B	; 11
  ee:	08 f4       	brcc	.+2      	; 0xf2 <TWIM_Init+0x30>
  f0:	80 e0       	ldi	r24, 0x00	; 0
    
    return TRUE;
}
  f2:	08 95       	ret

000000f4 <TWIM_Start>:
{
    uint8_t		twst;
    /*
     ** Send START condition
     */
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  f4:	94 ea       	ldi	r25, 0xA4	; 164
  f6:	90 93 bc 00 	sts	0x00BC, r25
    /*
     ** Wait until transmission completed
     */
    while (!(TWCR & (1<<TWINT)));
  fa:	90 91 bc 00 	lds	r25, 0x00BC
  fe:	97 ff       	sbrs	r25, 7
 100:	fc cf       	rjmp	.-8      	; 0xfa <TWIM_Start+0x6>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits.
     */
    twst = TWSR & 0xF8;
 102:	90 91 b9 00 	lds	r25, 0x00B9
 106:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst != TWI_START) && (twst != TWI_REP_START)) return FALSE;
 108:	98 30       	cpi	r25, 0x08	; 8
 10a:	21 f0       	breq	.+8      	; 0x114 <TWIM_Start+0x20>
 10c:	90 31       	cpi	r25, 0x10	; 16
 10e:	11 f0       	breq	.+4      	; 0x114 <TWIM_Start+0x20>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
    /*
     ** Send device address
     */
    TWDR = (Address<<1) + TWIM_Type;
 114:	88 0f       	add	r24, r24
 116:	68 0f       	add	r22, r24
 118:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWINT)|(1<<TWEN);
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until transmission completed and ACK/NACK has been received
     */
    while (!(TWCR & (1<<TWINT)));
 122:	80 91 bc 00 	lds	r24, 0x00BC
 126:	87 ff       	sbrs	r24, 7
 128:	fc cf       	rjmp	.-8      	; 0x122 <TWIM_Start+0x2e>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits.
     */
    twst = TWSR & 0xF8;
 12a:	80 91 b9 00 	lds	r24, 0x00B9
 12e:	88 7f       	andi	r24, 0xF8	; 248
    if ((twst != TWI_MTX_ADR_ACK) && (twst != TWI_MRX_ADR_ACK)) return FALSE;
 130:	88 31       	cpi	r24, 0x18	; 24
 132:	11 f0       	breq	.+4      	; 0x138 <TWIM_Start+0x44>
 134:	80 34       	cpi	r24, 0x40	; 64
 136:	61 f7       	brne	.-40     	; 0x110 <TWIM_Start+0x1c>
    
    return TRUE;
 138:	81 e0       	ldi	r24, 0x01	; 1
}
 13a:	08 95       	ret

0000013c <TWIM_Stop>:
void TWIM_Stop (void)
{
    /*
     ** Send stop condition
     */
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 13c:	84 e9       	ldi	r24, 0x94	; 148
 13e:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until stop condition is executed and bus released
     */
    while (TWCR & (1<<TWINT));
 142:	80 91 bc 00 	lds	r24, 0x00BC
 146:	87 fd       	sbrc	r24, 7
 148:	fc cf       	rjmp	.-8      	; 0x142 <TWIM_Stop+0x6>
}
 14a:	08 95       	ret

0000014c <TWIM_Write>:
{
    uint8_t   twst;
    /*
     ** Send data to the previously addressed device
     */
    TWDR = byte;
 14c:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until transmission completed
     */
    while (!(TWCR & (1<<TWINT)));
 156:	80 91 bc 00 	lds	r24, 0x00BC
 15a:	87 ff       	sbrs	r24, 7
 15c:	fc cf       	rjmp	.-8      	; 0x156 <TWIM_Write+0xa>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits
     */
    twst = TWSR & 0xF8;
 15e:	90 91 b9 00 	lds	r25, 0x00B9
 162:	98 7f       	andi	r25, 0xF8	; 248
    if (twst != TWI_MTX_DATA_ACK) return 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	98 32       	cpi	r25, 0x28	; 40
 168:	09 f4       	brne	.+2      	; 0x16c <TWIM_Write+0x20>
 16a:	80 e0       	ldi	r24, 0x00	; 0
    
    return 0;
}
 16c:	08 95       	ret

0000016e <TWIM_ReadAck>:
 - uint8_t	Read byte
 
 *******************************************************/
uint8_t TWIM_ReadAck (void)
{
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 16e:	84 ec       	ldi	r24, 0xC4	; 196
 170:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 174:	80 91 bc 00 	lds	r24, 0x00BC
 178:	87 ff       	sbrs	r24, 7
 17a:	fc cf       	rjmp	.-8      	; 0x174 <TWIM_ReadAck+0x6>
    
    return TWDR;
 17c:	80 91 bb 00 	lds	r24, 0x00BB
}
 180:	08 95       	ret

00000182 <TWIM_ReadNack>:
 - uint8_t	Read byte
 
 *******************************************************/
uint8_t TWIM_ReadNack (void)
{
    TWCR = (1<<TWINT)|(1<<TWEN);
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT)));
 188:	80 91 bc 00 	lds	r24, 0x00BC
 18c:	87 ff       	sbrs	r24, 7
 18e:	fc cf       	rjmp	.-8      	; 0x188 <TWIM_ReadNack+0x6>
    
    return TWDR;
 190:	80 91 bb 00 	lds	r24, 0x00BB
}
 194:	08 95       	ret

00000196 <SpiInit>:
 ****************************************************************/
void SpiInit(void)
{
    
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	85 b9       	out	0x05, r24	; 5
    // Configure SPI pins
    DDRB = (1<<DDB3) | (1<<DDB5) | (1<<DDB2);
 19a:	8c e2       	ldi	r24, 0x2C	; 44
 19c:	84 b9       	out	0x04, r24	; 4
    // pinMode(SS_PIN, OUTPUT);
    // pinMode(MOSI_PIN, OUTPUT);
    // pinMode(MISO_PIN, INPUT);
    // pinMode(SCK_PIN, OUTPUT);
    PORTB = (1<<PB5);
 19e:	80 e2       	ldi	r24, 0x20	; 32
 1a0:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1<<PB4);
 1a2:	2c 98       	cbi	0x05, 4	; 5
    // digitalWrite(SCK_PIN, HIGH);
    // digitalWrite(MOSI_PIN, LOW);
    
    // SPI speed = clk/4
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPI2X);
 1a4:	81 e5       	ldi	r24, 0x51	; 81
 1a6:	8c bd       	out	0x2c, r24	; 44
 1a8:	08 95       	ret

000001aa <SpiTransfer>:
 *INPUT        :value: data to send
 *OUTPUT       :data to receive
 ****************************************************************/
byte SpiTransfer(byte value)
{
    SPDR = value;
 1aa:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF))) ;
 1ac:	0d b4       	in	r0, 0x2d	; 45
 1ae:	07 fe       	sbrs	r0, 7
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <SpiTransfer+0x2>
    return SPDR;
 1b2:	8e b5       	in	r24, 0x2e	; 46
}
 1b4:	08 95       	ret

000001b6 <GDO_Set>:
 ****************************************************************/
void GDO_Set (void)
{
    // pinMode(GDO0, INPUT);
    // pinMode(GDO2, INPUT);
    DDRD &= ~(1<<DDD2);
 1b6:	52 98       	cbi	0x0a, 2	; 10
 1b8:	08 95       	ret

000001ba <Reset>:
 *OUTPUT       :none
 ****************************************************************/
void Reset (void)
{
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 1ba:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f ec       	ldi	r24, 0xCF	; 207
 1be:	97 e0       	ldi	r25, 0x07	; 7
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <Reset+0x6>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <Reset+0xc>
 1c6:	00 00       	nop
    _delay_ms(1);
    //digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<PB2);
 1c8:	2a 9a       	sbi	0x05, 2	; 5
 1ca:	8f ec       	ldi	r24, 0xCF	; 207
 1cc:	97 e0       	ldi	r25, 0x07	; 7
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <Reset+0x14>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <Reset+0x1a>
 1d4:	00 00       	nop
    _delay_ms(1);
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 1d6:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 1d8:	1c 99       	sbic	0x03, 4	; 3
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <Reset+0x1e>
    SpiTransfer(CC1101_SRES);
 1dc:	80 e3       	ldi	r24, 0x30	; 48
 1de:	e5 df       	rcall	.-54     	; 0x1aa <SpiTransfer>
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 1e0:	1c 99       	sbic	0x03, 4	; 3
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <Reset+0x26>
    //digitalWrite(SS_PIN, HIGH);]
    PORTB = (1<<PB2);
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	85 b9       	out	0x05, r24	; 5
 1e8:	08 95       	ret

000001ea <SpiWriteReg>:
 *FUNCTION     :CC1101 write data to register
 *INPUT        :addr: register address; value: register value
 *OUTPUT       :none
 ****************************************************************/
void SpiWriteReg(byte addr, byte value)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	1f 92       	push	r1
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 1f4:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 1f6:	1c 99       	sbic	0x03, 4	; 3
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <SpiWriteReg+0xc>
    SpiTransfer(addr);
 1fa:	69 83       	std	Y+1, r22	; 0x01
 1fc:	d6 df       	rcall	.-84     	; 0x1aa <SpiTransfer>
    SpiTransfer(value);
 1fe:	69 81       	ldd	r22, Y+1	; 0x01
 200:	86 2f       	mov	r24, r22
    //digitalWrite(SS_PIN, HIGH);
}
 202:	0f 90       	pop	r0
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
    //while(digitalRead(MISO_PIN));
    wait_Miso();
    SpiTransfer(addr);
    SpiTransfer(value);
 208:	d0 cf       	rjmp	.-96     	; 0x1aa <SpiTransfer>

0000020a <SpiWriteBurstReg>:
 *FUNCTION     :CC1101 write burst data to register
 *INPUT        :addr: register address; buffer:register value array; num:number to write
 *OUTPUT       :none
 ****************************************************************/
void SpiWriteBurstReg(byte addr, byte *buffer, byte num)
{
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <SpiWriteBurstReg+0xe>
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	14 2f       	mov	r17, r20
    byte i, temp;
    
    temp = addr | WRITE_BURST;
 21e:	80 64       	ori	r24, 0x40	; 64
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 220:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 222:	1c 99       	sbic	0x03, 4	; 3
 224:	fe cf       	rjmp	.-4      	; 0x222 <SpiWriteBurstReg+0x18>
    SpiTransfer(temp);
 226:	69 83       	std	Y+1, r22	; 0x01
 228:	7a 83       	std	Y+2, r23	; 0x02
 22a:	bf df       	rcall	.-130    	; 0x1aa <SpiTransfer>
 22c:	69 81       	ldd	r22, Y+1	; 0x01
 22e:	06 2f       	mov	r16, r22
    for (i = 0; i < num; i++)
 230:	e6 2e       	mov	r14, r22
 232:	7a 81       	ldd	r23, Y+2	; 0x02
 234:	f7 2e       	mov	r15, r23
 236:	8e 2d       	mov	r24, r14
 238:	80 1b       	sub	r24, r16
 23a:	81 17       	cp	r24, r17
 23c:	28 f4       	brcc	.+10     	; 0x248 <SpiWriteBurstReg+0x3e>
    {
        SpiTransfer(buffer[i]);
 23e:	f7 01       	movw	r30, r14
 240:	81 91       	ld	r24, Z+
 242:	7f 01       	movw	r14, r30
 244:	b2 df       	rcall	.-156    	; 0x1aa <SpiTransfer>
 246:	f7 cf       	rjmp	.-18     	; 0x236 <SpiWriteBurstReg+0x2c>
    }
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	85 b9       	out	0x05, r24	; 5
}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	08 95       	ret

0000025e <SpiStrobe>:
 *OUTPUT       :none
 ****************************************************************/
void SpiStrobe(byte strobe)
{
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 25e:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 260:	1c 99       	sbic	0x03, 4	; 3
 262:	fe cf       	rjmp	.-4      	; 0x260 <SpiStrobe+0x2>
    SpiTransfer(strobe);
 264:	a2 df       	rcall	.-188    	; 0x1aa <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	85 b9       	out	0x05, r24	; 5
 26a:	08 95       	ret

0000026c <SpiReadReg>:
 ****************************************************************/
byte SpiReadReg(byte addr)
{
    byte temp, value;
    
    temp = addr|READ_SINGLE;
 26c:	80 68       	ori	r24, 0x80	; 128
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 26e:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 270:	1c 99       	sbic	0x03, 4	; 3
 272:	fe cf       	rjmp	.-4      	; 0x270 <SpiReadReg+0x4>
    SpiTransfer(temp);
 274:	9a df       	rcall	.-204    	; 0x1aa <SpiTransfer>
    value=SpiTransfer(0);
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	98 df       	rcall	.-208    	; 0x1aa <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 27a:	94 e0       	ldi	r25, 0x04	; 4
 27c:	95 b9       	out	0x05, r25	; 5
    return value;
}
 27e:	08 95       	ret

00000280 <SpiReadBurstReg>:
 *FUNCTION     :CC1101 read burst data from register
 *INPUT        :addr: register address; buffer:array to store register value; num: number to read
 *OUTPUT       :none
 ****************************************************************/
void SpiReadBurstReg(byte addr, byte *buffer, byte num)
{
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 d0       	rcall	.+0      	; 0x28e <SpiReadBurstReg+0xe>
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	14 2f       	mov	r17, r20
    byte i,temp;
    
    temp = addr | READ_BURST;
 294:	80 6c       	ori	r24, 0xC0	; 192
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 296:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 298:	1c 99       	sbic	0x03, 4	; 3
 29a:	fe cf       	rjmp	.-4      	; 0x298 <SpiReadBurstReg+0x18>
    SpiTransfer(temp);
 29c:	69 83       	std	Y+1, r22	; 0x01
 29e:	7a 83       	std	Y+2, r23	; 0x02
 2a0:	84 df       	rcall	.-248    	; 0x1aa <SpiTransfer>
 2a2:	69 81       	ldd	r22, Y+1	; 0x01
 2a4:	06 2f       	mov	r16, r22
    for(i=0;i<num;i++)
 2a6:	e6 2e       	mov	r14, r22
 2a8:	7a 81       	ldd	r23, Y+2	; 0x02
 2aa:	f7 2e       	mov	r15, r23
 2ac:	8e 2d       	mov	r24, r14
 2ae:	80 1b       	sub	r24, r16
 2b0:	81 17       	cp	r24, r17
 2b2:	30 f4       	brcc	.+12     	; 0x2c0 <SpiReadBurstReg+0x40>
    {
        buffer[i]=SpiTransfer(0);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	79 df       	rcall	.-270    	; 0x1aa <SpiTransfer>
 2b8:	f7 01       	movw	r30, r14
 2ba:	81 93       	st	Z+, r24
 2bc:	7f 01       	movw	r14, r30
 2be:	f6 cf       	rjmp	.-20     	; 0x2ac <SpiReadBurstReg+0x2c>
    }
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	85 b9       	out	0x05, r24	; 5
}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	08 95       	ret

000002d6 <SpiReadStatus>:
 ****************************************************************/
byte SpiReadStatus(byte addr)
{
    byte value,temp;
    
    temp = addr | READ_BURST;
 2d6:	80 6c       	ori	r24, 0xC0	; 192
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 2d8:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 2da:	1c 99       	sbic	0x03, 4	; 3
 2dc:	fe cf       	rjmp	.-4      	; 0x2da <SpiReadStatus+0x4>
    SpiTransfer(temp);
 2de:	65 df       	rcall	.-310    	; 0x1aa <SpiTransfer>
    value=SpiTransfer(0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	63 df       	rcall	.-314    	; 0x1aa <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 2e4:	94 e0       	ldi	r25, 0x04	; 4
 2e6:	95 b9       	out	0x05, r25	; 5
    return value;
}
 2e8:	08 95       	ret

000002ea <RegConfigSettings>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void RegConfigSettings(void)
{
    SpiWriteReg(CC1101_FSCTRL1,  0x08);
 2ea:	68 e0       	ldi	r22, 0x08	; 8
 2ec:	8b e0       	ldi	r24, 0x0B	; 11
 2ee:	7d df       	rcall	.-262    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FSCTRL0,  0x00);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	8c e0       	ldi	r24, 0x0C	; 12
 2f4:	7a df       	rcall	.-268    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ2,    0x10);
 2f6:	60 e1       	ldi	r22, 0x10	; 16
 2f8:	8d e0       	ldi	r24, 0x0D	; 13
 2fa:	77 df       	rcall	.-274    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ1,    0xA7);
 2fc:	67 ea       	ldi	r22, 0xA7	; 167
 2fe:	8e e0       	ldi	r24, 0x0E	; 14
 300:	74 df       	rcall	.-280    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ0,    0x62);
 302:	62 e6       	ldi	r22, 0x62	; 98
 304:	8f e0       	ldi	r24, 0x0F	; 15
 306:	71 df       	rcall	.-286    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG4,  0x5B);
 308:	6b e5       	ldi	r22, 0x5B	; 91
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	6e df       	rcall	.-292    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG3,  0xF8);
 30e:	68 ef       	ldi	r22, 0xF8	; 248
 310:	81 e1       	ldi	r24, 0x11	; 17
 312:	6b df       	rcall	.-298    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG2,  0x03);
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	82 e1       	ldi	r24, 0x12	; 18
 318:	68 df       	rcall	.-304    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG1,  0x22);
 31a:	62 e2       	ldi	r22, 0x22	; 34
 31c:	83 e1       	ldi	r24, 0x13	; 19
 31e:	65 df       	rcall	.-310    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG0,  0xF8);
 320:	68 ef       	ldi	r22, 0xF8	; 248
 322:	84 e1       	ldi	r24, 0x14	; 20
 324:	62 df       	rcall	.-316    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_CHANNR,   0x00);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	8a e0       	ldi	r24, 0x0A	; 10
 32a:	5f df       	rcall	.-322    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_DEVIATN,  0x47);
 32c:	67 e4       	ldi	r22, 0x47	; 71
 32e:	85 e1       	ldi	r24, 0x15	; 21
 330:	5c df       	rcall	.-328    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FREND1,   0xB6);
 332:	66 eb       	ldi	r22, 0xB6	; 182
 334:	81 e2       	ldi	r24, 0x21	; 33
 336:	59 df       	rcall	.-334    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FREND0,   0x10);
 338:	60 e1       	ldi	r22, 0x10	; 16
 33a:	82 e2       	ldi	r24, 0x22	; 34
 33c:	56 df       	rcall	.-340    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_MCSM0 ,   0x18);
 33e:	68 e1       	ldi	r22, 0x18	; 24
 340:	88 e1       	ldi	r24, 0x18	; 24
 342:	53 df       	rcall	.-346    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FOCCFG,   0x1D);
 344:	6d e1       	ldi	r22, 0x1D	; 29
 346:	89 e1       	ldi	r24, 0x19	; 25
 348:	50 df       	rcall	.-352    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_BSCFG,    0x1C);
 34a:	6c e1       	ldi	r22, 0x1C	; 28
 34c:	8a e1       	ldi	r24, 0x1A	; 26
 34e:	4d df       	rcall	.-358    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL2, 0xC7);
 350:	67 ec       	ldi	r22, 0xC7	; 199
 352:	8b e1       	ldi	r24, 0x1B	; 27
 354:	4a df       	rcall	.-364    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL1, 0x00);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	8c e1       	ldi	r24, 0x1C	; 28
 35a:	47 df       	rcall	.-370    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL0, 0xB2);
 35c:	62 eb       	ldi	r22, 0xB2	; 178
 35e:	8d e1       	ldi	r24, 0x1D	; 29
 360:	44 df       	rcall	.-376    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL3,   0xEA);
 362:	6a ee       	ldi	r22, 0xEA	; 234
 364:	83 e2       	ldi	r24, 0x23	; 35
 366:	41 df       	rcall	.-382    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL2,   0x2A);
 368:	6a e2       	ldi	r22, 0x2A	; 42
 36a:	84 e2       	ldi	r24, 0x24	; 36
 36c:	3e df       	rcall	.-388    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL1,   0x00);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	85 e2       	ldi	r24, 0x25	; 37
 372:	3b df       	rcall	.-394    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL0,   0x11);
 374:	61 e1       	ldi	r22, 0x11	; 17
 376:	86 e2       	ldi	r24, 0x26	; 38
 378:	38 df       	rcall	.-400    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_FSTEST,   0x59);
 37a:	69 e5       	ldi	r22, 0x59	; 89
 37c:	89 e2       	ldi	r24, 0x29	; 41
 37e:	35 df       	rcall	.-406    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_TEST2,    0x81);
 380:	61 e8       	ldi	r22, 0x81	; 129
 382:	8c e2       	ldi	r24, 0x2C	; 44
 384:	32 df       	rcall	.-412    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_TEST1,    0x35);
 386:	65 e3       	ldi	r22, 0x35	; 53
 388:	8d e2       	ldi	r24, 0x2D	; 45
 38a:	2f df       	rcall	.-418    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_TEST0,    0x09);
 38c:	69 e0       	ldi	r22, 0x09	; 9
 38e:	8e e2       	ldi	r24, 0x2E	; 46
 390:	2c df       	rcall	.-424    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_IOCFG2,   0x0B);     //serial clock.synchronous to the data in synchronous serial mode
 392:	6b e0       	ldi	r22, 0x0B	; 11
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	29 df       	rcall	.-430    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_IOCFG0,   0x06);     //asserts when sync word has been sent/received, and de-asserts at the end of the packet
 398:	66 e0       	ldi	r22, 0x06	; 6
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	26 df       	rcall	.-436    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_PKTCTRL1, 0x04);     //two status bytes will be appended to the payload of the packet,including RSSI LQI and CRC OK
 39e:	64 e0       	ldi	r22, 0x04	; 4
 3a0:	87 e0       	ldi	r24, 0x07	; 7
 3a2:	23 df       	rcall	.-442    	; 0x1ea <SpiWriteReg>
    //No address check
    SpiWriteReg(CC1101_PKTCTRL0, 0x05);     //whitening off;CRC Enable£»variable length packets, packet length configured by the first byte after sync word
 3a4:	65 e0       	ldi	r22, 0x05	; 5
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	20 df       	rcall	.-448    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_ADDR,     0x00);     //address used for packet filtration.
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	89 e0       	ldi	r24, 0x09	; 9
 3ae:	1d df       	rcall	.-454    	; 0x1ea <SpiWriteReg>
    SpiWriteReg(CC1101_PKTLEN,   0x3D);     //61 bytes max length
 3b0:	6d e3       	ldi	r22, 0x3D	; 61
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	1a cf       	rjmp	.-460    	; 0x1ea <SpiWriteReg>

000003b6 <Init>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void Init(void)
{
    SpiInit();                                      //spi initialization
 3b6:	ef de       	rcall	.-546    	; 0x196 <SpiInit>
    GDO_Set();                                     //GDO set
 3b8:	fe de       	rcall	.-516    	; 0x1b6 <GDO_Set>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	85 b9       	out	0x05, r24	; 5
    //digitalWrite(SCK_PIN, HIGH);
    PORTB = (1<<PB5);
 3be:	80 e2       	ldi	r24, 0x20	; 32
 3c0:	85 b9       	out	0x05, r24	; 5
    //digitalWrite(MOSI_PIN, LOW);
    PORTB &= ~(1<<PB3);
 3c2:	2b 98       	cbi	0x05, 3	; 5
    Reset();                                       //CC1101 reset
 3c4:	fa de       	rcall	.-524    	; 0x1ba <Reset>
    RegConfigSettings();                           //CC1101 register config
 3c6:	91 df       	rcall	.-222    	; 0x2ea <RegConfigSettings>
    SpiWriteBurstReg(CC1101_PATABLE,PaTabel,8);        //CC1101 PATABLE config
 3c8:	48 e0       	ldi	r20, 0x08	; 8
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	71 e0       	ldi	r23, 0x01	; 1
 3ce:	8e e3       	ldi	r24, 0x3E	; 62
 3d0:	1c cf       	rjmp	.-456    	; 0x20a <SpiWriteBurstReg>

000003d2 <SendData>:
 *FUNCTION     :use CC1101 send data
 *INPUT        :txBuffer: data array to send; size: number of data to send, no more than 61
 *OUTPUT       :none
 ****************************************************************/
byte SendData(byte *txBuffer,byte size)
{
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	1f 92       	push	r1
 3dc:	cd b7       	in	r28, 0x3d	; 61
 3de:	de b7       	in	r29, 0x3e	; 62
 3e0:	8c 01       	movw	r16, r24
 3e2:	46 2f       	mov	r20, r22
    byte res = 0x00;
    SpiWriteReg(CC1101_TXFIFO,size);
 3e4:	8f e3       	ldi	r24, 0x3F	; 63
 3e6:	49 83       	std	Y+1, r20	; 0x01
 3e8:	00 df       	rcall	.-512    	; 0x1ea <SpiWriteReg>
    SpiWriteBurstReg(CC1101_TXFIFO,txBuffer,size);          //write data to send
 3ea:	49 81       	ldd	r20, Y+1	; 0x01
 3ec:	b8 01       	movw	r22, r16
 3ee:	8f e3       	ldi	r24, 0x3F	; 63
 3f0:	0c df       	rcall	.-488    	; 0x20a <SpiWriteBurstReg>
    SpiStrobe(CC1101_STX);                                  //start send
 3f2:	85 e3       	ldi	r24, 0x35	; 53
 3f4:	34 df       	rcall	.-408    	; 0x25e <SpiStrobe>
    //while (!digitalRead(GDO0));                             // Wait for GDO0 to be set -> sync transmitted
    //while (digitalRead(GDO0));                              // Wait for GDO0 to be cleared -> end of packet
    wait_GDO0_high();
 3f6:	4d 9b       	sbis	0x09, 5	; 9
 3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <SendData+0x24>
    wait_GDO0_low();
 3fa:	4d 99       	sbic	0x09, 5	; 9
 3fc:	fe cf       	rjmp	.-4      	; 0x3fa <SendData+0x28>
    if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 3fe:	8a e3       	ldi	r24, 0x3A	; 58
 400:	6a df       	rcall	.-300    	; 0x2d6 <SpiReadStatus>
 402:	18 2f       	mov	r17, r24
        res = 1;
    
    
    SpiStrobe(CC1101_SFTX);                                 //flush TXfifo
 404:	8b e3       	ldi	r24, 0x3B	; 59
 406:	2b df       	rcall	.-426    	; 0x25e <SpiStrobe>
    SpiStrobe(CC1101_STX);                                  //start send
    //while (!digitalRead(GDO0));                             // Wait for GDO0 to be set -> sync transmitted
    //while (digitalRead(GDO0));                              // Wait for GDO0 to be cleared -> end of packet
    wait_GDO0_high();
    wait_GDO0_low();
    if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 408:	1f 77       	andi	r17, 0x7F	; 127
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	09 f0       	breq	.+2      	; 0x410 <SendData+0x3e>
 40e:	80 e0       	ldi	r24, 0x00	; 0
    
    
    SpiStrobe(CC1101_SFTX);                                 //flush TXfifo
    return res;
    
}
 410:	0f 90       	pop	r0
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	08 95       	ret

0000041c <SetReceive>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void SetReceive(void)
{
    SpiStrobe(CC1101_SRX);
 41c:	84 e3       	ldi	r24, 0x34	; 52
 41e:	1f cf       	rjmp	.-450    	; 0x25e <SpiStrobe>

00000420 <ReceiveData>:
 *FUNCTION     :read data received from RXfifo
 *INPUT        :rxBuffer: buffer to store data
 *OUTPUT       :size of data received
 ****************************************************************/
byte ReceiveData(byte *rxBuffer)
{
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 d0       	rcall	.+0      	; 0x42c <ReceiveData+0xc>
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	7c 01       	movw	r14, r24
    byte size;
    byte status[2];
    
    if(SpiReadStatus(CC1101_RXBYTES) & BYTES_IN_RXFIFO)
 432:	8b e3       	ldi	r24, 0x3B	; 59
 434:	50 df       	rcall	.-352    	; 0x2d6 <SpiReadStatus>
 436:	18 2f       	mov	r17, r24
 438:	1f 77       	andi	r17, 0x7F	; 127
 43a:	69 f0       	breq	.+26     	; 0x456 <ReceiveData+0x36>
    {
        size=SpiReadReg(CC1101_RXFIFO);
 43c:	8f e3       	ldi	r24, 0x3F	; 63
 43e:	16 df       	rcall	.-468    	; 0x26c <SpiReadReg>
 440:	18 2f       	mov	r17, r24
        SpiReadBurstReg(CC1101_RXFIFO,rxBuffer,size);
 442:	48 2f       	mov	r20, r24
 444:	b7 01       	movw	r22, r14
 446:	8f e3       	ldi	r24, 0x3F	; 63
 448:	1b df       	rcall	.-458    	; 0x280 <SpiReadBurstReg>
        SpiReadBurstReg(CC1101_RXFIFO,status,2);
 44a:	42 e0       	ldi	r20, 0x02	; 2
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f e3       	ldi	r24, 0x3F	; 63
 454:	15 df       	rcall	.-470    	; 0x280 <SpiReadBurstReg>
        SpiStrobe(CC1101_SFRX);
        return size;
    }
    else
    {
        SpiStrobe(CC1101_SFRX);
 456:	8a e3       	ldi	r24, 0x3A	; 58
 458:	02 df       	rcall	.-508    	; 0x25e <SpiStrobe>
        return 0;
    }
    
 45a:	81 2f       	mov	r24, r17
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	08 95       	ret

0000046c <Configure_Interrupt>:
#include <stdbool.h>

#define byte				uint8_t
void Configure_Interrupt(uint8_t INT_NO, uint8_t INT_MODE)
{
    switch(INT_NO)
 46c:	88 23       	and	r24, r24
 46e:	19 f0       	breq	.+6      	; 0x476 <Configure_Interrupt+0xa>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	d9 f0       	breq	.+54     	; 0x4aa <Configure_Interrupt+0x3e>
 474:	08 95       	ret
    {
        case 0: switch(INT_MODE)
 476:	61 30       	cpi	r22, 0x01	; 1
 478:	51 f0       	breq	.+20     	; 0x48e <Configure_Interrupt+0x22>
 47a:	28 f0       	brcs	.+10     	; 0x486 <Configure_Interrupt+0x1a>
 47c:	62 30       	cpi	r22, 0x02	; 2
 47e:	61 f0       	breq	.+24     	; 0x498 <Configure_Interrupt+0x2c>
 480:	63 30       	cpi	r22, 0x03	; 3
 482:	79 f0       	breq	.+30     	; 0x4a2 <Configure_Interrupt+0x36>
 484:	08 95       	ret
        {
            case 0:EICRA=(EICRA&(~(1<<ISC01|1<<ISC00)))|(0<<ISC01|0<<ISC00);
 486:	80 91 69 00 	lds	r24, 0x0069
 48a:	8c 7f       	andi	r24, 0xFC	; 252
 48c:	27 c0       	rjmp	.+78     	; 0x4dc <Configure_Interrupt+0x70>
                break;
            case 1:EICRA=(EICRA&(~(1<<ISC01|1<<ISC00)))|(0<<ISC01|1<<ISC00);
 48e:	80 91 69 00 	lds	r24, 0x0069
 492:	8c 7f       	andi	r24, 0xFC	; 252
 494:	81 60       	ori	r24, 0x01	; 1
 496:	22 c0       	rjmp	.+68     	; 0x4dc <Configure_Interrupt+0x70>
                break;
            case 2:EICRA=(EICRA&(~(1<<ISC01|1<<ISC00)))|(1<<ISC01|0<<ISC00);
 498:	80 91 69 00 	lds	r24, 0x0069
 49c:	8c 7f       	andi	r24, 0xFC	; 252
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	1d c0       	rjmp	.+58     	; 0x4dc <Configure_Interrupt+0x70>
                break;
            case 3:EICRA=(EICRA&(~(1<<ISC01|1<<ISC00)))|(1<<ISC01|1<<ISC00);
 4a2:	80 91 69 00 	lds	r24, 0x0069
 4a6:	83 60       	ori	r24, 0x03	; 3
 4a8:	19 c0       	rjmp	.+50     	; 0x4dc <Configure_Interrupt+0x70>
                break;
            default:break;
        }
            break;
            
        case 1: switch(INT_MODE)
 4aa:	61 30       	cpi	r22, 0x01	; 1
 4ac:	51 f0       	breq	.+20     	; 0x4c2 <Configure_Interrupt+0x56>
 4ae:	28 f0       	brcs	.+10     	; 0x4ba <Configure_Interrupt+0x4e>
 4b0:	62 30       	cpi	r22, 0x02	; 2
 4b2:	61 f0       	breq	.+24     	; 0x4cc <Configure_Interrupt+0x60>
 4b4:	63 30       	cpi	r22, 0x03	; 3
 4b6:	79 f0       	breq	.+30     	; 0x4d6 <Configure_Interrupt+0x6a>
 4b8:	08 95       	ret
        {
            case 0:EICRA=(EICRA&(~(1<<ISC11|1<<ISC10)))|(0<<ISC11|0<<ISC10);
 4ba:	80 91 69 00 	lds	r24, 0x0069
 4be:	83 7f       	andi	r24, 0xF3	; 243
 4c0:	0d c0       	rjmp	.+26     	; 0x4dc <Configure_Interrupt+0x70>
                break;
            case 1:EICRA=(EICRA&(~(1<<ISC11|1<<ISC10)))|(0<<ISC11|1<<ISC10);
 4c2:	80 91 69 00 	lds	r24, 0x0069
 4c6:	83 7f       	andi	r24, 0xF3	; 243
 4c8:	84 60       	ori	r24, 0x04	; 4
 4ca:	08 c0       	rjmp	.+16     	; 0x4dc <Configure_Interrupt+0x70>
                break;
            case 2:EICRA=(EICRA&(~(1<<ISC11|1<<ISC10)))|(1<<ISC11|0<<ISC10);
 4cc:	80 91 69 00 	lds	r24, 0x0069
 4d0:	83 7f       	andi	r24, 0xF3	; 243
 4d2:	88 60       	ori	r24, 0x08	; 8
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <Configure_Interrupt+0x70>
                break;
            case 3:EICRA=(EICRA&(~(1<<ISC11|1<<ISC10)))|(1<<ISC11|1<<ISC10);
 4d6:	80 91 69 00 	lds	r24, 0x0069
 4da:	8c 60       	ori	r24, 0x0C	; 12
 4dc:	80 93 69 00 	sts	0x0069, r24
 4e0:	08 95       	ret

000004e2 <Enable_Interrupt>:
 *
 *  \param INT_NO	The interrupt which has to be enabled.
 */
void Enable_Interrupt(uint8_t INT_NO)
{
    switch(INT_NO)
 4e2:	88 23       	and	r24, r24
 4e4:	19 f0       	breq	.+6      	; 0x4ec <Enable_Interrupt+0xa>
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <Enable_Interrupt+0xe>
 4ea:	08 95       	ret
    {
        case 0:EIMSK|=(1<<INT0);
 4ec:	e8 9a       	sbi	0x1d, 0	; 29
            break;
 4ee:	08 95       	ret
        case 1:EIMSK|=(1<<INT1);
 4f0:	e9 9a       	sbi	0x1d, 1	; 29
 4f2:	08 95       	ret

000004f4 <Enable_Pcinterrupt>:
/*! \brief This function enables the external pin change interrupt.
 *
 *  \param PCINT_NO	The pin change interrupt which has to be enabled.
 */
void Enable_Pcinterrupt(uint8_t PCINT_NO)
{
 4f4:	e8 2f       	mov	r30, r24
    if(PCINT_NO>=0 && PCINT_NO<=7)
 4f6:	88 30       	cpi	r24, 0x08	; 8
 4f8:	28 f5       	brcc	.+74     	; 0x544 <Enable_Pcinterrupt+0x50>
    {
        PCICR=(PCICR&(~(1<<PCIE0)))|(1<<PCIE0);
 4fa:	80 91 68 00 	lds	r24, 0x0068
 4fe:	81 60       	ori	r24, 0x01	; 1
 500:	80 93 68 00 	sts	0x0068, r24
        
        switch(PCINT_NO)
 504:	8e 2f       	mov	r24, r30
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc 01       	movw	r30, r24
 50a:	31 97       	sbiw	r30, 0x01	; 1
 50c:	e7 30       	cpi	r30, 0x07	; 7
 50e:	f1 05       	cpc	r31, r1
 510:	28 f4       	brcc	.+10     	; 0x51c <Enable_Pcinterrupt+0x28>
 512:	ec 5e       	subi	r30, 0xEC	; 236
 514:	ff 4f       	sbci	r31, 0xFF	; 255
                break;
            case 5:PCMSK0|=(1<<PCINT5);
                break;
            case 6:PCMSK0|=(1<<PCINT6);
                break;
            case 7:PCMSK0|=(1<<PCINT7);
 516:	80 91 6b 00 	lds	r24, 0x006B
{
    if(PCINT_NO>=0 && PCINT_NO<=7)
    {
        PCICR=(PCICR&(~(1<<PCIE0)))|(1<<PCIE0);
        
        switch(PCINT_NO)
 51a:	09 94       	ijmp
        {
            case 0:PCMSK0|=(1<<PCINT0);
 51c:	80 91 6b 00 	lds	r24, 0x006B
 520:	81 60       	ori	r24, 0x01	; 1
 522:	01 c0       	rjmp	.+2      	; 0x526 <Enable_Pcinterrupt+0x32>
                break;
            case 1:PCMSK0|=(1<<PCINT1);
 524:	82 60       	ori	r24, 0x02	; 2
 526:	80 93 6b 00 	sts	0x006B, r24
                break;
 52a:	08 95       	ret
            case 2:PCMSK0|=(1<<PCINT2);
 52c:	84 60       	ori	r24, 0x04	; 4
 52e:	fb cf       	rjmp	.-10     	; 0x526 <Enable_Pcinterrupt+0x32>
                break;
            case 3:PCMSK0|=(1<<PCINT3);
 530:	88 60       	ori	r24, 0x08	; 8
 532:	f9 cf       	rjmp	.-14     	; 0x526 <Enable_Pcinterrupt+0x32>
                break;
            case 4:PCMSK0|=(1<<PCINT4);
 534:	80 61       	ori	r24, 0x10	; 16
 536:	f7 cf       	rjmp	.-18     	; 0x526 <Enable_Pcinterrupt+0x32>
                break;
            case 5:PCMSK0|=(1<<PCINT5);
 538:	80 62       	ori	r24, 0x20	; 32
 53a:	f5 cf       	rjmp	.-22     	; 0x526 <Enable_Pcinterrupt+0x32>
                break;
            case 6:PCMSK0|=(1<<PCINT6);
 53c:	80 64       	ori	r24, 0x40	; 64
 53e:	f3 cf       	rjmp	.-26     	; 0x526 <Enable_Pcinterrupt+0x32>
                break;
            case 7:PCMSK0|=(1<<PCINT7);
 540:	80 68       	ori	r24, 0x80	; 128
 542:	f1 cf       	rjmp	.-30     	; 0x526 <Enable_Pcinterrupt+0x32>
                break;
            default:break;
        }
    }
    else if(PCINT_NO>=8 && PCINT_NO<=15)
 544:	88 ef       	ldi	r24, 0xF8	; 248
 546:	8e 0f       	add	r24, r30
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	28 f5       	brcc	.+74     	; 0x596 <Enable_Pcinterrupt+0xa2>
    {
        PCICR=(PCICR&(~(1<<PCIE1)))|(1<<PCIE1);
 54c:	80 91 68 00 	lds	r24, 0x0068
 550:	82 60       	ori	r24, 0x02	; 2
 552:	80 93 68 00 	sts	0x0068, r24
        
        switch(PCINT_NO)
 556:	8e 2f       	mov	r24, r30
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	fc 01       	movw	r30, r24
 55c:	39 97       	sbiw	r30, 0x09	; 9
 55e:	e7 30       	cpi	r30, 0x07	; 7
 560:	f1 05       	cpc	r31, r1
 562:	28 f4       	brcc	.+10     	; 0x56e <Enable_Pcinterrupt+0x7a>
 564:	e5 5e       	subi	r30, 0xE5	; 229
 566:	ff 4f       	sbci	r31, 0xFF	; 255
                break;
            case 13:PCMSK1|=(1<<PCINT13);
                break;
            case 14:PCMSK1|=(1<<PCINT14);
                break;
            case 15:PCMSK1|=(1<<PCINT15);
 568:	80 91 6c 00 	lds	r24, 0x006C
    }
    else if(PCINT_NO>=8 && PCINT_NO<=15)
    {
        PCICR=(PCICR&(~(1<<PCIE1)))|(1<<PCIE1);
        
        switch(PCINT_NO)
 56c:	09 94       	ijmp
        {
            case 8:PCMSK1|=(1<<PCINT8);
 56e:	80 91 6c 00 	lds	r24, 0x006C
 572:	81 60       	ori	r24, 0x01	; 1
 574:	0d c0       	rjmp	.+26     	; 0x590 <Enable_Pcinterrupt+0x9c>
                break;
            case 9:PCMSK1|=(1<<PCINT9);
 576:	82 60       	ori	r24, 0x02	; 2
 578:	0b c0       	rjmp	.+22     	; 0x590 <Enable_Pcinterrupt+0x9c>
                break;
            case 10:PCMSK1|=(1<<PCINT10);
 57a:	84 60       	ori	r24, 0x04	; 4
 57c:	09 c0       	rjmp	.+18     	; 0x590 <Enable_Pcinterrupt+0x9c>
                break;
            case 11:PCMSK1|=(1<<PCINT11);
 57e:	88 60       	ori	r24, 0x08	; 8
 580:	07 c0       	rjmp	.+14     	; 0x590 <Enable_Pcinterrupt+0x9c>
                break;
            case 12:PCMSK1|=(1<<PCINT12);
 582:	80 61       	ori	r24, 0x10	; 16
 584:	05 c0       	rjmp	.+10     	; 0x590 <Enable_Pcinterrupt+0x9c>
                break;
            case 13:PCMSK1|=(1<<PCINT13);
 586:	80 62       	ori	r24, 0x20	; 32
 588:	03 c0       	rjmp	.+6      	; 0x590 <Enable_Pcinterrupt+0x9c>
                break;
            case 14:PCMSK1|=(1<<PCINT14);
 58a:	80 64       	ori	r24, 0x40	; 64
 58c:	01 c0       	rjmp	.+2      	; 0x590 <Enable_Pcinterrupt+0x9c>
                break;
            case 15:PCMSK1|=(1<<PCINT15);
 58e:	80 68       	ori	r24, 0x80	; 128
 590:	80 93 6c 00 	sts	0x006C, r24
                break;
 594:	08 95       	ret
            default:break;
        }
    }
    else if(PCINT_NO>=16 && PCINT_NO<=23)
 596:	80 ef       	ldi	r24, 0xF0	; 240
 598:	8e 0f       	add	r24, r30
 59a:	88 30       	cpi	r24, 0x08	; 8
 59c:	28 f5       	brcc	.+74     	; 0x5e8 <Enable_Pcinterrupt+0xf4>
    {
        PCICR=(PCICR&(~(1<<PCIE2)))|(1<<PCIE2);
 59e:	80 91 68 00 	lds	r24, 0x0068
 5a2:	84 60       	ori	r24, 0x04	; 4
 5a4:	80 93 68 00 	sts	0x0068, r24
        
        switch(PCINT_NO)
 5a8:	8e 2f       	mov	r24, r30
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	fc 01       	movw	r30, r24
 5ae:	71 97       	sbiw	r30, 0x11	; 17
 5b0:	e7 30       	cpi	r30, 0x07	; 7
 5b2:	f1 05       	cpc	r31, r1
 5b4:	28 f4       	brcc	.+10     	; 0x5c0 <Enable_Pcinterrupt+0xcc>
 5b6:	ee 5d       	subi	r30, 0xDE	; 222
 5b8:	ff 4f       	sbci	r31, 0xFF	; 255
            case 21:
                PCMSK2|=(1<<PCINT21);
                break;
            case 22:PCMSK2|=(1<<PCINT22);
                break;
            case 23:PCMSK2|=(1<<PCINT23);
 5ba:	80 91 6d 00 	lds	r24, 0x006D
    }
    else if(PCINT_NO>=16 && PCINT_NO<=23)
    {
        PCICR=(PCICR&(~(1<<PCIE2)))|(1<<PCIE2);
        
        switch(PCINT_NO)
 5be:	09 94       	ijmp
        {
            case 16:PCMSK2|=(1<<PCINT16);
 5c0:	80 91 6d 00 	lds	r24, 0x006D
 5c4:	81 60       	ori	r24, 0x01	; 1
 5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <Enable_Pcinterrupt+0xee>
                break;
            case 17:PCMSK2|=(1<<PCINT17);
 5c8:	82 60       	ori	r24, 0x02	; 2
 5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <Enable_Pcinterrupt+0xee>
                break;
            case 18:PCMSK2|=(1<<PCINT18);
 5cc:	84 60       	ori	r24, 0x04	; 4
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <Enable_Pcinterrupt+0xee>
                break;
            case 19:PCMSK2|=(1<<PCINT19);
 5d0:	88 60       	ori	r24, 0x08	; 8
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <Enable_Pcinterrupt+0xee>
                break;
            case 20:PCMSK2|=(1<<PCINT20);
 5d4:	80 61       	ori	r24, 0x10	; 16
 5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <Enable_Pcinterrupt+0xee>
                break;
            case 21:
                PCMSK2|=(1<<PCINT21);
 5d8:	80 62       	ori	r24, 0x20	; 32
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <Enable_Pcinterrupt+0xee>
                break;
            case 22:PCMSK2|=(1<<PCINT22);
 5dc:	80 64       	ori	r24, 0x40	; 64
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <Enable_Pcinterrupt+0xee>
                break;
            case 23:PCMSK2|=(1<<PCINT23);
 5e0:	80 68       	ori	r24, 0x80	; 128
 5e2:	80 93 6d 00 	sts	0x006D, r24
                break;
 5e6:	08 95       	ret
            default:break;
        }
    }
    else
    {
        PCICR=(PCICR&(~(1<<PCIE3)))|(1<<PCIE3);
 5e8:	80 91 68 00 	lds	r24, 0x0068
 5ec:	88 60       	ori	r24, 0x08	; 8
 5ee:	80 93 68 00 	sts	0x0068, r24
        
        switch(PCINT_NO)
 5f2:	e9 31       	cpi	r30, 0x19	; 25
 5f4:	69 f0       	breq	.+26     	; 0x610 <Enable_Pcinterrupt+0x11c>
 5f6:	18 f4       	brcc	.+6      	; 0x5fe <Enable_Pcinterrupt+0x10a>
 5f8:	e8 31       	cpi	r30, 0x18	; 24
 5fa:	31 f0       	breq	.+12     	; 0x608 <Enable_Pcinterrupt+0x114>
 5fc:	08 95       	ret
 5fe:	ea 31       	cpi	r30, 0x1A	; 26
 600:	59 f0       	breq	.+22     	; 0x618 <Enable_Pcinterrupt+0x124>
 602:	eb 31       	cpi	r30, 0x1B	; 27
 604:	69 f0       	breq	.+26     	; 0x620 <Enable_Pcinterrupt+0x12c>
 606:	08 95       	ret
        {
            case 24:PCMSK3|=(1<<PCINT24);
 608:	80 91 6a 00 	lds	r24, 0x006A
 60c:	81 60       	ori	r24, 0x01	; 1
 60e:	0b c0       	rjmp	.+22     	; 0x626 <Enable_Pcinterrupt+0x132>
                break;
            case 25:PCMSK3|=(1<<PCINT25);
 610:	80 91 6a 00 	lds	r24, 0x006A
 614:	82 60       	ori	r24, 0x02	; 2
 616:	07 c0       	rjmp	.+14     	; 0x626 <Enable_Pcinterrupt+0x132>
                break;
            case 26:PCMSK3|=(1<<PCINT26);
 618:	80 91 6a 00 	lds	r24, 0x006A
 61c:	84 60       	ori	r24, 0x04	; 4
 61e:	03 c0       	rjmp	.+6      	; 0x626 <Enable_Pcinterrupt+0x132>
                break;
            case 27:PCMSK3|=(1<<PCINT27);
 620:	80 91 6a 00 	lds	r24, 0x006A
 624:	88 60       	ori	r24, 0x08	; 8
 626:	80 93 6a 00 	sts	0x006A, r24
 62a:	08 95       	ret

0000062c <Disable_Interrupt>:
 *
 *  \param INT_NO	The interrupt which has to be disabled.
 */
void Disable_Interrupt(uint8_t INT_NO)
{
    switch(INT_NO)
 62c:	88 23       	and	r24, r24
 62e:	19 f0       	breq	.+6      	; 0x636 <Disable_Interrupt+0xa>
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	19 f0       	breq	.+6      	; 0x63a <Disable_Interrupt+0xe>
 634:	08 95       	ret
    {
        case 0:EIMSK=(EIMSK&(~(1<<INT0)));
 636:	e8 98       	cbi	0x1d, 0	; 29
            break;
 638:	08 95       	ret
        case 1:EIMSK=(EIMSK&(~(1<<INT1)));
 63a:	e9 98       	cbi	0x1d, 1	; 29
 63c:	08 95       	ret

0000063e <Disable_Pcinterrupt>:
 *
 *  \param PCINT_NO	The pin change interrupt which has to be disabled.
 */
void Disable_Pcinterrupt(uint8_t PCINT_NO)
{
    switch(PCINT_NO)
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	8c 31       	cpi	r24, 0x1C	; 28
 642:	91 05       	cpc	r25, r1
 644:	08 f0       	brcs	.+2      	; 0x648 <Disable_Pcinterrupt+0xa>
 646:	7b c0       	rjmp	.+246    	; 0x73e <Disable_Pcinterrupt+0x100>
 648:	fc 01       	movw	r30, r24
 64a:	e7 5d       	subi	r30, 0xD7	; 215
 64c:	ff 4f       	sbci	r31, 0xFF	; 255
 64e:	09 94       	ijmp
    {
        case 0:PCMSK0=(PCMSK0&(~(1<<PCINT0)));
 650:	80 91 6b 00 	lds	r24, 0x006B
 654:	8e 7f       	andi	r24, 0xFE	; 254
 656:	03 c0       	rjmp	.+6      	; 0x65e <Disable_Pcinterrupt+0x20>
            break;
        case 1:PCMSK0=(PCMSK0&(~(1<<PCINT1)));
 658:	80 91 6b 00 	lds	r24, 0x006B
 65c:	8d 7f       	andi	r24, 0xFD	; 253
 65e:	80 93 6b 00 	sts	0x006B, r24
            break;
 662:	6d c0       	rjmp	.+218    	; 0x73e <Disable_Pcinterrupt+0x100>
        case 2:PCMSK0=(PCMSK0&(~(1<<PCINT2)));
 664:	80 91 6b 00 	lds	r24, 0x006B
 668:	8b 7f       	andi	r24, 0xFB	; 251
 66a:	f9 cf       	rjmp	.-14     	; 0x65e <Disable_Pcinterrupt+0x20>
            break;
        case 3:PCMSK0=(PCMSK0&(~(1<<PCINT3)));
 66c:	80 91 6b 00 	lds	r24, 0x006B
 670:	87 7f       	andi	r24, 0xF7	; 247
 672:	f5 cf       	rjmp	.-22     	; 0x65e <Disable_Pcinterrupt+0x20>
            break;
        case 4:PCMSK0=(PCMSK0&(~(1<<PCINT4)));
 674:	80 91 6b 00 	lds	r24, 0x006B
 678:	8f 7e       	andi	r24, 0xEF	; 239
 67a:	f1 cf       	rjmp	.-30     	; 0x65e <Disable_Pcinterrupt+0x20>
            break;
        case 5:PCMSK0=(PCMSK0&(~(1<<PCINT5)));
 67c:	80 91 6b 00 	lds	r24, 0x006B
 680:	8f 7d       	andi	r24, 0xDF	; 223
 682:	ed cf       	rjmp	.-38     	; 0x65e <Disable_Pcinterrupt+0x20>
            break;
        case 6:PCMSK0=(PCMSK0&(~(1<<PCINT6)));
 684:	80 91 6b 00 	lds	r24, 0x006B
 688:	8f 7b       	andi	r24, 0xBF	; 191
 68a:	e9 cf       	rjmp	.-46     	; 0x65e <Disable_Pcinterrupt+0x20>
            break;
        case 7:PCMSK0=(PCMSK0&(~(1<<PCINT7)));
 68c:	80 91 6b 00 	lds	r24, 0x006B
 690:	8f 77       	andi	r24, 0x7F	; 127
 692:	e5 cf       	rjmp	.-54     	; 0x65e <Disable_Pcinterrupt+0x20>
            break;
        case 8:PCMSK1=(PCMSK1&(~(1<<PCINT8)));
 694:	80 91 6c 00 	lds	r24, 0x006C
 698:	8e 7f       	andi	r24, 0xFE	; 254
 69a:	1b c0       	rjmp	.+54     	; 0x6d2 <Disable_Pcinterrupt+0x94>
            break;
        case 9:PCMSK1=(PCMSK1&(~(1<<PCINT9)));
 69c:	80 91 6c 00 	lds	r24, 0x006C
 6a0:	8d 7f       	andi	r24, 0xFD	; 253
 6a2:	17 c0       	rjmp	.+46     	; 0x6d2 <Disable_Pcinterrupt+0x94>
            break;
        case 10:PCMSK1=(PCMSK1&(~(1<<PCINT10)));
 6a4:	80 91 6c 00 	lds	r24, 0x006C
 6a8:	8b 7f       	andi	r24, 0xFB	; 251
 6aa:	13 c0       	rjmp	.+38     	; 0x6d2 <Disable_Pcinterrupt+0x94>
            break;
        case 11:PCMSK1=(PCMSK1&(~(1<<PCINT11)));
 6ac:	80 91 6c 00 	lds	r24, 0x006C
 6b0:	87 7f       	andi	r24, 0xF7	; 247
 6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <Disable_Pcinterrupt+0x94>
            break;
        case 12:PCMSK1=(PCMSK1&(~(1<<PCINT12)));
 6b4:	80 91 6c 00 	lds	r24, 0x006C
 6b8:	8f 7e       	andi	r24, 0xEF	; 239
 6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <Disable_Pcinterrupt+0x94>
            break;
        case 13:PCMSK1=(PCMSK1&(~(1<<PCINT13)));
 6bc:	80 91 6c 00 	lds	r24, 0x006C
 6c0:	8f 7d       	andi	r24, 0xDF	; 223
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <Disable_Pcinterrupt+0x94>
            break;
        case 14:PCMSK1=(PCMSK1&(~(1<<PCINT14)));
 6c4:	80 91 6c 00 	lds	r24, 0x006C
 6c8:	8f 7b       	andi	r24, 0xBF	; 191
 6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <Disable_Pcinterrupt+0x94>
            break;
        case 15:PCMSK1=(PCMSK1&(~(1<<PCINT15)));
 6cc:	80 91 6c 00 	lds	r24, 0x006C
 6d0:	8f 77       	andi	r24, 0x7F	; 127
 6d2:	80 93 6c 00 	sts	0x006C, r24
            break;
 6d6:	33 c0       	rjmp	.+102    	; 0x73e <Disable_Pcinterrupt+0x100>
        case 16:PCMSK2=(PCMSK2&(~(1<<PCINT16)));
 6d8:	80 91 6d 00 	lds	r24, 0x006D
 6dc:	8e 7f       	andi	r24, 0xFE	; 254
 6de:	1b c0       	rjmp	.+54     	; 0x716 <Disable_Pcinterrupt+0xd8>
            break;
        case 17:PCMSK2=(PCMSK2&(~(1<<PCINT17)));
 6e0:	80 91 6d 00 	lds	r24, 0x006D
 6e4:	8d 7f       	andi	r24, 0xFD	; 253
 6e6:	17 c0       	rjmp	.+46     	; 0x716 <Disable_Pcinterrupt+0xd8>
            break;
        case 18:PCMSK2=(PCMSK2&(~(1<<PCINT18)));
 6e8:	80 91 6d 00 	lds	r24, 0x006D
 6ec:	8b 7f       	andi	r24, 0xFB	; 251
 6ee:	13 c0       	rjmp	.+38     	; 0x716 <Disable_Pcinterrupt+0xd8>
            break;
        case 19:PCMSK2=(PCMSK2&(~(1<<PCINT19)));
 6f0:	80 91 6d 00 	lds	r24, 0x006D
 6f4:	87 7f       	andi	r24, 0xF7	; 247
 6f6:	0f c0       	rjmp	.+30     	; 0x716 <Disable_Pcinterrupt+0xd8>
            break;
        case 20:PCMSK2=(PCMSK2&(~(1<<PCINT20)));
 6f8:	80 91 6d 00 	lds	r24, 0x006D
 6fc:	8f 7e       	andi	r24, 0xEF	; 239
 6fe:	0b c0       	rjmp	.+22     	; 0x716 <Disable_Pcinterrupt+0xd8>
            break;
        case 21:PCMSK2=(PCMSK2&(~(1<<PCINT21)));
 700:	80 91 6d 00 	lds	r24, 0x006D
 704:	8f 7d       	andi	r24, 0xDF	; 223
 706:	07 c0       	rjmp	.+14     	; 0x716 <Disable_Pcinterrupt+0xd8>
            break;
        case 22:PCMSK2=(PCMSK2&(~(1<<PCINT22)));
 708:	80 91 6d 00 	lds	r24, 0x006D
 70c:	8f 7b       	andi	r24, 0xBF	; 191
 70e:	03 c0       	rjmp	.+6      	; 0x716 <Disable_Pcinterrupt+0xd8>
            break;
        case 23:PCMSK2=(PCMSK2&(~(1<<PCINT23)));
 710:	80 91 6d 00 	lds	r24, 0x006D
 714:	8f 77       	andi	r24, 0x7F	; 127
 716:	80 93 6d 00 	sts	0x006D, r24
            break;
 71a:	11 c0       	rjmp	.+34     	; 0x73e <Disable_Pcinterrupt+0x100>
        case 24:PCMSK3=(PCMSK3&(~(1<<PCINT24)));
 71c:	80 91 6a 00 	lds	r24, 0x006A
 720:	8e 7f       	andi	r24, 0xFE	; 254
 722:	0b c0       	rjmp	.+22     	; 0x73a <Disable_Pcinterrupt+0xfc>
            break;
        case 25:PCMSK3=(PCMSK3&(~(1<<PCINT25)));
 724:	80 91 6a 00 	lds	r24, 0x006A
 728:	8d 7f       	andi	r24, 0xFD	; 253
 72a:	07 c0       	rjmp	.+14     	; 0x73a <Disable_Pcinterrupt+0xfc>
            break;
        case 26:PCMSK3=(PCMSK3&(~(1<<PCINT26)));
 72c:	80 91 6a 00 	lds	r24, 0x006A
 730:	8b 7f       	andi	r24, 0xFB	; 251
 732:	03 c0       	rjmp	.+6      	; 0x73a <Disable_Pcinterrupt+0xfc>
            break;
        case 27:PCMSK3=(PCMSK3&(~(1<<PCINT27)));
 734:	80 91 6a 00 	lds	r24, 0x006A
 738:	87 7f       	andi	r24, 0xF7	; 247
 73a:	80 93 6a 00 	sts	0x006A, r24
            break;
        default:break;
    }
    
    if(PCMSK0 == 0x00)
 73e:	80 91 6b 00 	lds	r24, 0x006B
 742:	81 11       	cpse	r24, r1
 744:	04 c0       	rjmp	.+8      	; 0x74e <Disable_Pcinterrupt+0x110>
    {
        PCICR=(PCICR&(~(1<<PCIE0)));
 746:	80 91 68 00 	lds	r24, 0x0068
 74a:	8e 7f       	andi	r24, 0xFE	; 254
 74c:	17 c0       	rjmp	.+46     	; 0x77c <Disable_Pcinterrupt+0x13e>
    }
    else if(PCMSK1 == 0x00)
 74e:	80 91 6c 00 	lds	r24, 0x006C
 752:	81 11       	cpse	r24, r1
 754:	04 c0       	rjmp	.+8      	; 0x75e <Disable_Pcinterrupt+0x120>
    {
        PCICR=(PCICR&(~(1<<PCIE1)));
 756:	80 91 68 00 	lds	r24, 0x0068
 75a:	8d 7f       	andi	r24, 0xFD	; 253
 75c:	0f c0       	rjmp	.+30     	; 0x77c <Disable_Pcinterrupt+0x13e>
    }
    else if(PCMSK2 == 0x00)
 75e:	80 91 6d 00 	lds	r24, 0x006D
 762:	81 11       	cpse	r24, r1
 764:	04 c0       	rjmp	.+8      	; 0x76e <Disable_Pcinterrupt+0x130>
    {
        PCICR=(PCICR&(~(1<<PCIE2)));
 766:	80 91 68 00 	lds	r24, 0x0068
 76a:	8b 7f       	andi	r24, 0xFB	; 251
 76c:	07 c0       	rjmp	.+14     	; 0x77c <Disable_Pcinterrupt+0x13e>
    }
    else if(PCMSK3 == 0x00)
 76e:	80 91 6a 00 	lds	r24, 0x006A
 772:	81 11       	cpse	r24, r1
 774:	05 c0       	rjmp	.+10     	; 0x780 <Disable_Pcinterrupt+0x142>
    {
        PCICR=(PCICR&(~(1<<PCIE3)));
 776:	80 91 68 00 	lds	r24, 0x0068
 77a:	87 7f       	andi	r24, 0xF7	; 247
 77c:	80 93 68 00 	sts	0x0068, r24
 780:	08 95       	ret

00000782 <pciSetup>:
        //pciSetup(5);
    }
}
void pciSetup(byte pin)
{
    *digitalPinToPCMSK(pin) |= bit (digitalPinToPCMSKbit(pin));  // enable pin
 782:	88 30       	cpi	r24, 0x08	; 8
 784:	38 f0       	brcs	.+14     	; 0x794 <pciSetup+0x12>
 786:	8e 30       	cpi	r24, 0x0E	; 14
 788:	40 f0       	brcs	.+16     	; 0x79a <pciSetup+0x18>
 78a:	86 31       	cpi	r24, 0x16	; 22
 78c:	48 f4       	brcc	.+18     	; 0x7a0 <pciSetup+0x1e>
 78e:	ec e6       	ldi	r30, 0x6C	; 108
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <pciSetup+0x22>
 794:	ed e6       	ldi	r30, 0x6D	; 109
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	05 c0       	rjmp	.+10     	; 0x7a4 <pciSetup+0x22>
 79a:	eb e6       	ldi	r30, 0x6B	; 107
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <pciSetup+0x22>
 7a0:	e0 e0       	ldi	r30, 0x00	; 0
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	90 81       	ld	r25, Z
 7a6:	28 2f       	mov	r18, r24
 7a8:	27 70       	andi	r18, 0x07	; 7
 7aa:	41 e0       	ldi	r20, 0x01	; 1
 7ac:	50 e0       	ldi	r21, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	04 c0       	rjmp	.+8      	; 0x7bc <pciSetup+0x3a>
 7b4:	44 0f       	add	r20, r20
 7b6:	55 1f       	adc	r21, r21
 7b8:	66 1f       	adc	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	2a 95       	dec	r18
 7be:	d2 f7       	brpl	.-12     	; 0x7b4 <pciSetup+0x32>
 7c0:	49 2b       	or	r20, r25
 7c2:	40 83       	st	Z, r20
    PCIFR  |= bit (digitalPinToPCICRbit(pin)); // clear any outstanding interrupt
 7c4:	2b b3       	in	r18, 0x1b	; 27
 7c6:	88 30       	cpi	r24, 0x08	; 8
 7c8:	30 f0       	brcs	.+12     	; 0x7d6 <pciSetup+0x54>
 7ca:	80 31       	cpi	r24, 0x10	; 16
 7cc:	30 f0       	brcs	.+12     	; 0x7da <pciSetup+0x58>
 7ce:	88 31       	cpi	r24, 0x18	; 24
 7d0:	30 f0       	brcs	.+12     	; 0x7de <pciSetup+0x5c>
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <pciSetup+0x5e>
 7d6:	92 e0       	ldi	r25, 0x02	; 2
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <pciSetup+0x5e>
 7da:	98 e0       	ldi	r25, 0x08	; 8
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <pciSetup+0x5e>
 7de:	94 e0       	ldi	r25, 0x04	; 4
 7e0:	92 2b       	or	r25, r18
 7e2:	9b bb       	out	0x1b, r25	; 27
    PCICR  |= bit (digitalPinToPCICRbit(pin)); // enable interrupt for the group
 7e4:	90 91 68 00 	lds	r25, 0x0068
 7e8:	88 30       	cpi	r24, 0x08	; 8
 7ea:	30 f0       	brcs	.+12     	; 0x7f8 <pciSetup+0x76>
 7ec:	80 31       	cpi	r24, 0x10	; 16
 7ee:	30 f0       	brcs	.+12     	; 0x7fc <pciSetup+0x7a>
 7f0:	88 31       	cpi	r24, 0x18	; 24
 7f2:	30 f0       	brcs	.+12     	; 0x800 <pciSetup+0x7e>
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	05 c0       	rjmp	.+10     	; 0x802 <pciSetup+0x80>
 7f8:	82 e0       	ldi	r24, 0x02	; 2
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <pciSetup+0x80>
 7fc:	88 e0       	ldi	r24, 0x08	; 8
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <pciSetup+0x80>
 800:	84 e0       	ldi	r24, 0x04	; 4
 802:	89 2b       	or	r24, r25
 804:	80 93 68 00 	sts	0x0068, r24
 808:	08 95       	ret

0000080a <__vector_5>:
}
ISR (PCINT2_vect) // handle pin change interrupt for D0 to D7 here
{
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	8f 93       	push	r24
    available = true;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	80 93 08 01 	sts	0x0108, r24
}
 81c:	8f 91       	pop	r24
 81e:	0f 90       	pop	r0
 820:	0f be       	out	0x3f, r0	; 63
 822:	0f 90       	pop	r0
 824:	1f 90       	pop	r1
 826:	18 95       	reti

00000828 <main>:
    byte marcstate;
    byte res;
    uint32_t X0,X1,Y0,Y1,Y2;
    uint32_t X_out,Y_out1,Y_out2;
    uint32_t X=0, Y=0;
    Init();
 828:	c6 dd       	rcall	.-1140   	; 0x3b6 <Init>
    version = SpiReadStatus(CC1101_VERSION);
 82a:	81 e3       	ldi	r24, 0x31	; 49
 82c:	54 dd       	rcall	.-1368   	; 0x2d6 <SpiReadStatus>
 82e:	c8 2f       	mov	r28, r24
    SetReceive();
 830:	f5 dd       	rcall	.-1046   	; 0x41c <SetReceive>
    TX_buffer[0] = 0x01;
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	80 93 46 01 	sts	0x0146, r24
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	2a e0       	ldi	r18, 0x0A	; 10
    for(i=1;i<tx_size;i++)
            {
                TX_buffer[i]=i*10;
 83c:	e9 2f       	mov	r30, r25
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	ea 5b       	subi	r30, 0xBA	; 186
 842:	fe 4f       	sbci	r31, 0xFE	; 254
 844:	20 83       	st	Z, r18
    uint32_t X=0, Y=0;
    Init();
    version = SpiReadStatus(CC1101_VERSION);
    SetReceive();
    TX_buffer[0] = 0x01;
    for(i=1;i<tx_size;i++)
 846:	9f 5f       	subi	r25, 0xFF	; 255
 848:	26 5f       	subi	r18, 0xF6	; 246
 84a:	9d 33       	cpi	r25, 0x3D	; 61
 84c:	b9 f7       	brne	.-18     	; 0x83c <main+0x14>
 84e:	90 93 83 01 	sts	0x0183, r25
            {
                TX_buffer[i]=i*10;
            }
        if (!TWIM_Init (100000))
 852:	60 ea       	ldi	r22, 0xA0	; 160
 854:	76 e8       	ldi	r23, 0x86	; 134
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	33 dc       	rcall	.-1946   	; 0xc2 <TWIM_Init>
 85c:	81 11       	cpse	r24, r1
 85e:	01 c0       	rjmp	.+2      	; 0x862 <main+0x3a>
        {
    
            while (1);
 860:	ff cf       	rjmp	.-2      	; 0x860 <main+0x38>
 862:	f1 2c       	mov	r15, r1
    /*
     ** Endless loop
     */
    while (1)
    {
        if(!TWIM_Start(slaveAddress2, TWIM_WRITE))
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	80 e4       	ldi	r24, 0x40	; 64
 868:	45 dc       	rcall	.-1910   	; 0xf4 <TWIM_Start>
 86a:	81 11       	cpse	r24, r1
 86c:	02 c0       	rjmp	.+4      	; 0x872 <main+0x4a>
        {
            TWIM_Stop();
 86e:	66 dc       	rcall	.-1844   	; 0x13c <TWIM_Stop>
 870:	02 c0       	rjmp	.+4      	; 0x876 <main+0x4e>
            
        }
        else{
            TWIM_Write(0xE3);
 872:	83 ee       	ldi	r24, 0xE3	; 227
 874:	6b dc       	rcall	.-1834   	; 0x14c <TWIM_Write>
        }
        if (!TWIM_Start (slaveAddress2, TWIM_READ))
 876:	61 e0       	ldi	r22, 0x01	; 1
 878:	80 e4       	ldi	r24, 0x40	; 64
 87a:	3c dc       	rcall	.-1928   	; 0xf4 <TWIM_Start>
 87c:	81 11       	cpse	r24, r1
 87e:	02 c0       	rjmp	.+4      	; 0x884 <main+0x5c>
        {
            TWIM_Stop ();
 880:	5d dc       	rcall	.-1862   	; 0x13c <TWIM_Stop>
 882:	28 c0       	rjmp	.+80     	; 0x8d4 <main+0xac>
        }
        else
        {
            X0=TWIM_ReadAck();
 884:	74 dc       	rcall	.-1816   	; 0x16e <TWIM_ReadAck>
 886:	c8 2e       	mov	r12, r24
 888:	d1 2c       	mov	r13, r1
 88a:	e1 2c       	mov	r14, r1
 88c:	f1 2c       	mov	r15, r1
            X1=TWIM_ReadNack();
 88e:	79 dc       	rcall	.-1806   	; 0x182 <TWIM_ReadNack>
            X0=X0<<8;
 890:	fe 2c       	mov	r15, r14
 892:	ed 2c       	mov	r14, r13
 894:	dc 2c       	mov	r13, r12
 896:	cc 24       	eor	r12, r12
            X_out=X0+X1;
 898:	a7 01       	movw	r20, r14
 89a:	96 01       	movw	r18, r12
 89c:	28 0f       	add	r18, r24
 89e:	31 1d       	adc	r19, r1
 8a0:	41 1d       	adc	r20, r1
 8a2:	51 1d       	adc	r21, r1
 8a4:	ca 01       	movw	r24, r20
 8a6:	b9 01       	movw	r22, r18
            X=(175.72*X_out)/65536;
 8a8:	f2 d0       	rcall	.+484    	; 0xa8e <__floatunsisf>
 8aa:	22 e5       	ldi	r18, 0x52	; 82
 8ac:	38 eb       	ldi	r19, 0xB8	; 184
 8ae:	4f e2       	ldi	r20, 0x2F	; 47
 8b0:	53 e4       	ldi	r21, 0x43	; 67
 8b2:	7b d1       	rcall	.+758    	; 0xbaa <__mulsf3>
 8b4:	20 e0       	ldi	r18, 0x00	; 0
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	40 e8       	ldi	r20, 0x80	; 128
 8ba:	57 e3       	ldi	r21, 0x37	; 55
 8bc:	76 d1       	rcall	.+748    	; 0xbaa <__mulsf3>
 8be:	bb d0       	rcall	.+374    	; 0xa36 <__fixunssfsi>
            X=X-46.85;
 8c0:	e6 d0       	rcall	.+460    	; 0xa8e <__floatunsisf>
 8c2:	26 e6       	ldi	r18, 0x66	; 102
 8c4:	36 e6       	ldi	r19, 0x66	; 102
 8c6:	4b e3       	ldi	r20, 0x3B	; 59
 8c8:	52 e4       	ldi	r21, 0x42	; 66
 8ca:	50 d0       	rcall	.+160    	; 0x96c <__subsf3>
 8cc:	b4 d0       	rcall	.+360    	; 0xa36 <__fixunssfsi>
 8ce:	f6 2e       	mov	r15, r22
            TX_buffer[1] = X;
 8d0:	60 93 47 01 	sts	0x0147, r22
        }
        
        if (!TWIM_Start (slaveaddress, TWIM_WRITE))
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	84 e0       	ldi	r24, 0x04	; 4
 8d8:	0d dc       	rcall	.-2022   	; 0xf4 <TWIM_Start>
 8da:	88 23       	and	r24, r24
 8dc:	d9 f1       	breq	.+118    	; 0x954 <main+0x12c>
        }
        else
        {
        //sent = SendData(TX_buffer,size);
            //byte res;
            TWIM_Write(X);
 8de:	8f 2d       	mov	r24, r15
 8e0:	35 dc       	rcall	.-1942   	; 0x14c <TWIM_Write>
            TWIM_Write(version);
 8e2:	8c 2f       	mov	r24, r28
 8e4:	33 dc       	rcall	.-1946   	; 0x14c <TWIM_Write>
            marcstate = SpiReadStatus(CC1101_MARCSTATE);
 8e6:	85 e3       	ldi	r24, 0x35	; 53
 8e8:	f6 dc       	rcall	.-1556   	; 0x2d6 <SpiReadStatus>
            if(SpiReadStatus(CC1101_MARCSTATE) != 1){
 8ea:	85 e3       	ldi	r24, 0x35	; 53
 8ec:	f4 dc       	rcall	.-1560   	; 0x2d6 <SpiReadStatus>
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	59 f0       	breq	.+22     	; 0x908 <main+0xe0>
                marcstate = SpiReadStatus(CC1101_MARCSTATE);
 8f2:	85 e3       	ldi	r24, 0x35	; 53
 8f4:	f0 dc       	rcall	.-1568   	; 0x2d6 <SpiReadStatus>
 8f6:	3f ef       	ldi	r19, 0xFF	; 255
 8f8:	49 e6       	ldi	r20, 0x69	; 105
 8fa:	58 e1       	ldi	r21, 0x18	; 24
 8fc:	31 50       	subi	r19, 0x01	; 1
 8fe:	40 40       	sbci	r20, 0x00	; 0
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	e1 f7       	brne	.-8      	; 0x8fc <main+0xd4>
 904:	00 c0       	rjmp	.+0      	; 0x906 <main+0xde>
 906:	00 00       	nop
                _delay_ms(1000);
            }
            size=ReceiveData(RX_buffer);
 908:	89 e0       	ldi	r24, 0x09	; 9
 90a:	91 e0       	ldi	r25, 0x01	; 1
 90c:	89 dd       	rcall	.-1262   	; 0x420 <ReceiveData>
 90e:	e8 2e       	mov	r14, r24
            
            if (size>0) {
 910:	88 23       	and	r24, r24
 912:	f1 f0       	breq	.+60     	; 0x950 <main+0x128>
                TWIM_Write(RX_buffer[8]);
 914:	80 91 11 01 	lds	r24, 0x0111
 918:	19 dc       	rcall	.-1998   	; 0x14c <TWIM_Write>
                
                if(RX_buffer[0] == 0x01){
 91a:	80 91 09 01 	lds	r24, 0x0109
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	b9 f4       	brne	.+46     	; 0x950 <main+0x128>
                    SpiWriteReg(CC1101_TXFIFO,tx_size);
 922:	6d e3       	ldi	r22, 0x3D	; 61
 924:	8f e3       	ldi	r24, 0x3F	; 63
 926:	61 dc       	rcall	.-1854   	; 0x1ea <SpiWriteReg>
                        SpiWriteBurstReg(CC1101_TXFIFO,TX_buffer,tx_size);      //write data to send
 928:	4d e3       	ldi	r20, 0x3D	; 61
 92a:	66 e4       	ldi	r22, 0x46	; 70
 92c:	71 e0       	ldi	r23, 0x01	; 1
 92e:	8f e3       	ldi	r24, 0x3F	; 63
 930:	6c dc       	rcall	.-1832   	; 0x20a <SpiWriteBurstReg>
                        SpiStrobe(CC1101_STX);                  //start send
 932:	85 e3       	ldi	r24, 0x35	; 53
 934:	94 dc       	rcall	.-1752   	; 0x25e <SpiStrobe>
                        TWIM_Write(SpiReadStatus(CC1101_MARCSTATE));
 936:	85 e3       	ldi	r24, 0x35	; 53
 938:	ce dc       	rcall	.-1636   	; 0x2d6 <SpiReadStatus>
 93a:	08 dc       	rcall	.-2032   	; 0x14c <TWIM_Write>
                        wait_GDO0_high();
 93c:	4d 9b       	sbis	0x09, 5	; 9
 93e:	fe cf       	rjmp	.-4      	; 0x93c <main+0x114>
                        wait_GDO0_low();
 940:	4d 99       	sbic	0x09, 5	; 9
 942:	fe cf       	rjmp	.-4      	; 0x940 <main+0x118>
                        if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 944:	8a e3       	ldi	r24, 0x3A	; 58
 946:	c7 dc       	rcall	.-1650   	; 0x2d6 <SpiReadStatus>
                            res = 1;
            
                        TWIM_Write(res);
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	00 dc       	rcall	.-2048   	; 0x14c <TWIM_Write>
                        SpiStrobe(CC1101_SFTX);
 94c:	8b e3       	ldi	r24, 0x3B	; 59
 94e:	87 dc       	rcall	.-1778   	; 0x25e <SpiStrobe>
                }
            }
            TWIM_Write(size);
 950:	8e 2d       	mov	r24, r14
 952:	fc db       	rcall	.-2056   	; 0x14c <TWIM_Write>
            TWIM_Stop ();
 954:	f3 db       	rcall	.-2074   	; 0x13c <TWIM_Stop>
 956:	8f ef       	ldi	r24, 0xFF	; 255
 958:	99 e6       	ldi	r25, 0x69	; 105
 95a:	28 e1       	ldi	r18, 0x18	; 24
 95c:	81 50       	subi	r24, 0x01	; 1
 95e:	90 40       	sbci	r25, 0x00	; 0
 960:	20 40       	sbci	r18, 0x00	; 0
 962:	e1 f7       	brne	.-8      	; 0x95c <main+0x134>
 964:	00 c0       	rjmp	.+0      	; 0x966 <main+0x13e>
 966:	00 00       	nop
        }
        
        _delay_ms(1000);
        SetReceive();
 968:	59 dd       	rcall	.-1358   	; 0x41c <SetReceive>
        //pciSetup(5);
    }
 96a:	7c cf       	rjmp	.-264    	; 0x864 <main+0x3c>

0000096c <__subsf3>:
 96c:	50 58       	subi	r21, 0x80	; 128

0000096e <__addsf3>:
 96e:	bb 27       	eor	r27, r27
 970:	aa 27       	eor	r26, r26
 972:	0e d0       	rcall	.+28     	; 0x990 <__addsf3x>
 974:	e0 c0       	rjmp	.+448    	; 0xb36 <__fp_round>
 976:	d1 d0       	rcall	.+418    	; 0xb1a <__fp_pscA>
 978:	30 f0       	brcs	.+12     	; 0x986 <__addsf3+0x18>
 97a:	d6 d0       	rcall	.+428    	; 0xb28 <__fp_pscB>
 97c:	20 f0       	brcs	.+8      	; 0x986 <__addsf3+0x18>
 97e:	31 f4       	brne	.+12     	; 0x98c <__addsf3+0x1e>
 980:	9f 3f       	cpi	r25, 0xFF	; 255
 982:	11 f4       	brne	.+4      	; 0x988 <__addsf3+0x1a>
 984:	1e f4       	brtc	.+6      	; 0x98c <__addsf3+0x1e>
 986:	c6 c0       	rjmp	.+396    	; 0xb14 <__fp_nan>
 988:	0e f4       	brtc	.+2      	; 0x98c <__addsf3+0x1e>
 98a:	e0 95       	com	r30
 98c:	e7 fb       	bst	r30, 7
 98e:	bc c0       	rjmp	.+376    	; 0xb08 <__fp_inf>

00000990 <__addsf3x>:
 990:	e9 2f       	mov	r30, r25
 992:	e2 d0       	rcall	.+452    	; 0xb58 <__fp_split3>
 994:	80 f3       	brcs	.-32     	; 0x976 <__addsf3+0x8>
 996:	ba 17       	cp	r27, r26
 998:	62 07       	cpc	r22, r18
 99a:	73 07       	cpc	r23, r19
 99c:	84 07       	cpc	r24, r20
 99e:	95 07       	cpc	r25, r21
 9a0:	18 f0       	brcs	.+6      	; 0x9a8 <__addsf3x+0x18>
 9a2:	71 f4       	brne	.+28     	; 0x9c0 <__addsf3x+0x30>
 9a4:	9e f5       	brtc	.+102    	; 0xa0c <__addsf3x+0x7c>
 9a6:	fa c0       	rjmp	.+500    	; 0xb9c <__fp_zero>
 9a8:	0e f4       	brtc	.+2      	; 0x9ac <__addsf3x+0x1c>
 9aa:	e0 95       	com	r30
 9ac:	0b 2e       	mov	r0, r27
 9ae:	ba 2f       	mov	r27, r26
 9b0:	a0 2d       	mov	r26, r0
 9b2:	0b 01       	movw	r0, r22
 9b4:	b9 01       	movw	r22, r18
 9b6:	90 01       	movw	r18, r0
 9b8:	0c 01       	movw	r0, r24
 9ba:	ca 01       	movw	r24, r20
 9bc:	a0 01       	movw	r20, r0
 9be:	11 24       	eor	r1, r1
 9c0:	ff 27       	eor	r31, r31
 9c2:	59 1b       	sub	r21, r25
 9c4:	99 f0       	breq	.+38     	; 0x9ec <__addsf3x+0x5c>
 9c6:	59 3f       	cpi	r21, 0xF9	; 249
 9c8:	50 f4       	brcc	.+20     	; 0x9de <__addsf3x+0x4e>
 9ca:	50 3e       	cpi	r21, 0xE0	; 224
 9cc:	68 f1       	brcs	.+90     	; 0xa28 <__addsf3x+0x98>
 9ce:	1a 16       	cp	r1, r26
 9d0:	f0 40       	sbci	r31, 0x00	; 0
 9d2:	a2 2f       	mov	r26, r18
 9d4:	23 2f       	mov	r18, r19
 9d6:	34 2f       	mov	r19, r20
 9d8:	44 27       	eor	r20, r20
 9da:	58 5f       	subi	r21, 0xF8	; 248
 9dc:	f3 cf       	rjmp	.-26     	; 0x9c4 <__addsf3x+0x34>
 9de:	46 95       	lsr	r20
 9e0:	37 95       	ror	r19
 9e2:	27 95       	ror	r18
 9e4:	a7 95       	ror	r26
 9e6:	f0 40       	sbci	r31, 0x00	; 0
 9e8:	53 95       	inc	r21
 9ea:	c9 f7       	brne	.-14     	; 0x9de <__addsf3x+0x4e>
 9ec:	7e f4       	brtc	.+30     	; 0xa0c <__addsf3x+0x7c>
 9ee:	1f 16       	cp	r1, r31
 9f0:	ba 0b       	sbc	r27, r26
 9f2:	62 0b       	sbc	r22, r18
 9f4:	73 0b       	sbc	r23, r19
 9f6:	84 0b       	sbc	r24, r20
 9f8:	ba f0       	brmi	.+46     	; 0xa28 <__addsf3x+0x98>
 9fa:	91 50       	subi	r25, 0x01	; 1
 9fc:	a1 f0       	breq	.+40     	; 0xa26 <__addsf3x+0x96>
 9fe:	ff 0f       	add	r31, r31
 a00:	bb 1f       	adc	r27, r27
 a02:	66 1f       	adc	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	c2 f7       	brpl	.-16     	; 0x9fa <__addsf3x+0x6a>
 a0a:	0e c0       	rjmp	.+28     	; 0xa28 <__addsf3x+0x98>
 a0c:	ba 0f       	add	r27, r26
 a0e:	62 1f       	adc	r22, r18
 a10:	73 1f       	adc	r23, r19
 a12:	84 1f       	adc	r24, r20
 a14:	48 f4       	brcc	.+18     	; 0xa28 <__addsf3x+0x98>
 a16:	87 95       	ror	r24
 a18:	77 95       	ror	r23
 a1a:	67 95       	ror	r22
 a1c:	b7 95       	ror	r27
 a1e:	f7 95       	ror	r31
 a20:	9e 3f       	cpi	r25, 0xFE	; 254
 a22:	08 f0       	brcs	.+2      	; 0xa26 <__addsf3x+0x96>
 a24:	b3 cf       	rjmp	.-154    	; 0x98c <__addsf3+0x1e>
 a26:	93 95       	inc	r25
 a28:	88 0f       	add	r24, r24
 a2a:	08 f0       	brcs	.+2      	; 0xa2e <__addsf3x+0x9e>
 a2c:	99 27       	eor	r25, r25
 a2e:	ee 0f       	add	r30, r30
 a30:	97 95       	ror	r25
 a32:	87 95       	ror	r24
 a34:	08 95       	ret

00000a36 <__fixunssfsi>:
 a36:	98 d0       	rcall	.+304    	; 0xb68 <__fp_splitA>
 a38:	88 f0       	brcs	.+34     	; 0xa5c <__fixunssfsi+0x26>
 a3a:	9f 57       	subi	r25, 0x7F	; 127
 a3c:	90 f0       	brcs	.+36     	; 0xa62 <__fixunssfsi+0x2c>
 a3e:	b9 2f       	mov	r27, r25
 a40:	99 27       	eor	r25, r25
 a42:	b7 51       	subi	r27, 0x17	; 23
 a44:	a0 f0       	brcs	.+40     	; 0xa6e <__fixunssfsi+0x38>
 a46:	d1 f0       	breq	.+52     	; 0xa7c <__fixunssfsi+0x46>
 a48:	66 0f       	add	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	1a f0       	brmi	.+6      	; 0xa58 <__fixunssfsi+0x22>
 a52:	ba 95       	dec	r27
 a54:	c9 f7       	brne	.-14     	; 0xa48 <__fixunssfsi+0x12>
 a56:	12 c0       	rjmp	.+36     	; 0xa7c <__fixunssfsi+0x46>
 a58:	b1 30       	cpi	r27, 0x01	; 1
 a5a:	81 f0       	breq	.+32     	; 0xa7c <__fixunssfsi+0x46>
 a5c:	9f d0       	rcall	.+318    	; 0xb9c <__fp_zero>
 a5e:	b1 e0       	ldi	r27, 0x01	; 1
 a60:	08 95       	ret
 a62:	9c c0       	rjmp	.+312    	; 0xb9c <__fp_zero>
 a64:	67 2f       	mov	r22, r23
 a66:	78 2f       	mov	r23, r24
 a68:	88 27       	eor	r24, r24
 a6a:	b8 5f       	subi	r27, 0xF8	; 248
 a6c:	39 f0       	breq	.+14     	; 0xa7c <__fixunssfsi+0x46>
 a6e:	b9 3f       	cpi	r27, 0xF9	; 249
 a70:	cc f3       	brlt	.-14     	; 0xa64 <__fixunssfsi+0x2e>
 a72:	86 95       	lsr	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	b3 95       	inc	r27
 a7a:	d9 f7       	brne	.-10     	; 0xa72 <__fixunssfsi+0x3c>
 a7c:	3e f4       	brtc	.+14     	; 0xa8c <__fixunssfsi+0x56>
 a7e:	90 95       	com	r25
 a80:	80 95       	com	r24
 a82:	70 95       	com	r23
 a84:	61 95       	neg	r22
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	08 95       	ret

00000a8e <__floatunsisf>:
 a8e:	e8 94       	clt
 a90:	09 c0       	rjmp	.+18     	; 0xaa4 <__floatsisf+0x12>

00000a92 <__floatsisf>:
 a92:	97 fb       	bst	r25, 7
 a94:	3e f4       	brtc	.+14     	; 0xaa4 <__floatsisf+0x12>
 a96:	90 95       	com	r25
 a98:	80 95       	com	r24
 a9a:	70 95       	com	r23
 a9c:	61 95       	neg	r22
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	8f 4f       	sbci	r24, 0xFF	; 255
 aa2:	9f 4f       	sbci	r25, 0xFF	; 255
 aa4:	99 23       	and	r25, r25
 aa6:	a9 f0       	breq	.+42     	; 0xad2 <__floatsisf+0x40>
 aa8:	f9 2f       	mov	r31, r25
 aaa:	96 e9       	ldi	r25, 0x96	; 150
 aac:	bb 27       	eor	r27, r27
 aae:	93 95       	inc	r25
 ab0:	f6 95       	lsr	r31
 ab2:	87 95       	ror	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f1 11       	cpse	r31, r1
 abc:	f8 cf       	rjmp	.-16     	; 0xaae <__floatsisf+0x1c>
 abe:	fa f4       	brpl	.+62     	; 0xafe <__floatsisf+0x6c>
 ac0:	bb 0f       	add	r27, r27
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__floatsisf+0x36>
 ac4:	60 ff       	sbrs	r22, 0
 ac6:	1b c0       	rjmp	.+54     	; 0xafe <__floatsisf+0x6c>
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	16 c0       	rjmp	.+44     	; 0xafe <__floatsisf+0x6c>
 ad2:	88 23       	and	r24, r24
 ad4:	11 f0       	breq	.+4      	; 0xada <__floatsisf+0x48>
 ad6:	96 e9       	ldi	r25, 0x96	; 150
 ad8:	11 c0       	rjmp	.+34     	; 0xafc <__floatsisf+0x6a>
 ada:	77 23       	and	r23, r23
 adc:	21 f0       	breq	.+8      	; 0xae6 <__floatsisf+0x54>
 ade:	9e e8       	ldi	r25, 0x8E	; 142
 ae0:	87 2f       	mov	r24, r23
 ae2:	76 2f       	mov	r23, r22
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__floatsisf+0x5e>
 ae6:	66 23       	and	r22, r22
 ae8:	71 f0       	breq	.+28     	; 0xb06 <__floatsisf+0x74>
 aea:	96 e8       	ldi	r25, 0x86	; 134
 aec:	86 2f       	mov	r24, r22
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	2a f0       	brmi	.+10     	; 0xafe <__floatsisf+0x6c>
 af4:	9a 95       	dec	r25
 af6:	66 0f       	add	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	da f7       	brpl	.-10     	; 0xaf4 <__floatsisf+0x62>
 afe:	88 0f       	add	r24, r24
 b00:	96 95       	lsr	r25
 b02:	87 95       	ror	r24
 b04:	97 f9       	bld	r25, 7
 b06:	08 95       	ret

00000b08 <__fp_inf>:
 b08:	97 f9       	bld	r25, 7
 b0a:	9f 67       	ori	r25, 0x7F	; 127
 b0c:	80 e8       	ldi	r24, 0x80	; 128
 b0e:	70 e0       	ldi	r23, 0x00	; 0
 b10:	60 e0       	ldi	r22, 0x00	; 0
 b12:	08 95       	ret

00000b14 <__fp_nan>:
 b14:	9f ef       	ldi	r25, 0xFF	; 255
 b16:	80 ec       	ldi	r24, 0xC0	; 192
 b18:	08 95       	ret

00000b1a <__fp_pscA>:
 b1a:	00 24       	eor	r0, r0
 b1c:	0a 94       	dec	r0
 b1e:	16 16       	cp	r1, r22
 b20:	17 06       	cpc	r1, r23
 b22:	18 06       	cpc	r1, r24
 b24:	09 06       	cpc	r0, r25
 b26:	08 95       	ret

00000b28 <__fp_pscB>:
 b28:	00 24       	eor	r0, r0
 b2a:	0a 94       	dec	r0
 b2c:	12 16       	cp	r1, r18
 b2e:	13 06       	cpc	r1, r19
 b30:	14 06       	cpc	r1, r20
 b32:	05 06       	cpc	r0, r21
 b34:	08 95       	ret

00000b36 <__fp_round>:
 b36:	09 2e       	mov	r0, r25
 b38:	03 94       	inc	r0
 b3a:	00 0c       	add	r0, r0
 b3c:	11 f4       	brne	.+4      	; 0xb42 <__fp_round+0xc>
 b3e:	88 23       	and	r24, r24
 b40:	52 f0       	brmi	.+20     	; 0xb56 <__fp_round+0x20>
 b42:	bb 0f       	add	r27, r27
 b44:	40 f4       	brcc	.+16     	; 0xb56 <__fp_round+0x20>
 b46:	bf 2b       	or	r27, r31
 b48:	11 f4       	brne	.+4      	; 0xb4e <__fp_round+0x18>
 b4a:	60 ff       	sbrs	r22, 0
 b4c:	04 c0       	rjmp	.+8      	; 0xb56 <__fp_round+0x20>
 b4e:	6f 5f       	subi	r22, 0xFF	; 255
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	08 95       	ret

00000b58 <__fp_split3>:
 b58:	57 fd       	sbrc	r21, 7
 b5a:	90 58       	subi	r25, 0x80	; 128
 b5c:	44 0f       	add	r20, r20
 b5e:	55 1f       	adc	r21, r21
 b60:	59 f0       	breq	.+22     	; 0xb78 <__fp_splitA+0x10>
 b62:	5f 3f       	cpi	r21, 0xFF	; 255
 b64:	71 f0       	breq	.+28     	; 0xb82 <__fp_splitA+0x1a>
 b66:	47 95       	ror	r20

00000b68 <__fp_splitA>:
 b68:	88 0f       	add	r24, r24
 b6a:	97 fb       	bst	r25, 7
 b6c:	99 1f       	adc	r25, r25
 b6e:	61 f0       	breq	.+24     	; 0xb88 <__fp_splitA+0x20>
 b70:	9f 3f       	cpi	r25, 0xFF	; 255
 b72:	79 f0       	breq	.+30     	; 0xb92 <__fp_splitA+0x2a>
 b74:	87 95       	ror	r24
 b76:	08 95       	ret
 b78:	12 16       	cp	r1, r18
 b7a:	13 06       	cpc	r1, r19
 b7c:	14 06       	cpc	r1, r20
 b7e:	55 1f       	adc	r21, r21
 b80:	f2 cf       	rjmp	.-28     	; 0xb66 <__fp_split3+0xe>
 b82:	46 95       	lsr	r20
 b84:	f1 df       	rcall	.-30     	; 0xb68 <__fp_splitA>
 b86:	08 c0       	rjmp	.+16     	; 0xb98 <__fp_splitA+0x30>
 b88:	16 16       	cp	r1, r22
 b8a:	17 06       	cpc	r1, r23
 b8c:	18 06       	cpc	r1, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	f1 cf       	rjmp	.-30     	; 0xb74 <__fp_splitA+0xc>
 b92:	86 95       	lsr	r24
 b94:	71 05       	cpc	r23, r1
 b96:	61 05       	cpc	r22, r1
 b98:	08 94       	sec
 b9a:	08 95       	ret

00000b9c <__fp_zero>:
 b9c:	e8 94       	clt

00000b9e <__fp_szero>:
 b9e:	bb 27       	eor	r27, r27
 ba0:	66 27       	eor	r22, r22
 ba2:	77 27       	eor	r23, r23
 ba4:	cb 01       	movw	r24, r22
 ba6:	97 f9       	bld	r25, 7
 ba8:	08 95       	ret

00000baa <__mulsf3>:
 baa:	0a d0       	rcall	.+20     	; 0xbc0 <__mulsf3x>
 bac:	c4 cf       	rjmp	.-120    	; 0xb36 <__fp_round>
 bae:	b5 df       	rcall	.-150    	; 0xb1a <__fp_pscA>
 bb0:	28 f0       	brcs	.+10     	; 0xbbc <__mulsf3+0x12>
 bb2:	ba df       	rcall	.-140    	; 0xb28 <__fp_pscB>
 bb4:	18 f0       	brcs	.+6      	; 0xbbc <__mulsf3+0x12>
 bb6:	95 23       	and	r25, r21
 bb8:	09 f0       	breq	.+2      	; 0xbbc <__mulsf3+0x12>
 bba:	a6 cf       	rjmp	.-180    	; 0xb08 <__fp_inf>
 bbc:	ab cf       	rjmp	.-170    	; 0xb14 <__fp_nan>
 bbe:	ef cf       	rjmp	.-34     	; 0xb9e <__fp_szero>

00000bc0 <__mulsf3x>:
 bc0:	cb df       	rcall	.-106    	; 0xb58 <__fp_split3>
 bc2:	a8 f3       	brcs	.-22     	; 0xbae <__mulsf3+0x4>

00000bc4 <__mulsf3_pse>:
 bc4:	99 23       	and	r25, r25
 bc6:	d9 f3       	breq	.-10     	; 0xbbe <__mulsf3+0x14>
 bc8:	55 23       	and	r21, r21
 bca:	c9 f3       	breq	.-14     	; 0xbbe <__mulsf3+0x14>
 bcc:	95 0f       	add	r25, r21
 bce:	50 e0       	ldi	r21, 0x00	; 0
 bd0:	55 1f       	adc	r21, r21
 bd2:	aa 27       	eor	r26, r26
 bd4:	ee 27       	eor	r30, r30
 bd6:	ff 27       	eor	r31, r31
 bd8:	bb 27       	eor	r27, r27
 bda:	00 24       	eor	r0, r0
 bdc:	08 94       	sec
 bde:	67 95       	ror	r22
 be0:	20 f4       	brcc	.+8      	; 0xbea <__mulsf3_pse+0x26>
 be2:	e2 0f       	add	r30, r18
 be4:	f3 1f       	adc	r31, r19
 be6:	b4 1f       	adc	r27, r20
 be8:	0a 1e       	adc	r0, r26
 bea:	22 0f       	add	r18, r18
 bec:	33 1f       	adc	r19, r19
 bee:	44 1f       	adc	r20, r20
 bf0:	aa 1f       	adc	r26, r26
 bf2:	66 95       	lsr	r22
 bf4:	a9 f7       	brne	.-22     	; 0xbe0 <__mulsf3_pse+0x1c>
 bf6:	77 95       	ror	r23
 bf8:	30 f4       	brcc	.+12     	; 0xc06 <__mulsf3_pse+0x42>
 bfa:	f3 0f       	add	r31, r19
 bfc:	b4 1f       	adc	r27, r20
 bfe:	0a 1e       	adc	r0, r26
 c00:	12 1e       	adc	r1, r18
 c02:	08 f4       	brcc	.+2      	; 0xc06 <__mulsf3_pse+0x42>
 c04:	63 95       	inc	r22
 c06:	33 0f       	add	r19, r19
 c08:	44 1f       	adc	r20, r20
 c0a:	aa 1f       	adc	r26, r26
 c0c:	22 1f       	adc	r18, r18
 c0e:	76 95       	lsr	r23
 c10:	99 f7       	brne	.-26     	; 0xbf8 <__mulsf3_pse+0x34>
 c12:	87 95       	ror	r24
 c14:	20 f4       	brcc	.+8      	; 0xc1e <__mulsf3_pse+0x5a>
 c16:	b4 0f       	add	r27, r20
 c18:	0a 1e       	adc	r0, r26
 c1a:	12 1e       	adc	r1, r18
 c1c:	63 1f       	adc	r22, r19
 c1e:	44 0f       	add	r20, r20
 c20:	aa 1f       	adc	r26, r26
 c22:	22 1f       	adc	r18, r18
 c24:	33 1f       	adc	r19, r19
 c26:	86 95       	lsr	r24
 c28:	a9 f7       	brne	.-22     	; 0xc14 <__mulsf3_pse+0x50>
 c2a:	86 2f       	mov	r24, r22
 c2c:	71 2d       	mov	r23, r1
 c2e:	60 2d       	mov	r22, r0
 c30:	11 24       	eor	r1, r1
 c32:	9f 57       	subi	r25, 0x7F	; 127
 c34:	50 40       	sbci	r21, 0x00	; 0
 c36:	8a f0       	brmi	.+34     	; 0xc5a <__mulsf3_pse+0x96>
 c38:	e1 f0       	breq	.+56     	; 0xc72 <__mulsf3_pse+0xae>
 c3a:	88 23       	and	r24, r24
 c3c:	4a f0       	brmi	.+18     	; 0xc50 <__mulsf3_pse+0x8c>
 c3e:	ee 0f       	add	r30, r30
 c40:	ff 1f       	adc	r31, r31
 c42:	bb 1f       	adc	r27, r27
 c44:	66 1f       	adc	r22, r22
 c46:	77 1f       	adc	r23, r23
 c48:	88 1f       	adc	r24, r24
 c4a:	91 50       	subi	r25, 0x01	; 1
 c4c:	50 40       	sbci	r21, 0x00	; 0
 c4e:	a9 f7       	brne	.-22     	; 0xc3a <__mulsf3_pse+0x76>
 c50:	9e 3f       	cpi	r25, 0xFE	; 254
 c52:	51 05       	cpc	r21, r1
 c54:	70 f0       	brcs	.+28     	; 0xc72 <__mulsf3_pse+0xae>
 c56:	58 cf       	rjmp	.-336    	; 0xb08 <__fp_inf>
 c58:	a2 cf       	rjmp	.-188    	; 0xb9e <__fp_szero>
 c5a:	5f 3f       	cpi	r21, 0xFF	; 255
 c5c:	ec f3       	brlt	.-6      	; 0xc58 <__mulsf3_pse+0x94>
 c5e:	98 3e       	cpi	r25, 0xE8	; 232
 c60:	dc f3       	brlt	.-10     	; 0xc58 <__mulsf3_pse+0x94>
 c62:	86 95       	lsr	r24
 c64:	77 95       	ror	r23
 c66:	67 95       	ror	r22
 c68:	b7 95       	ror	r27
 c6a:	f7 95       	ror	r31
 c6c:	e7 95       	ror	r30
 c6e:	9f 5f       	subi	r25, 0xFF	; 255
 c70:	c1 f7       	brne	.-16     	; 0xc62 <__mulsf3_pse+0x9e>
 c72:	fe 2b       	or	r31, r30
 c74:	88 0f       	add	r24, r24
 c76:	91 1d       	adc	r25, r1
 c78:	96 95       	lsr	r25
 c7a:	87 95       	ror	r24
 c7c:	97 f9       	bld	r25, 7
 c7e:	08 95       	ret

00000c80 <__udivmodsi4>:
 c80:	a1 e2       	ldi	r26, 0x21	; 33
 c82:	1a 2e       	mov	r1, r26
 c84:	aa 1b       	sub	r26, r26
 c86:	bb 1b       	sub	r27, r27
 c88:	fd 01       	movw	r30, r26
 c8a:	0d c0       	rjmp	.+26     	; 0xca6 <__udivmodsi4_ep>

00000c8c <__udivmodsi4_loop>:
 c8c:	aa 1f       	adc	r26, r26
 c8e:	bb 1f       	adc	r27, r27
 c90:	ee 1f       	adc	r30, r30
 c92:	ff 1f       	adc	r31, r31
 c94:	a2 17       	cp	r26, r18
 c96:	b3 07       	cpc	r27, r19
 c98:	e4 07       	cpc	r30, r20
 c9a:	f5 07       	cpc	r31, r21
 c9c:	20 f0       	brcs	.+8      	; 0xca6 <__udivmodsi4_ep>
 c9e:	a2 1b       	sub	r26, r18
 ca0:	b3 0b       	sbc	r27, r19
 ca2:	e4 0b       	sbc	r30, r20
 ca4:	f5 0b       	sbc	r31, r21

00000ca6 <__udivmodsi4_ep>:
 ca6:	66 1f       	adc	r22, r22
 ca8:	77 1f       	adc	r23, r23
 caa:	88 1f       	adc	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	1a 94       	dec	r1
 cb0:	69 f7       	brne	.-38     	; 0xc8c <__udivmodsi4_loop>
 cb2:	60 95       	com	r22
 cb4:	70 95       	com	r23
 cb6:	80 95       	com	r24
 cb8:	90 95       	com	r25
 cba:	9b 01       	movw	r18, r22
 cbc:	ac 01       	movw	r20, r24
 cbe:	bd 01       	movw	r22, r26
 cc0:	cf 01       	movw	r24, r30
 cc2:	08 95       	ret

00000cc4 <_exit>:
 cc4:	f8 94       	cli

00000cc6 <__stop_program>:
 cc6:	ff cf       	rjmp	.-2      	; 0xcc6 <__stop_program>
