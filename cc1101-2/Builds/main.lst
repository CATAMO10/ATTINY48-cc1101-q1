   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 126               		.section	.text.startup,"ax",@progbits
 128               	.global	main
 130               	main:
   1:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** #include <stdio.h>
   2:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** #include <avr/io.h>
   3:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** #include <avr/interrupt.h>
   4:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** #include <util/delay.h>
   5:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** #include "TWI_Master.h"
   6:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** #include "cc1101.h"
   7:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** #define slaveaddress    0x04
   8:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** #define size 61
   9:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** 
  10:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** byte TX_buffer[size]={0};
  11:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** byte i;
  12:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** 
  13:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** int main(void) {
 132               	.LM0:
 133               	.LFBB1:
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
 139               	.LM1:
 140 0000 80E0      		ldi r24,0
 141 0002 90E0      		ldi r25,0
 142               	.L2:
  14:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     byte version;
  15:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     for(i=0;i<size;i++)
  16:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     {
  17:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         TX_buffer[i]=i*2;
 144               	.LM2:
 145 0004 E82F      		mov r30,r24
 146 0006 F0E0      		ldi r31,0
 147 0008 E050      		subi r30,lo8(-(TX_buffer))
 148 000a F040      		sbci r31,hi8(-(TX_buffer))
 149 000c 9083      		st Z,r25
  15:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     {
 151               	.LM3:
 152 000e 8F5F      		subi r24,lo8(-(1))
 153 0010 9E5F      		subi r25,lo8(-(2))
 154 0012 8D33      		cpi r24,lo8(61)
 155 0014 01F4      		brne .L2
 156 0016 8093 0000 		sts i,r24
  18:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     }
  19:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     Init();
 158               	.LM4:
 159 001a 00D0      		rcall Init
  20:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     version = SpiReadStatus(CC1101_VERSION);
 161               	.LM5:
 162 001c 81E3      		ldi r24,lo8(49)
 163 001e 00D0      		rcall SpiReadStatus
 164 0020 182F      		mov r17,r24
  21:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     if (!TWIM_Init (100000))
 166               	.LM6:
 167 0022 60EA      		ldi r22,lo8(-96)
 168 0024 76E8      		ldi r23,lo8(-122)
 169 0026 81E0      		ldi r24,lo8(1)
 170 0028 90E0      		ldi r25,0
 171 002a 00D0      		rcall TWIM_Init
 172 002c 8111      		cpse r24,__zero_reg__
 173 002e 00C0      		rjmp .L13
 174               	.L4:
  22:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     {
  23:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         
  24:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         while (1);
 176               	.LM7:
 177 0030 00C0      		rjmp .L4
 178               	.L5:
 179               	.LBB5:
  25:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     }
  26:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     /*
  27:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****      ** Endless loop
  28:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****      */
  29:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     while (1)
  30:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****     {
  31:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         byte sent;
  32:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         //sent = SendData(TX_buffer,size);
  33:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         byte marcstate,marcstate2;
  34:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         SpiWriteReg(CC1101_TXFIFO,size);
  35:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         SpiWriteBurstReg(CC1101_TXFIFO,TX_buffer,size);      //write data to send
  36:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         SpiStrobe(CC1101_STX);                  //start send
  37:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         marcstate = SpiReadStatus(CC1101_MARCSTATE);
  38:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         wait_GDO0_high();
 181               	.LM8:
 182 0032 4D9B      		sbis 0x9,5
 183 0034 00C0      		rjmp .L5
 184               	.L10:
  39:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         wait_GDO0_low();
 186               	.LM9:
 187 0036 4D99      		sbic 0x9,5
 188 0038 00C0      		rjmp .L10
  40:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         marcstate2 = SpiReadStatus(CC1101_MARCSTATE);
 190               	.LM10:
 191 003a 85E3      		ldi r24,lo8(53)
 192 003c 00D0      		rcall SpiReadStatus
 193 003e C82F      		mov r28,r24
  41:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** //        if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
  42:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c **** //            res = 1;
  43:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         
  44:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         SpiStrobe(CC1101_SFTX);
 195               	.LM11:
 196 0040 8BE3      		ldi r24,lo8(59)
 197 0042 00D0      		rcall SpiStrobe
  45:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         if (!TWIM_Start (slaveaddress, TWIM_WRITE))
 199               	.LM12:
 200 0044 60E0      		ldi r22,0
 201 0046 84E0      		ldi r24,lo8(4)
 202 0048 00D0      		rcall TWIM_Start
 203 004a 8111      		cpse r24,__zero_reg__
 204 004c 00C0      		rjmp .L7
  46:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         {
  47:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****             TWIM_Stop ();
 206               	.LM13:
 207 004e 00D0      		rcall TWIM_Stop
 208               	.L13:
  34:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         SpiWriteBurstReg(CC1101_TXFIFO,TX_buffer,size);      //write data to send
 210               	.LM14:
 211 0050 6DE3      		ldi r22,lo8(61)
 212 0052 8FE3      		ldi r24,lo8(63)
 213 0054 00D0      		rcall SpiWriteReg
  35:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         SpiStrobe(CC1101_STX);                  //start send
 215               	.LM15:
 216 0056 4DE3      		ldi r20,lo8(61)
 217 0058 60E0      		ldi r22,lo8(TX_buffer)
 218 005a 70E0      		ldi r23,hi8(TX_buffer)
 219 005c 8FE3      		ldi r24,lo8(63)
 220 005e 00D0      		rcall SpiWriteBurstReg
  36:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         marcstate = SpiReadStatus(CC1101_MARCSTATE);
 222               	.LM16:
 223 0060 85E3      		ldi r24,lo8(53)
 224 0062 00D0      		rcall SpiStrobe
  37:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         wait_GDO0_high();
 226               	.LM17:
 227 0064 85E3      		ldi r24,lo8(53)
 228 0066 00D0      		rcall SpiReadStatus
 229 0068 D82F      		mov r29,r24
  38:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         wait_GDO0_low();
 231               	.LM18:
 232 006a 00C0      		rjmp .L5
 233               	.L7:
  48:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         }
  49:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         else
  50:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****         {
  51:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****             TWIM_Write(version);
 235               	.LM19:
 236 006c 812F      		mov r24,r17
 237 006e 00D0      		rcall TWIM_Write
  52:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****             TWIM_Write(marcstate);
 239               	.LM20:
 240 0070 8D2F      		mov r24,r29
 241 0072 00D0      		rcall TWIM_Write
  53:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****             TWIM_Write(marcstate2);
 243               	.LM21:
 244 0074 8C2F      		mov r24,r28
 245 0076 00D0      		rcall TWIM_Write
  54:/Users/davide/Documents/NQM_WORK/MinimizedBoard/Attiny48/i2ctest/cc1101-2/cc1101-2/main.c ****             TWIM_Stop ();
 247               	.LM22:
 248 0078 00D0      		rcall TWIM_Stop
 249               	.LBB6:
 250               	.LBB7:
 252               	.Ltext1:
   1:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  41:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  42:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  46:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \file */
  47:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \code
  49:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \endcode
  53:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  54:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     used.
  58:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  59:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  68:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  77:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  81:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** */
  82:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  87:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  88:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  93:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  94:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  97:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  98:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 103:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 104:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /**
 105:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 107:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 109:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 112:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 114:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 120:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 125:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 132:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 140:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****  */
 141:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** void
 142:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** {
 144:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 155:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 158:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#else
 159:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#endif
 162:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 163:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 254               	.LM23:
 255 007a 2FE7      		ldi r18,lo8(239999)
 256 007c 89EA      		ldi r24,hi8(239999)
 257 007e 93E0      		ldi r25,hlo8(239999)
 258 0080 2150      		1: subi r18,1
 259 0082 8040      		sbci r24,0
 260 0084 9040      		sbci r25,0
 261 0086 01F4      		brne 1b
 262 0088 00C0      		rjmp .
 263 008a 0000      		nop
 264 008c 00C0      		rjmp .L13
 265               	.LBE7:
 266               	.LBE6:
 267               	.LBE5:
 276               	.Lscope1:
 277               		.comm	i,1,1
 278               	.global	TX_buffer
 279               		.section .bss
 282               	TX_buffer:
 283 0000 0000 0000 		.zero	61
 283      0000 0000 
 283      0000 0000 
 283      0000 0000 
 283      0000 0000 
 286               		.text
 288               	.Letext0:
 289               		.ident	"GCC: (GNU) 4.9.3"
 290               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/fc/8p1lqrrj7p3f4bt9djyny4yh0000gn/T//cccjrN34.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/fc/8p1lqrrj7p3f4bt9djyny4yh0000gn/T//cccjrN34.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/fc/8p1lqrrj7p3f4bt9djyny4yh0000gn/T//cccjrN34.s:4      *ABS*:000000000000003f __SREG__
/var/folders/fc/8p1lqrrj7p3f4bt9djyny4yh0000gn/T//cccjrN34.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/fc/8p1lqrrj7p3f4bt9djyny4yh0000gn/T//cccjrN34.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/fc/8p1lqrrj7p3f4bt9djyny4yh0000gn/T//cccjrN34.s:130    .text.startup:0000000000000000 main
/var/folders/fc/8p1lqrrj7p3f4bt9djyny4yh0000gn/T//cccjrN34.s:282    .bss:0000000000000000 TX_buffer
                            *COM*:0000000000000001 i

UNDEFINED SYMBOLS
Init
SpiReadStatus
TWIM_Init
SpiStrobe
TWIM_Start
TWIM_Stop
SpiWriteReg
SpiWriteBurstReg
TWIM_Write
__do_clear_bss
