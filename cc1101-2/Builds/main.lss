
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000033e  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000120c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001147  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000270f  2**0
                  CONTENTS, READONLY
  5 .debug_info   00000576  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052b  00000000  00000000  00002c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000001d  00000000  00000000  000031c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d9  00000000  00000000  000031de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	25 c0       	rjmp	.+74     	; 0x4e <__bad_interrupt>
   4:	24 c0       	rjmp	.+72     	; 0x4e <__bad_interrupt>
   6:	23 c0       	rjmp	.+70     	; 0x4e <__bad_interrupt>
   8:	22 c0       	rjmp	.+68     	; 0x4e <__bad_interrupt>
   a:	21 c0       	rjmp	.+66     	; 0x4e <__bad_interrupt>
   c:	20 c0       	rjmp	.+64     	; 0x4e <__bad_interrupt>
   e:	1f c0       	rjmp	.+62     	; 0x4e <__bad_interrupt>
  10:	1e c0       	rjmp	.+60     	; 0x4e <__bad_interrupt>
  12:	1d c0       	rjmp	.+58     	; 0x4e <__bad_interrupt>
  14:	1c c0       	rjmp	.+56     	; 0x4e <__bad_interrupt>
  16:	1b c0       	rjmp	.+54     	; 0x4e <__bad_interrupt>
  18:	1a c0       	rjmp	.+52     	; 0x4e <__bad_interrupt>
  1a:	19 c0       	rjmp	.+50     	; 0x4e <__bad_interrupt>
  1c:	18 c0       	rjmp	.+48     	; 0x4e <__bad_interrupt>
  1e:	17 c0       	rjmp	.+46     	; 0x4e <__bad_interrupt>
  20:	16 c0       	rjmp	.+44     	; 0x4e <__bad_interrupt>
  22:	15 c0       	rjmp	.+42     	; 0x4e <__bad_interrupt>
  24:	14 c0       	rjmp	.+40     	; 0x4e <__bad_interrupt>
  26:	13 c0       	rjmp	.+38     	; 0x4e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d1 e0       	ldi	r29, 0x01	; 1
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ee e3       	ldi	r30, 0x3E	; 62
  3c:	f3 e0       	ldi	r31, 0x03	; 3
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a8 30       	cpi	r26, 0x08	; 8
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>
  4a:	76 d1       	rcall	.+748    	; 0x338 <main>
  4c:	76 c1       	rjmp	.+748    	; 0x33a <_exit>

0000004e <__bad_interrupt>:
  4e:	d8 cf       	rjmp	.-80     	; 0x0 <__vectors>

00000050 <SpiInit>:
 ****************************************************************/
void SpiInit(void)
{
    
//    digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<5);
  50:	2d 9a       	sbi	0x05, 5	; 5
    // Configure SPI pins
//    pinMode(SS_PIN, OUTPUT);
//    pinMode(MOSI_PIN, OUTPUT);
//    pinMode(MISO_PIN, INPUT);
//    pinMode(SCK_PIN, OUTPUT);
    DDRB = (1<<PB5)|(1<<PB3)|(1<<PB2);
  52:	8c e2       	ldi	r24, 0x2C	; 44
  54:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE)|(1<<MSTR);
  56:	80 e5       	ldi	r24, 0x50	; 80
  58:	8c bd       	out	0x2c, r24	; 44
    
//    digitalWrite(SCK_PIN, HIGH);
//    digitalWrite(MOSI_PIN, LOW);
    PORTB=(1<<5) | (0<<3);
  5a:	90 e2       	ldi	r25, 0x20	; 32
  5c:	95 b9       	out	0x05, r25	; 5
    
    // SPI speed = clk/4
    SPCR = _BV(SPE) | _BV(MSTR);
  5e:	8c bd       	out	0x2c, r24	; 44
  60:	08 95       	ret

00000062 <SpiTransfer>:
// *INPUT        :value: data to send
// *OUTPUT       :data to receive
// ****************************************************************
byte SpiTransfer(byte value)
{
    SPDR = value;
  62:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF))) ;
  64:	0d b4       	in	r0, 0x2d	; 45
  66:	07 fe       	sbrs	r0, 7
  68:	fd cf       	rjmp	.-6      	; 0x64 <SpiTransfer+0x2>
    return SPDR;
  6a:	8e b5       	in	r24, 0x2e	; 46
}
  6c:	08 95       	ret

0000006e <GDO_Set>:
 *OUTPUT       : none
 ****************************************************************/
void GDO_Set (void)
{
    //pinMode(GDO0, INPUT);
    DDRD |= (1<<5);
  6e:	55 9a       	sbi	0x0a, 5	; 10
  70:	08 95       	ret

00000072 <Reset>:
 *OUTPUT       :none
 ****************************************************************/
void Reset (void)
{
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1 << 2);
  72:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	87 ee       	ldi	r24, 0xE7	; 231
  76:	93 e0       	ldi	r25, 0x03	; 3
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <Reset+0x6>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <Reset+0xc>
  7e:	00 00       	nop
    _delay_ms(1);
    //digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<2);
  80:	2a 9a       	sbi	0x05, 2	; 5
  82:	87 ee       	ldi	r24, 0xE7	; 231
  84:	93 e0       	ldi	r25, 0x03	; 3
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <Reset+0x14>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <Reset+0x1a>
  8c:	00 00       	nop
    _delay_ms(1);
//    digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1 << 2);
  8e:	2a 98       	cbi	0x05, 2	; 5
//    while(digitalRead(MISO_PIN));
    wait_Miso();
  90:	1c 99       	sbic	0x03, 4	; 3
  92:	fe cf       	rjmp	.-4      	; 0x90 <Reset+0x1e>
    SpiTransfer(CC1101_SRES);
  94:	80 e3       	ldi	r24, 0x30	; 48
  96:	e5 df       	rcall	.-54     	; 0x62 <SpiTransfer>
//    while(digitalRead(MISO_PIN));
    wait_Miso();
  98:	1c 99       	sbic	0x03, 4	; 3
  9a:	fe cf       	rjmp	.-4      	; 0x98 <Reset+0x26>
//    digitalWrite(SS_PIN, HIGH);
    PORTB &= ~(1 << 2);
  9c:	2a 98       	cbi	0x05, 2	; 5
  9e:	08 95       	ret

000000a0 <SpiWriteReg>:
 *FUNCTION     :CC1101 write data to register
 *INPUT        :addr: register address; value: register value
 *OUTPUT       :none
 ****************************************************************/
void SpiWriteReg(byte addr, byte value)
{
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	18 2f       	mov	r17, r24
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<2);
  ae:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso()
  b0:	1c 9b       	sbis	0x03, 4	; 3
  b2:	05 c0       	rjmp	.+10     	; 0xbe <SpiWriteReg+0x1e>
    SpiTransfer(addr);
  b4:	81 2f       	mov	r24, r17
  b6:	69 83       	std	Y+1, r22	; 0x01
  b8:	d4 df       	rcall	.-88     	; 0x62 <SpiTransfer>
  ba:	69 81       	ldd	r22, Y+1	; 0x01
  bc:	f9 cf       	rjmp	.-14     	; 0xb0 <SpiWriteReg+0x10>
    SpiTransfer(value);
  be:	86 2f       	mov	r24, r22
  c0:	d0 df       	rcall	.-96     	; 0x62 <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<2);
  c2:	2a 9a       	sbi	0x05, 2	; 5
}
  c4:	0f 90       	pop	r0
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	1f 91       	pop	r17
  cc:	08 95       	ret

000000ce <SpiWriteBurstReg>:
 *FUNCTION     :CC1101 write burst data to register
 *INPUT        :addr: register address; buffer:register value array; num:number to write
 *OUTPUT       :none
 ****************************************************************/
void SpiWriteBurstReg(byte addr, byte *buffer, byte num)
{
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <SpiWriteBurstReg+0xe>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	14 2f       	mov	r17, r20
    byte i, temp;
    
    temp = addr | WRITE_BURST;
  e2:	80 64       	ori	r24, 0x40	; 64
//    digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<2);
  e4:	2a 98       	cbi	0x05, 2	; 5
//    while(digitalRead(MISO_PIN));
    wait_Miso();
  e6:	1c 99       	sbic	0x03, 4	; 3
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <SpiWriteBurstReg+0x18>
    SpiTransfer(temp);
  ea:	69 83       	std	Y+1, r22	; 0x01
  ec:	7a 83       	std	Y+2, r23	; 0x02
  ee:	b9 df       	rcall	.-142    	; 0x62 <SpiTransfer>
  f0:	69 81       	ldd	r22, Y+1	; 0x01
  f2:	06 2f       	mov	r16, r22
    for (i = 0; i < num; i++)
  f4:	e6 2e       	mov	r14, r22
  f6:	7a 81       	ldd	r23, Y+2	; 0x02
  f8:	f7 2e       	mov	r15, r23
  fa:	8e 2d       	mov	r24, r14
  fc:	80 1b       	sub	r24, r16
  fe:	81 17       	cp	r24, r17
 100:	28 f4       	brcc	.+10     	; 0x10c <SpiWriteBurstReg+0x3e>
    {
        SpiTransfer(buffer[i]);
 102:	f7 01       	movw	r30, r14
 104:	81 91       	ld	r24, Z+
 106:	7f 01       	movw	r14, r30
 108:	ac df       	rcall	.-168    	; 0x62 <SpiTransfer>
 10a:	f7 cf       	rjmp	.-18     	; 0xfa <SpiWriteBurstReg+0x2c>
    }
//    digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<2);
 10c:	2a 9a       	sbi	0x05, 2	; 5
}
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	08 95       	ret

00000120 <SpiStrobe>:
 *OUTPUT       :none
 ****************************************************************/
void SpiStrobe(byte strobe)
{
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<2);
 120:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 122:	1c 99       	sbic	0x03, 4	; 3
 124:	fe cf       	rjmp	.-4      	; 0x122 <SpiStrobe+0x2>
    SpiTransfer(strobe);
 126:	9d df       	rcall	.-198    	; 0x62 <SpiTransfer>
//    digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<2);
 128:	2a 9a       	sbi	0x05, 2	; 5
 12a:	08 95       	ret

0000012c <SpiReadReg>:
 ****************************************************************/
byte SpiReadReg(byte addr)
{
    byte temp, value;
    
    temp = addr|READ_SINGLE;
 12c:	80 68       	ori	r24, 0x80	; 128
//    digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<2);
 12e:	2a 98       	cbi	0x05, 2	; 5
//    while(digitalRead(MISO_PIN));
    wait_Miso();
 130:	1c 99       	sbic	0x03, 4	; 3
 132:	fe cf       	rjmp	.-4      	; 0x130 <SpiReadReg+0x4>
    SpiTransfer(temp);
 134:	96 df       	rcall	.-212    	; 0x62 <SpiTransfer>
    value=SpiTransfer(0);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	94 df       	rcall	.-216    	; 0x62 <SpiTransfer>
//    digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<2);
 13a:	2a 9a       	sbi	0x05, 2	; 5
    
    return value;
}
 13c:	08 95       	ret

0000013e <SpiReadBurstReg>:
 *FUNCTION     :CC1101 read burst data from register
 *INPUT        :addr: register address; buffer:array to store register value; num: number to read
 *OUTPUT       :none
 ****************************************************************/
void SpiReadBurstReg(byte addr, byte *buffer, byte num)
{
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	00 d0       	rcall	.+0      	; 0x14c <SpiReadBurstReg+0xe>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	14 2f       	mov	r17, r20
    byte i,temp;
    
    temp = addr | READ_BURST;
 152:	80 6c       	ori	r24, 0xC0	; 192
//    digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<2);
 154:	2a 98       	cbi	0x05, 2	; 5
//    while(digitalRead(MISO_PIN));
    wait_Miso();
 156:	1c 99       	sbic	0x03, 4	; 3
 158:	fe cf       	rjmp	.-4      	; 0x156 <SpiReadBurstReg+0x18>
    SpiTransfer(temp);
 15a:	69 83       	std	Y+1, r22	; 0x01
 15c:	7a 83       	std	Y+2, r23	; 0x02
 15e:	81 df       	rcall	.-254    	; 0x62 <SpiTransfer>
 160:	69 81       	ldd	r22, Y+1	; 0x01
 162:	06 2f       	mov	r16, r22
    for(i=0;i<num;i++)
 164:	e6 2e       	mov	r14, r22
 166:	7a 81       	ldd	r23, Y+2	; 0x02
 168:	f7 2e       	mov	r15, r23
 16a:	8e 2d       	mov	r24, r14
 16c:	80 1b       	sub	r24, r16
 16e:	81 17       	cp	r24, r17
 170:	30 f4       	brcc	.+12     	; 0x17e <SpiReadBurstReg+0x40>
    {
        buffer[i]=SpiTransfer(0);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	76 df       	rcall	.-276    	; 0x62 <SpiTransfer>
 176:	f7 01       	movw	r30, r14
 178:	81 93       	st	Z+, r24
 17a:	7f 01       	movw	r14, r30
 17c:	f6 cf       	rjmp	.-20     	; 0x16a <SpiReadBurstReg+0x2c>
    }
//    digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<2);
 17e:	2a 9a       	sbi	0x05, 2	; 5
}
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	08 95       	ret

00000192 <SpiReadStatus>:
 ****************************************************************/
byte SpiReadStatus(byte addr)
{
    byte value,temp;
    
    temp = addr | READ_BURST;
 192:	80 6c       	ori	r24, 0xC0	; 192
//    digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<2);
 194:	2a 98       	cbi	0x05, 2	; 5
//    while(digitalRead(MISO_PIN));
    wait_Miso();
 196:	1c 99       	sbic	0x03, 4	; 3
 198:	fe cf       	rjmp	.-4      	; 0x196 <SpiReadStatus+0x4>
    SpiTransfer(temp);
 19a:	63 df       	rcall	.-314    	; 0x62 <SpiTransfer>
    value=SpiTransfer(0);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	61 df       	rcall	.-318    	; 0x62 <SpiTransfer>
//    digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<2);
 1a0:	2a 9a       	sbi	0x05, 2	; 5
    return value;
}
 1a2:	08 95       	ret

000001a4 <RegConfigSettings>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void RegConfigSettings(void)
{
    SpiWriteReg(CC1101_FSCTRL1,  0x08);
 1a4:	68 e0       	ldi	r22, 0x08	; 8
 1a6:	8b e0       	ldi	r24, 0x0B	; 11
 1a8:	7b df       	rcall	.-266    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCTRL0,  0x00);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	78 df       	rcall	.-272    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ2,    0x10);
 1b0:	60 e1       	ldi	r22, 0x10	; 16
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	75 df       	rcall	.-278    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ1,    0xA7);
 1b6:	67 ea       	ldi	r22, 0xA7	; 167
 1b8:	8e e0       	ldi	r24, 0x0E	; 14
 1ba:	72 df       	rcall	.-284    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ0,    0x62);
 1bc:	62 e6       	ldi	r22, 0x62	; 98
 1be:	8f e0       	ldi	r24, 0x0F	; 15
 1c0:	6f df       	rcall	.-290    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG4,  0x5B);
 1c2:	6b e5       	ldi	r22, 0x5B	; 91
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	6c df       	rcall	.-296    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG3,  0xF8);
 1c8:	68 ef       	ldi	r22, 0xF8	; 248
 1ca:	81 e1       	ldi	r24, 0x11	; 17
 1cc:	69 df       	rcall	.-302    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG2,  0x03);
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	82 e1       	ldi	r24, 0x12	; 18
 1d2:	66 df       	rcall	.-308    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG1,  0x22);
 1d4:	62 e2       	ldi	r22, 0x22	; 34
 1d6:	83 e1       	ldi	r24, 0x13	; 19
 1d8:	63 df       	rcall	.-314    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG0,  0xF8);
 1da:	68 ef       	ldi	r22, 0xF8	; 248
 1dc:	84 e1       	ldi	r24, 0x14	; 20
 1de:	60 df       	rcall	.-320    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_CHANNR,   0x00);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	8a e0       	ldi	r24, 0x0A	; 10
 1e4:	5d df       	rcall	.-326    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_DEVIATN,  0x47);
 1e6:	67 e4       	ldi	r22, 0x47	; 71
 1e8:	85 e1       	ldi	r24, 0x15	; 21
 1ea:	5a df       	rcall	.-332    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FREND1,   0xB6);
 1ec:	66 eb       	ldi	r22, 0xB6	; 182
 1ee:	81 e2       	ldi	r24, 0x21	; 33
 1f0:	57 df       	rcall	.-338    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FREND0,   0x10);
 1f2:	60 e1       	ldi	r22, 0x10	; 16
 1f4:	82 e2       	ldi	r24, 0x22	; 34
 1f6:	54 df       	rcall	.-344    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_MCSM0 ,   0x18);
 1f8:	68 e1       	ldi	r22, 0x18	; 24
 1fa:	88 e1       	ldi	r24, 0x18	; 24
 1fc:	51 df       	rcall	.-350    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FOCCFG,   0x1D);
 1fe:	6d e1       	ldi	r22, 0x1D	; 29
 200:	89 e1       	ldi	r24, 0x19	; 25
 202:	4e df       	rcall	.-356    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_BSCFG,    0x1C);
 204:	6c e1       	ldi	r22, 0x1C	; 28
 206:	8a e1       	ldi	r24, 0x1A	; 26
 208:	4b df       	rcall	.-362    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL2, 0xC7);
 20a:	67 ec       	ldi	r22, 0xC7	; 199
 20c:	8b e1       	ldi	r24, 0x1B	; 27
 20e:	48 df       	rcall	.-368    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL1, 0x00);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	8c e1       	ldi	r24, 0x1C	; 28
 214:	45 df       	rcall	.-374    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL0, 0xB2);
 216:	62 eb       	ldi	r22, 0xB2	; 178
 218:	8d e1       	ldi	r24, 0x1D	; 29
 21a:	42 df       	rcall	.-380    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL3,   0xEA);
 21c:	6a ee       	ldi	r22, 0xEA	; 234
 21e:	83 e2       	ldi	r24, 0x23	; 35
 220:	3f df       	rcall	.-386    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL2,   0x2A);
 222:	6a e2       	ldi	r22, 0x2A	; 42
 224:	84 e2       	ldi	r24, 0x24	; 36
 226:	3c df       	rcall	.-392    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL1,   0x00);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	85 e2       	ldi	r24, 0x25	; 37
 22c:	39 df       	rcall	.-398    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL0,   0x11);
 22e:	61 e1       	ldi	r22, 0x11	; 17
 230:	86 e2       	ldi	r24, 0x26	; 38
 232:	36 df       	rcall	.-404    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_FSTEST,   0x59);
 234:	69 e5       	ldi	r22, 0x59	; 89
 236:	89 e2       	ldi	r24, 0x29	; 41
 238:	33 df       	rcall	.-410    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST2,    0x81);
 23a:	61 e8       	ldi	r22, 0x81	; 129
 23c:	8c e2       	ldi	r24, 0x2C	; 44
 23e:	30 df       	rcall	.-416    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST1,    0x35);
 240:	65 e3       	ldi	r22, 0x35	; 53
 242:	8d e2       	ldi	r24, 0x2D	; 45
 244:	2d df       	rcall	.-422    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST0,    0x09);
 246:	69 e0       	ldi	r22, 0x09	; 9
 248:	8e e2       	ldi	r24, 0x2E	; 46
 24a:	2a df       	rcall	.-428    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_IOCFG2,   0x0B); 	//serial clock.synchronous to the data in synchronous serial mode
 24c:	6b e0       	ldi	r22, 0x0B	; 11
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	27 df       	rcall	.-434    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_IOCFG0,   0x06);  	//asserts when sync word has been sent/received, and de-asserts at the end of the packet
 252:	66 e0       	ldi	r22, 0x06	; 6
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	24 df       	rcall	.-440    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_PKTCTRL1, 0x04);		//two status bytes will be appended to the payload of the packet,including RSSI LQI and CRC OK
 258:	64 e0       	ldi	r22, 0x04	; 4
 25a:	87 e0       	ldi	r24, 0x07	; 7
 25c:	21 df       	rcall	.-446    	; 0xa0 <SpiWriteReg>
    //No address check
    SpiWriteReg(CC1101_PKTCTRL0, 0x05);		//whitening off;CRC Enable£»variable length packets, packet length configured by the first byte after sync word
 25e:	65 e0       	ldi	r22, 0x05	; 5
 260:	88 e0       	ldi	r24, 0x08	; 8
 262:	1e df       	rcall	.-452    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_ADDR,     0x00);		//address used for packet filtration.
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	89 e0       	ldi	r24, 0x09	; 9
 268:	1b df       	rcall	.-458    	; 0xa0 <SpiWriteReg>
    SpiWriteReg(CC1101_PKTLEN,   0x3D); 	//61 bytes max length
 26a:	6d e3       	ldi	r22, 0x3D	; 61
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	18 cf       	rjmp	.-464    	; 0xa0 <SpiWriteReg>

00000270 <Init>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void Init(void)
{
    SpiInit();										//spi initialization
 270:	ef de       	rcall	.-546    	; 0x50 <SpiInit>
    GDO_Set();										//GDO set
 272:	fd de       	rcall	.-518    	; 0x6e <GDO_Set>
    //digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<2);
 274:	2a 9a       	sbi	0x05, 2	; 5
    //digitalWrite(SCK_PIN, HIGH);
    PORTB |= (1<<5);
 276:	2d 9a       	sbi	0x05, 5	; 5
    //digitalWrite(MOSI_PIN, LOW);
    PORTB &= ~(1<<3);
 278:	2b 98       	cbi	0x05, 3	; 5
    Reset();										//CC1101 reset
 27a:	fb de       	rcall	.-522    	; 0x72 <Reset>
    RegConfigSettings();							//CC1101 register config
 27c:	93 df       	rcall	.-218    	; 0x1a4 <RegConfigSettings>
    SpiWriteBurstReg(CC1101_PATABLE,PaTabel,8);		//CC1101 PATABLE config
 27e:	48 e0       	ldi	r20, 0x08	; 8
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	71 e0       	ldi	r23, 0x01	; 1
 284:	8e e3       	ldi	r24, 0x3E	; 62
 286:	23 cf       	rjmp	.-442    	; 0xce <SpiWriteBurstReg>

00000288 <SendData>:
 *FUNCTION     :use CC1101 send data
 *INPUT        :txBuffer: data array to send; size: number of data to send, no more than 61
 *OUTPUT       :none
 ****************************************************************/
byte SendData(byte *txBuffer,byte size)
{
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	1f 92       	push	r1
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	8c 01       	movw	r16, r24
 298:	46 2f       	mov	r20, r22
    byte res = 0x00;
    SpiWriteReg(CC1101_TXFIFO,size);
 29a:	8f e3       	ldi	r24, 0x3F	; 63
 29c:	49 83       	std	Y+1, r20	; 0x01
 29e:	00 df       	rcall	.-512    	; 0xa0 <SpiWriteReg>
    SpiWriteBurstReg(CC1101_TXFIFO,txBuffer,size);			//write data to send
 2a0:	49 81       	ldd	r20, Y+1	; 0x01
 2a2:	b8 01       	movw	r22, r16
 2a4:	8f e3       	ldi	r24, 0x3F	; 63
 2a6:	13 df       	rcall	.-474    	; 0xce <SpiWriteBurstReg>
    SpiStrobe(CC1101_STX);									//start send
 2a8:	85 e3       	ldi	r24, 0x35	; 53
 2aa:	3a df       	rcall	.-396    	; 0x120 <SpiStrobe>
    wait_GDO0_high();								// Wait for GDO0 to be set -> sync transmitted
 2ac:	4d 9b       	sbis	0x09, 5	; 9
 2ae:	fe cf       	rjmp	.-4      	; 0x2ac <SendData+0x24>
    wait_GDO0_low();								// Wait for GDO0 to be cleared -> end of packet
 2b0:	4d 99       	sbic	0x09, 5	; 9
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <SendData+0x28>
    
    if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 2b4:	8a e3       	ldi	r24, 0x3A	; 58
 2b6:	6d df       	rcall	.-294    	; 0x192 <SpiReadStatus>
 2b8:	18 2f       	mov	r17, r24
        res = 1;
    
    
    SpiStrobe(CC1101_SFTX);									//flush TXfifo
 2ba:	8b e3       	ldi	r24, 0x3B	; 59
 2bc:	31 df       	rcall	.-414    	; 0x120 <SpiStrobe>
    SpiWriteBurstReg(CC1101_TXFIFO,txBuffer,size);			//write data to send
    SpiStrobe(CC1101_STX);									//start send
    wait_GDO0_high();								// Wait for GDO0 to be set -> sync transmitted
    wait_GDO0_low();								// Wait for GDO0 to be cleared -> end of packet
    
    if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 2be:	1f 77       	andi	r17, 0x7F	; 127
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <SendData+0x3e>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
    
    
    SpiStrobe(CC1101_SFTX);									//flush TXfifo
    return res;
    
}
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <SetReceive>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void SetReceive(void)
{
    SpiStrobe(CC1101_SRX);
 2d2:	84 e3       	ldi	r24, 0x34	; 52
 2d4:	25 cf       	rjmp	.-438    	; 0x120 <SpiStrobe>

000002d6 <CheckReceiveFlag>:
 *INPUT        :none
 *OUTPUT       :flag: 0 no data; 1 receive data
 ****************************************************************/
byte CheckReceiveFlag(void)
{
    if(getGDO0state())			//receive data
 2d6:	99 b1       	in	r25, 0x09	; 9
 2d8:	95 fb       	bst	r25, 5
 2da:	88 27       	eor	r24, r24
 2dc:	80 f9       	bld	r24, 0
 2de:	95 ff       	sbrs	r25, 5
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <CheckReceiveFlag+0x12>
    {
        while (getGDO0state());
 2e2:	4d 99       	sbic	0x09, 5	; 9
 2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <CheckReceiveFlag+0xc>
        return 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
    }
    else							// no data
    {
        return 0;
    }
}
 2e8:	08 95       	ret

000002ea <ReceiveData>:
 *FUNCTION     :read data received from RXfifo
 *INPUT        :rxBuffer: buffer to store data
 *OUTPUT       :size of data received
 ****************************************************************/
byte ReceiveData(byte *rxBuffer)
{
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <ReceiveData+0xc>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	7c 01       	movw	r14, r24
    byte size;
    byte status[2];
    
    if(SpiReadStatus(CC1101_RXBYTES) & BYTES_IN_RXFIFO)
 2fc:	8b e3       	ldi	r24, 0x3B	; 59
 2fe:	49 df       	rcall	.-366    	; 0x192 <SpiReadStatus>
 300:	18 2f       	mov	r17, r24
 302:	1f 77       	andi	r17, 0x7F	; 127
 304:	69 f0       	breq	.+26     	; 0x320 <ReceiveData+0x36>
    {
        size=SpiReadReg(CC1101_RXFIFO);
 306:	8f e3       	ldi	r24, 0x3F	; 63
 308:	11 df       	rcall	.-478    	; 0x12c <SpiReadReg>
 30a:	18 2f       	mov	r17, r24
        SpiReadBurstReg(CC1101_RXFIFO,rxBuffer,size);
 30c:	48 2f       	mov	r20, r24
 30e:	b7 01       	movw	r22, r14
 310:	8f e3       	ldi	r24, 0x3F	; 63
 312:	15 df       	rcall	.-470    	; 0x13e <SpiReadBurstReg>
        SpiReadBurstReg(CC1101_RXFIFO,status,2);
 314:	42 e0       	ldi	r20, 0x02	; 2
 316:	be 01       	movw	r22, r28
 318:	6f 5f       	subi	r22, 0xFF	; 255
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	8f e3       	ldi	r24, 0x3F	; 63
 31e:	0f df       	rcall	.-482    	; 0x13e <SpiReadBurstReg>
        SpiStrobe(CC1101_SFRX);
        return size;
    }
    else
    {
        SpiStrobe(CC1101_SFRX);
 320:	8a e3       	ldi	r24, 0x3A	; 58
 322:	fe de       	rcall	.-516    	; 0x120 <SpiStrobe>
        return 0;
    }
    
}
 324:	81 2f       	mov	r24, r17
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	08 95       	ret

00000336 <initIO>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "cc1101.h"

void initIO(void) {
 336:	08 95       	ret

00000338 <main>:

int main(void) {
	initIO();

	while (1) {
	}
 338:	ff cf       	rjmp	.-2      	; 0x338 <main>

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
