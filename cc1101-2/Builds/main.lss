
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004aa  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800108  00800108  00000546  2**0
                  ALLOC
  3 .stab         00001a94  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001427  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003403  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000576  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052b  00000000  00000000  0000398a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00003eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d9  00000000  00000000  00003ed2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d1 e0       	ldi	r29, 0x01	; 1
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ea ea       	ldi	r30, 0xAA	; 170
  3c:	f4 e0       	ldi	r31, 0x04	; 4
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a8 30       	cpi	r26, 0x08	; 8
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	11 e0       	ldi	r17, 0x01	; 1
  4c:	a8 e0       	ldi	r26, 0x08	; 8
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a6 34       	cpi	r26, 0x46	; 70
  56:	b1 07       	cpc	r27, r17
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	d7 d1       	rcall	.+942    	; 0x40a <main>
  5c:	24 c2       	rjmp	.+1096   	; 0x4a6 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <TWIM_Init>:
 - FALSE:	Bitrate too high
 - TRUE:		Bitrate OK
 
 *******************************************************/
uint8_t TWIM_Init (uint32_t TWI_Bitrate)
{
  60:	9b 01       	movw	r18, r22
  62:	ac 01       	movw	r20, r24
    /*
     ** Set TWI bitrate
     ** If bitrate is too high, then error return
     */
    TWBR = ((F_CPU/TWI_Bitrate)-16)/2;
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	79 e0       	ldi	r23, 0x09	; 9
  68:	8d e3       	ldi	r24, 0x3D	; 61
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	fa d1       	rcall	.+1012   	; 0x462 <__udivmodsi4>
  6e:	da 01       	movw	r26, r20
  70:	c9 01       	movw	r24, r18
  72:	40 97       	sbiw	r24, 0x10	; 16
  74:	a1 09       	sbc	r26, r1
  76:	b1 09       	sbc	r27, r1
  78:	b6 95       	lsr	r27
  7a:	a7 95       	ror	r26
  7c:	97 95       	ror	r25
  7e:	87 95       	ror	r24
  80:	80 93 b8 00 	sts	0x00B8, r24
    if (TWBR < 11) return FALSE;
  84:	90 91 b8 00 	lds	r25, 0x00B8
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	9b 30       	cpi	r25, 0x0B	; 11
  8c:	08 f4       	brcc	.+2      	; 0x90 <TWIM_Init+0x30>
  8e:	80 e0       	ldi	r24, 0x00	; 0
    
    return TRUE;
}
  90:	08 95       	ret

00000092 <TWIM_Start>:
{
    uint8_t		twst;
    /*
     ** Send START condition
     */
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  92:	94 ea       	ldi	r25, 0xA4	; 164
  94:	90 93 bc 00 	sts	0x00BC, r25
    /*
     ** Wait until transmission completed
     */
    while (!(TWCR & (1<<TWINT)));
  98:	90 91 bc 00 	lds	r25, 0x00BC
  9c:	97 ff       	sbrs	r25, 7
  9e:	fc cf       	rjmp	.-8      	; 0x98 <TWIM_Start+0x6>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits.
     */
    twst = TWSR & 0xF8;
  a0:	90 91 b9 00 	lds	r25, 0x00B9
  a4:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst != TWI_START) && (twst != TWI_REP_START)) return FALSE;
  a6:	98 30       	cpi	r25, 0x08	; 8
  a8:	21 f0       	breq	.+8      	; 0xb2 <TWIM_Start+0x20>
  aa:	90 31       	cpi	r25, 0x10	; 16
  ac:	11 f0       	breq	.+4      	; 0xb2 <TWIM_Start+0x20>
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	08 95       	ret
    /*
     ** Send device address
     */
    TWDR = (Address<<1) + TWIM_Type;
  b2:	88 0f       	add	r24, r24
  b4:	68 0f       	add	r22, r24
  b6:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWINT)|(1<<TWEN);
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until transmission completed and ACK/NACK has been received
     */
    while (!(TWCR & (1<<TWINT)));
  c0:	80 91 bc 00 	lds	r24, 0x00BC
  c4:	87 ff       	sbrs	r24, 7
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <TWIM_Start+0x2e>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits.
     */
    twst = TWSR & 0xF8;
  c8:	80 91 b9 00 	lds	r24, 0x00B9
  cc:	88 7f       	andi	r24, 0xF8	; 248
    if ((twst != TWI_MTX_ADR_ACK) && (twst != TWI_MRX_ADR_ACK)) return FALSE;
  ce:	88 31       	cpi	r24, 0x18	; 24
  d0:	11 f0       	breq	.+4      	; 0xd6 <TWIM_Start+0x44>
  d2:	80 34       	cpi	r24, 0x40	; 64
  d4:	61 f7       	brne	.-40     	; 0xae <TWIM_Start+0x1c>
    
    return TRUE;
  d6:	81 e0       	ldi	r24, 0x01	; 1
}
  d8:	08 95       	ret

000000da <TWIM_Stop>:
void TWIM_Stop (void)
{
    /*
     ** Send stop condition
     */
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  da:	84 e9       	ldi	r24, 0x94	; 148
  dc:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until stop condition is executed and bus released
     */
    while (TWCR & (1<<TWINT));
  e0:	80 91 bc 00 	lds	r24, 0x00BC
  e4:	87 fd       	sbrc	r24, 7
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <TWIM_Stop+0x6>
}
  e8:	08 95       	ret

000000ea <TWIM_Write>:
{
    uint8_t   twst;
    /*
     ** Send data to the previously addressed device
     */
    TWDR = byte;
  ea:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	80 93 bc 00 	sts	0x00BC, r24
    /*
     ** Wait until transmission completed
     */
    while (!(TWCR & (1<<TWINT)));
  f4:	80 91 bc 00 	lds	r24, 0x00BC
  f8:	87 ff       	sbrs	r24, 7
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <TWIM_Write+0xa>
    /*
     ** Check value of TWI Status Register. Mask prescaler bits
     */
    twst = TWSR & 0xF8;
  fc:	90 91 b9 00 	lds	r25, 0x00B9
 100:	98 7f       	andi	r25, 0xF8	; 248
    if (twst != TWI_MTX_DATA_ACK) return 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	98 32       	cpi	r25, 0x28	; 40
 106:	09 f4       	brne	.+2      	; 0x10a <TWIM_Write+0x20>
 108:	80 e0       	ldi	r24, 0x00	; 0
    
    return 0;
}
 10a:	08 95       	ret

0000010c <TWIM_ReadAck>:
 - uint8_t	Read byte
 
 *******************************************************/
uint8_t TWIM_ReadAck (void)
{
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 10c:	84 ec       	ldi	r24, 0xC4	; 196
 10e:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 112:	80 91 bc 00 	lds	r24, 0x00BC
 116:	87 ff       	sbrs	r24, 7
 118:	fc cf       	rjmp	.-8      	; 0x112 <TWIM_ReadAck+0x6>
    
    return TWDR;
 11a:	80 91 bb 00 	lds	r24, 0x00BB
}
 11e:	08 95       	ret

00000120 <TWIM_ReadNack>:
 - uint8_t	Read byte
 
 *******************************************************/
uint8_t TWIM_ReadNack (void)
{
    TWCR = (1<<TWINT)|(1<<TWEN);
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT)));
 126:	80 91 bc 00 	lds	r24, 0x00BC
 12a:	87 ff       	sbrs	r24, 7
 12c:	fc cf       	rjmp	.-8      	; 0x126 <TWIM_ReadNack+0x6>
    
    return TWDR;
 12e:	80 91 bb 00 	lds	r24, 0x00BB
}
 132:	08 95       	ret

00000134 <SpiInit>:
 ****************************************************************/
void SpiInit(void)
{
    
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	85 b9       	out	0x05, r24	; 5
    // Configure SPI pins
    DDRB = (1<<DDB3) | (1<<DDB5) | (1<<DDB2);
 138:	8c e2       	ldi	r24, 0x2C	; 44
 13a:	84 b9       	out	0x04, r24	; 4
    // pinMode(SS_PIN, OUTPUT);
    // pinMode(MOSI_PIN, OUTPUT);
    // pinMode(MISO_PIN, INPUT);
    // pinMode(SCK_PIN, OUTPUT);
    PORTB = (1<<PB5);
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1<<PB4);
 140:	2c 98       	cbi	0x05, 4	; 5
    // digitalWrite(SCK_PIN, HIGH);
    // digitalWrite(MOSI_PIN, LOW);
    
    // SPI speed = clk/4
    SPCR = _BV(SPE) | _BV(MSTR);
 142:	80 e5       	ldi	r24, 0x50	; 80
 144:	8c bd       	out	0x2c, r24	; 44
 146:	08 95       	ret

00000148 <SpiTransfer>:
 *INPUT        :value: data to send
 *OUTPUT       :data to receive
 ****************************************************************/
byte SpiTransfer(byte value)
{
    SPDR = value;
 148:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF))) ;
 14a:	0d b4       	in	r0, 0x2d	; 45
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <SpiTransfer+0x2>
    return SPDR;
 150:	8e b5       	in	r24, 0x2e	; 46
}
 152:	08 95       	ret

00000154 <GDO_Set>:
 ****************************************************************/
void GDO_Set (void)
{
    // pinMode(GDO0, INPUT);
    // pinMode(GDO2, INPUT);
    DDRD &= ~(1<<DDD2);
 154:	52 98       	cbi	0x0a, 2	; 10
 156:	08 95       	ret

00000158 <Reset>:
 *OUTPUT       :none
 ****************************************************************/
void Reset (void)
{
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 158:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	87 ee       	ldi	r24, 0xE7	; 231
 15c:	93 e0       	ldi	r25, 0x03	; 3
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <Reset+0x6>
 162:	00 c0       	rjmp	.+0      	; 0x164 <Reset+0xc>
 164:	00 00       	nop
    _delay_ms(1);
    //digitalWrite(SS_PIN, HIGH);
    PORTB |= (1<<PB2);
 166:	2a 9a       	sbi	0x05, 2	; 5
 168:	87 ee       	ldi	r24, 0xE7	; 231
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <Reset+0x14>
 170:	00 c0       	rjmp	.+0      	; 0x172 <Reset+0x1a>
 172:	00 00       	nop
    _delay_ms(1);
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 174:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 176:	1c 99       	sbic	0x03, 4	; 3
 178:	fe cf       	rjmp	.-4      	; 0x176 <Reset+0x1e>
    SpiTransfer(CC1101_SRES);
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	e5 df       	rcall	.-54     	; 0x148 <SpiTransfer>
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 17e:	1c 99       	sbic	0x03, 4	; 3
 180:	fe cf       	rjmp	.-4      	; 0x17e <Reset+0x26>
    //digitalWrite(SS_PIN, HIGH);]
    PORTB = (1<<PB2);
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	85 b9       	out	0x05, r24	; 5
 186:	08 95       	ret

00000188 <SpiWriteReg>:
 *FUNCTION     :CC1101 write data to register
 *INPUT        :addr: register address; value: register value
 *OUTPUT       :none
 ****************************************************************/
void SpiWriteReg(byte addr, byte value)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	1f 92       	push	r1
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 192:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 194:	1c 99       	sbic	0x03, 4	; 3
 196:	fe cf       	rjmp	.-4      	; 0x194 <SpiWriteReg+0xc>
    SpiTransfer(addr);
 198:	69 83       	std	Y+1, r22	; 0x01
 19a:	d6 df       	rcall	.-84     	; 0x148 <SpiTransfer>
    SpiTransfer(value);
 19c:	69 81       	ldd	r22, Y+1	; 0x01
 19e:	86 2f       	mov	r24, r22
    //digitalWrite(SS_PIN, HIGH);
}
 1a0:	0f 90       	pop	r0
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
    //while(digitalRead(MISO_PIN));
    wait_Miso();
    SpiTransfer(addr);
    SpiTransfer(value);
 1a6:	d0 cf       	rjmp	.-96     	; 0x148 <SpiTransfer>

000001a8 <SpiWriteBurstReg>:
 *FUNCTION     :CC1101 write burst data to register
 *INPUT        :addr: register address; buffer:register value array; num:number to write
 *OUTPUT       :none
 ****************************************************************/
void SpiWriteBurstReg(byte addr, byte *buffer, byte num)
{
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <SpiWriteBurstReg+0xe>
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	14 2f       	mov	r17, r20
    byte i, temp;
    
    temp = addr | WRITE_BURST;
 1bc:	80 64       	ori	r24, 0x40	; 64
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 1be:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 1c0:	1c 99       	sbic	0x03, 4	; 3
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <SpiWriteBurstReg+0x18>
    SpiTransfer(temp);
 1c4:	69 83       	std	Y+1, r22	; 0x01
 1c6:	7a 83       	std	Y+2, r23	; 0x02
 1c8:	bf df       	rcall	.-130    	; 0x148 <SpiTransfer>
 1ca:	69 81       	ldd	r22, Y+1	; 0x01
 1cc:	06 2f       	mov	r16, r22
    for (i = 0; i < num; i++)
 1ce:	e6 2e       	mov	r14, r22
 1d0:	7a 81       	ldd	r23, Y+2	; 0x02
 1d2:	f7 2e       	mov	r15, r23
 1d4:	8e 2d       	mov	r24, r14
 1d6:	80 1b       	sub	r24, r16
 1d8:	81 17       	cp	r24, r17
 1da:	28 f4       	brcc	.+10     	; 0x1e6 <SpiWriteBurstReg+0x3e>
    {
        SpiTransfer(buffer[i]);
 1dc:	f7 01       	movw	r30, r14
 1de:	81 91       	ld	r24, Z+
 1e0:	7f 01       	movw	r14, r30
 1e2:	b2 df       	rcall	.-156    	; 0x148 <SpiTransfer>
 1e4:	f7 cf       	rjmp	.-18     	; 0x1d4 <SpiWriteBurstReg+0x2c>
    }
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	85 b9       	out	0x05, r24	; 5
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	08 95       	ret

000001fc <SpiStrobe>:
 *OUTPUT       :none
 ****************************************************************/
void SpiStrobe(byte strobe)
{
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 1fc:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 1fe:	1c 99       	sbic	0x03, 4	; 3
 200:	fe cf       	rjmp	.-4      	; 0x1fe <SpiStrobe+0x2>
    SpiTransfer(strobe);
 202:	a2 df       	rcall	.-188    	; 0x148 <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	85 b9       	out	0x05, r24	; 5
 208:	08 95       	ret

0000020a <SpiReadReg>:
 ****************************************************************/
byte SpiReadReg(byte addr)
{
    byte temp, value;
    
    temp = addr|READ_SINGLE;
 20a:	80 68       	ori	r24, 0x80	; 128
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 20c:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 20e:	1c 99       	sbic	0x03, 4	; 3
 210:	fe cf       	rjmp	.-4      	; 0x20e <SpiReadReg+0x4>
    SpiTransfer(temp);
 212:	9a df       	rcall	.-204    	; 0x148 <SpiTransfer>
    value=SpiTransfer(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	98 df       	rcall	.-208    	; 0x148 <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 218:	94 e0       	ldi	r25, 0x04	; 4
 21a:	95 b9       	out	0x05, r25	; 5
    return value;
}
 21c:	08 95       	ret

0000021e <SpiReadBurstReg>:
 *FUNCTION     :CC1101 read burst data from register
 *INPUT        :addr: register address; buffer:array to store register value; num: number to read
 *OUTPUT       :none
 ****************************************************************/
void SpiReadBurstReg(byte addr, byte *buffer, byte num)
{
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	00 d0       	rcall	.+0      	; 0x22c <SpiReadBurstReg+0xe>
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	14 2f       	mov	r17, r20
    byte i,temp;
    
    temp = addr | READ_BURST;
 232:	80 6c       	ori	r24, 0xC0	; 192
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 234:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 236:	1c 99       	sbic	0x03, 4	; 3
 238:	fe cf       	rjmp	.-4      	; 0x236 <SpiReadBurstReg+0x18>
    SpiTransfer(temp);
 23a:	69 83       	std	Y+1, r22	; 0x01
 23c:	7a 83       	std	Y+2, r23	; 0x02
 23e:	84 df       	rcall	.-248    	; 0x148 <SpiTransfer>
 240:	69 81       	ldd	r22, Y+1	; 0x01
 242:	06 2f       	mov	r16, r22
    for(i=0;i<num;i++)
 244:	e6 2e       	mov	r14, r22
 246:	7a 81       	ldd	r23, Y+2	; 0x02
 248:	f7 2e       	mov	r15, r23
 24a:	8e 2d       	mov	r24, r14
 24c:	80 1b       	sub	r24, r16
 24e:	81 17       	cp	r24, r17
 250:	30 f4       	brcc	.+12     	; 0x25e <SpiReadBurstReg+0x40>
    {
        buffer[i]=SpiTransfer(0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	79 df       	rcall	.-270    	; 0x148 <SpiTransfer>
 256:	f7 01       	movw	r30, r14
 258:	81 93       	st	Z+, r24
 25a:	7f 01       	movw	r14, r30
 25c:	f6 cf       	rjmp	.-20     	; 0x24a <SpiReadBurstReg+0x2c>
    }
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	85 b9       	out	0x05, r24	; 5
}
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	08 95       	ret

00000274 <SpiReadStatus>:
 ****************************************************************/
byte SpiReadStatus(byte addr)
{
    byte value,temp;
    
    temp = addr | READ_BURST;
 274:	80 6c       	ori	r24, 0xC0	; 192
    //digitalWrite(SS_PIN, LOW);
    PORTB &= ~(1<<PB2);
 276:	2a 98       	cbi	0x05, 2	; 5
    //while(digitalRead(MISO_PIN));
    wait_Miso();
 278:	1c 99       	sbic	0x03, 4	; 3
 27a:	fe cf       	rjmp	.-4      	; 0x278 <SpiReadStatus+0x4>
    SpiTransfer(temp);
 27c:	65 df       	rcall	.-310    	; 0x148 <SpiTransfer>
    value=SpiTransfer(0);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	63 df       	rcall	.-314    	; 0x148 <SpiTransfer>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 282:	94 e0       	ldi	r25, 0x04	; 4
 284:	95 b9       	out	0x05, r25	; 5
    return value;
}
 286:	08 95       	ret

00000288 <RegConfigSettings>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void RegConfigSettings(void)
{
    SpiWriteReg(CC1101_FSCTRL1,  0x08);
 288:	68 e0       	ldi	r22, 0x08	; 8
 28a:	8b e0       	ldi	r24, 0x0B	; 11
 28c:	7d df       	rcall	.-262    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCTRL0,  0x00);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	7a df       	rcall	.-268    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ2,    0x10);
 294:	60 e1       	ldi	r22, 0x10	; 16
 296:	8d e0       	ldi	r24, 0x0D	; 13
 298:	77 df       	rcall	.-274    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ1,    0xA7);
 29a:	67 ea       	ldi	r22, 0xA7	; 167
 29c:	8e e0       	ldi	r24, 0x0E	; 14
 29e:	74 df       	rcall	.-280    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FREQ0,    0x62);
 2a0:	62 e6       	ldi	r22, 0x62	; 98
 2a2:	8f e0       	ldi	r24, 0x0F	; 15
 2a4:	71 df       	rcall	.-286    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG4,  0x5B);
 2a6:	6b e5       	ldi	r22, 0x5B	; 91
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	6e df       	rcall	.-292    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG3,  0xF8);
 2ac:	68 ef       	ldi	r22, 0xF8	; 248
 2ae:	81 e1       	ldi	r24, 0x11	; 17
 2b0:	6b df       	rcall	.-298    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG2,  0x03);
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	82 e1       	ldi	r24, 0x12	; 18
 2b6:	68 df       	rcall	.-304    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG1,  0x22);
 2b8:	62 e2       	ldi	r22, 0x22	; 34
 2ba:	83 e1       	ldi	r24, 0x13	; 19
 2bc:	65 df       	rcall	.-310    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG0,  0xF8);
 2be:	68 ef       	ldi	r22, 0xF8	; 248
 2c0:	84 e1       	ldi	r24, 0x14	; 20
 2c2:	62 df       	rcall	.-316    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_CHANNR,   0x00);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
 2c8:	5f df       	rcall	.-322    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_DEVIATN,  0x47);
 2ca:	67 e4       	ldi	r22, 0x47	; 71
 2cc:	85 e1       	ldi	r24, 0x15	; 21
 2ce:	5c df       	rcall	.-328    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FREND1,   0xB6);
 2d0:	66 eb       	ldi	r22, 0xB6	; 182
 2d2:	81 e2       	ldi	r24, 0x21	; 33
 2d4:	59 df       	rcall	.-334    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FREND0,   0x10);
 2d6:	60 e1       	ldi	r22, 0x10	; 16
 2d8:	82 e2       	ldi	r24, 0x22	; 34
 2da:	56 df       	rcall	.-340    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_MCSM0 ,   0x18);
 2dc:	68 e1       	ldi	r22, 0x18	; 24
 2de:	88 e1       	ldi	r24, 0x18	; 24
 2e0:	53 df       	rcall	.-346    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FOCCFG,   0x1D);
 2e2:	6d e1       	ldi	r22, 0x1D	; 29
 2e4:	89 e1       	ldi	r24, 0x19	; 25
 2e6:	50 df       	rcall	.-352    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_BSCFG,    0x1C);
 2e8:	6c e1       	ldi	r22, 0x1C	; 28
 2ea:	8a e1       	ldi	r24, 0x1A	; 26
 2ec:	4d df       	rcall	.-358    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL2, 0xC7);
 2ee:	67 ec       	ldi	r22, 0xC7	; 199
 2f0:	8b e1       	ldi	r24, 0x1B	; 27
 2f2:	4a df       	rcall	.-364    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL1, 0x00);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	8c e1       	ldi	r24, 0x1C	; 28
 2f8:	47 df       	rcall	.-370    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL0, 0xB2);
 2fa:	62 eb       	ldi	r22, 0xB2	; 178
 2fc:	8d e1       	ldi	r24, 0x1D	; 29
 2fe:	44 df       	rcall	.-376    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL3,   0xEA);
 300:	6a ee       	ldi	r22, 0xEA	; 234
 302:	83 e2       	ldi	r24, 0x23	; 35
 304:	41 df       	rcall	.-382    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL2,   0x2A);
 306:	6a e2       	ldi	r22, 0x2A	; 42
 308:	84 e2       	ldi	r24, 0x24	; 36
 30a:	3e df       	rcall	.-388    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL1,   0x00);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	85 e2       	ldi	r24, 0x25	; 37
 310:	3b df       	rcall	.-394    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL0,   0x11);
 312:	61 e1       	ldi	r22, 0x11	; 17
 314:	86 e2       	ldi	r24, 0x26	; 38
 316:	38 df       	rcall	.-400    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_FSTEST,   0x59);
 318:	69 e5       	ldi	r22, 0x59	; 89
 31a:	89 e2       	ldi	r24, 0x29	; 41
 31c:	35 df       	rcall	.-406    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST2,    0x81);
 31e:	61 e8       	ldi	r22, 0x81	; 129
 320:	8c e2       	ldi	r24, 0x2C	; 44
 322:	32 df       	rcall	.-412    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST1,    0x35);
 324:	65 e3       	ldi	r22, 0x35	; 53
 326:	8d e2       	ldi	r24, 0x2D	; 45
 328:	2f df       	rcall	.-418    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST0,    0x09);
 32a:	69 e0       	ldi	r22, 0x09	; 9
 32c:	8e e2       	ldi	r24, 0x2E	; 46
 32e:	2c df       	rcall	.-424    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_IOCFG2,   0x0B);     //serial clock.synchronous to the data in synchronous serial mode
 330:	6b e0       	ldi	r22, 0x0B	; 11
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	29 df       	rcall	.-430    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_IOCFG0,   0x06);     //asserts when sync word has been sent/received, and de-asserts at the end of the packet
 336:	66 e0       	ldi	r22, 0x06	; 6
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	26 df       	rcall	.-436    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_PKTCTRL1, 0x04);     //two status bytes will be appended to the payload of the packet,including RSSI LQI and CRC OK
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	87 e0       	ldi	r24, 0x07	; 7
 340:	23 df       	rcall	.-442    	; 0x188 <SpiWriteReg>
    //No address check
    SpiWriteReg(CC1101_PKTCTRL0, 0x05);     //whitening off;CRC Enable£»variable length packets, packet length configured by the first byte after sync word
 342:	65 e0       	ldi	r22, 0x05	; 5
 344:	88 e0       	ldi	r24, 0x08	; 8
 346:	20 df       	rcall	.-448    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_ADDR,     0x00);     //address used for packet filtration.
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	89 e0       	ldi	r24, 0x09	; 9
 34c:	1d df       	rcall	.-454    	; 0x188 <SpiWriteReg>
    SpiWriteReg(CC1101_PKTLEN,   0x3D);     //61 bytes max length
 34e:	6d e3       	ldi	r22, 0x3D	; 61
 350:	86 e0       	ldi	r24, 0x06	; 6
 352:	1a cf       	rjmp	.-460    	; 0x188 <SpiWriteReg>

00000354 <Init>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void Init(void)
{
    SpiInit();                                      //spi initialization
 354:	ef de       	rcall	.-546    	; 0x134 <SpiInit>
    GDO_Set();                                     //GDO set
 356:	fe de       	rcall	.-516    	; 0x154 <GDO_Set>
    //digitalWrite(SS_PIN, HIGH);
    PORTB = (1<<PB2);
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	85 b9       	out	0x05, r24	; 5
    //digitalWrite(SCK_PIN, HIGH);
    PORTB = (1<<PB5);
 35c:	80 e2       	ldi	r24, 0x20	; 32
 35e:	85 b9       	out	0x05, r24	; 5
    //digitalWrite(MOSI_PIN, LOW);
    PORTB &= ~(1<<PB3);
 360:	2b 98       	cbi	0x05, 3	; 5
    Reset();                                       //CC1101 reset
 362:	fa de       	rcall	.-524    	; 0x158 <Reset>
    RegConfigSettings();                           //CC1101 register config
 364:	91 df       	rcall	.-222    	; 0x288 <RegConfigSettings>
    SpiWriteBurstReg(CC1101_PATABLE,PaTabel,8);        //CC1101 PATABLE config
 366:	48 e0       	ldi	r20, 0x08	; 8
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	71 e0       	ldi	r23, 0x01	; 1
 36c:	8e e3       	ldi	r24, 0x3E	; 62
 36e:	1c cf       	rjmp	.-456    	; 0x1a8 <SpiWriteBurstReg>

00000370 <SendData>:
 *FUNCTION     :use CC1101 send data
 *INPUT        :txBuffer: data array to send; size: number of data to send, no more than 61
 *OUTPUT       :none
 ****************************************************************/
byte SendData(byte *txBuffer,byte size)
{
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	1f 92       	push	r1
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	8c 01       	movw	r16, r24
 380:	46 2f       	mov	r20, r22
    byte res = 0x00;
    SpiWriteReg(CC1101_TXFIFO,size);
 382:	8f e3       	ldi	r24, 0x3F	; 63
 384:	49 83       	std	Y+1, r20	; 0x01
 386:	00 df       	rcall	.-512    	; 0x188 <SpiWriteReg>
    SpiWriteBurstReg(CC1101_TXFIFO,txBuffer,size);          //write data to send
 388:	49 81       	ldd	r20, Y+1	; 0x01
 38a:	b8 01       	movw	r22, r16
 38c:	8f e3       	ldi	r24, 0x3F	; 63
 38e:	0c df       	rcall	.-488    	; 0x1a8 <SpiWriteBurstReg>
    SpiStrobe(CC1101_STX);                                  //start send
 390:	85 e3       	ldi	r24, 0x35	; 53
 392:	34 df       	rcall	.-408    	; 0x1fc <SpiStrobe>
    //while (!digitalRead(GDO0));                             // Wait for GDO0 to be set -> sync transmitted
    //while (digitalRead(GDO0));                              // Wait for GDO0 to be cleared -> end of packet
    wait_GDO0_high();
 394:	4d 9b       	sbis	0x09, 5	; 9
 396:	fe cf       	rjmp	.-4      	; 0x394 <SendData+0x24>
    wait_GDO0_low();
 398:	4d 99       	sbic	0x09, 5	; 9
 39a:	fe cf       	rjmp	.-4      	; 0x398 <SendData+0x28>
    if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 39c:	8a e3       	ldi	r24, 0x3A	; 58
 39e:	6a df       	rcall	.-300    	; 0x274 <SpiReadStatus>
 3a0:	18 2f       	mov	r17, r24
        res = 1;
    
    
    SpiStrobe(CC1101_SFTX);                                 //flush TXfifo
 3a2:	8b e3       	ldi	r24, 0x3B	; 59
 3a4:	2b df       	rcall	.-426    	; 0x1fc <SpiStrobe>
    SpiStrobe(CC1101_STX);                                  //start send
    //while (!digitalRead(GDO0));                             // Wait for GDO0 to be set -> sync transmitted
    //while (digitalRead(GDO0));                              // Wait for GDO0 to be cleared -> end of packet
    wait_GDO0_high();
    wait_GDO0_low();
    if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 3a6:	1f 77       	andi	r17, 0x7F	; 127
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	09 f0       	breq	.+2      	; 0x3ae <SendData+0x3e>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
    
    
    SpiStrobe(CC1101_SFTX);                                 //flush TXfifo
    return res;
    
}
 3ae:	0f 90       	pop	r0
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

000003ba <SetReceive>:
 *INPUT        :none
 *OUTPUT       :none
 ****************************************************************/
void SetReceive(void)
{
    SpiStrobe(CC1101_SRX);
 3ba:	84 e3       	ldi	r24, 0x34	; 52
 3bc:	1f cf       	rjmp	.-450    	; 0x1fc <SpiStrobe>

000003be <ReceiveData>:
 *FUNCTION     :read data received from RXfifo
 *INPUT        :rxBuffer: buffer to store data
 *OUTPUT       :size of data received
 ****************************************************************/
byte ReceiveData(byte *rxBuffer)
{
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <ReceiveData+0xc>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	7c 01       	movw	r14, r24
    byte size;
    byte status[2];
    
    if(SpiReadStatus(CC1101_RXBYTES) & BYTES_IN_RXFIFO)
 3d0:	8b e3       	ldi	r24, 0x3B	; 59
 3d2:	50 df       	rcall	.-352    	; 0x274 <SpiReadStatus>
 3d4:	18 2f       	mov	r17, r24
 3d6:	1f 77       	andi	r17, 0x7F	; 127
 3d8:	69 f0       	breq	.+26     	; 0x3f4 <ReceiveData+0x36>
    {
        size=SpiReadReg(CC1101_RXFIFO);
 3da:	8f e3       	ldi	r24, 0x3F	; 63
 3dc:	16 df       	rcall	.-468    	; 0x20a <SpiReadReg>
 3de:	18 2f       	mov	r17, r24
        SpiReadBurstReg(CC1101_RXFIFO,rxBuffer,size);
 3e0:	48 2f       	mov	r20, r24
 3e2:	b7 01       	movw	r22, r14
 3e4:	8f e3       	ldi	r24, 0x3F	; 63
 3e6:	1b df       	rcall	.-458    	; 0x21e <SpiReadBurstReg>
        SpiReadBurstReg(CC1101_RXFIFO,status,2);
 3e8:	42 e0       	ldi	r20, 0x02	; 2
 3ea:	be 01       	movw	r22, r28
 3ec:	6f 5f       	subi	r22, 0xFF	; 255
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	8f e3       	ldi	r24, 0x3F	; 63
 3f2:	15 df       	rcall	.-470    	; 0x21e <SpiReadBurstReg>
        SpiStrobe(CC1101_SFRX);
        return size;
    }
    else
    {
        SpiStrobe(CC1101_SFRX);
 3f4:	8a e3       	ldi	r24, 0x3A	; 58
 3f6:	02 df       	rcall	.-508    	; 0x1fc <SpiStrobe>
        return 0;
    }
    
 3f8:	81 2f       	mov	r24, r17
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	08 95       	ret

0000040a <main>:
#define size 61

byte TX_buffer[size]={0};
byte i;

int main(void) {
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
    byte version;
    for(i=0;i<size;i++)
    {
        TX_buffer[i]=i*2;
 40e:	e8 2f       	mov	r30, r24
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	e8 5f       	subi	r30, 0xF8	; 248
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	90 83       	st	Z, r25
byte TX_buffer[size]={0};
byte i;

int main(void) {
    byte version;
    for(i=0;i<size;i++)
 418:	8f 5f       	subi	r24, 0xFF	; 255
 41a:	9e 5f       	subi	r25, 0xFE	; 254
 41c:	8d 33       	cpi	r24, 0x3D	; 61
 41e:	b9 f7       	brne	.-18     	; 0x40e <main+0x4>
 420:	80 93 45 01 	sts	0x0145, r24
    {
        TX_buffer[i]=i*2;
    }
    Init();
 424:	97 df       	rcall	.-210    	; 0x354 <Init>
    //_delay_ms(200);
    version = SpiReadStatus(CC1101_VERSION);
 426:	81 e3       	ldi	r24, 0x31	; 49
 428:	25 df       	rcall	.-438    	; 0x274 <SpiReadStatus>
//        else
//        {
            //sent = SendData(TX_buffer,size);
            byte res;
            //TWIM_Write(version);
            SpiWriteReg(CC1101_TXFIFO,size);
 42a:	6d e3       	ldi	r22, 0x3D	; 61
 42c:	8f e3       	ldi	r24, 0x3F	; 63
 42e:	ac de       	rcall	.-680    	; 0x188 <SpiWriteReg>
            //_delay_ms(1000);
            SpiWriteBurstReg(CC1101_TXFIFO,TX_buffer,size);      //write data to send
 430:	4d e3       	ldi	r20, 0x3D	; 61
 432:	68 e0       	ldi	r22, 0x08	; 8
 434:	71 e0       	ldi	r23, 0x01	; 1
 436:	8f e3       	ldi	r24, 0x3F	; 63
 438:	b7 de       	rcall	.-658    	; 0x1a8 <SpiWriteBurstReg>
            //_delay_ms(1000);
            SpiStrobe(CC1101_STX);                  //start send
 43a:	85 e3       	ldi	r24, 0x35	; 53
 43c:	df de       	rcall	.-578    	; 0x1fc <SpiStrobe>
            //_delay_ms(1000);
            //TWIM_Write(SpiReadStatus(CC1101_MARCSTATE));
            wait_GDO0_high();
 43e:	4d 9b       	sbis	0x09, 5	; 9
 440:	fe cf       	rjmp	.-4      	; 0x43e <main+0x34>
            wait_GDO0_low();
 442:	4d 99       	sbic	0x09, 5	; 9
 444:	fe cf       	rjmp	.-4      	; 0x442 <main+0x38>
            //TWIM_Write(SpiReadStatus(CC1101_MARCSTATE));
            if((SpiReadStatus(CC1101_TXBYTES) & 0x7F) == 0)
 446:	8a e3       	ldi	r24, 0x3A	; 58
 448:	15 df       	rcall	.-470    	; 0x274 <SpiReadStatus>
                res = 1;
            
            SpiStrobe(CC1101_SFTX);
 44a:	8b e3       	ldi	r24, 0x3B	; 59
 44c:	d7 de       	rcall	.-594    	; 0x1fc <SpiStrobe>
 44e:	2f ef       	ldi	r18, 0xFF	; 255
 450:	89 e6       	ldi	r24, 0x69	; 105
 452:	98 e1       	ldi	r25, 0x18	; 24
 454:	21 50       	subi	r18, 0x01	; 1
 456:	80 40       	sbci	r24, 0x00	; 0
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x4a>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x54>
 45e:	00 00       	nop
 460:	e4 cf       	rjmp	.-56     	; 0x42a <main+0x20>

00000462 <__udivmodsi4>:
 462:	a1 e2       	ldi	r26, 0x21	; 33
 464:	1a 2e       	mov	r1, r26
 466:	aa 1b       	sub	r26, r26
 468:	bb 1b       	sub	r27, r27
 46a:	fd 01       	movw	r30, r26
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__udivmodsi4_ep>

0000046e <__udivmodsi4_loop>:
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	ee 1f       	adc	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	a2 17       	cp	r26, r18
 478:	b3 07       	cpc	r27, r19
 47a:	e4 07       	cpc	r30, r20
 47c:	f5 07       	cpc	r31, r21
 47e:	20 f0       	brcs	.+8      	; 0x488 <__udivmodsi4_ep>
 480:	a2 1b       	sub	r26, r18
 482:	b3 0b       	sbc	r27, r19
 484:	e4 0b       	sbc	r30, r20
 486:	f5 0b       	sbc	r31, r21

00000488 <__udivmodsi4_ep>:
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a 94       	dec	r1
 492:	69 f7       	brne	.-38     	; 0x46e <__udivmodsi4_loop>
 494:	60 95       	com	r22
 496:	70 95       	com	r23
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	9b 01       	movw	r18, r22
 49e:	ac 01       	movw	r20, r24
 4a0:	bd 01       	movw	r22, r26
 4a2:	cf 01       	movw	r24, r30
 4a4:	08 95       	ret

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
